/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AccountEntryConfirmation.java
 *
 * Created on May 7, 2009, 4:48:00 PM
 */

package com.openbravo.pos.Accounts;

import com.openbravo.pos.clubmang.*;
import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.MessageInf;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.PreparedSentence;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerReadInteger;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
//import com.openbravo.format.Formats;
//import com.openbravo.pos.clubmang.AccEntryCongDetail;
import com.openbravo.pos.forms.AppUser;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import com.openbravo.pos.forms.LookupUtilityImpl;
import java.awt.Color;
import java.awt.Component;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
//import javax.swing.AbstractCellEditor;
import java.util.List;
import javax.swing.JComponent;
//import javax.swing.JLabel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
//import javax.swing.JTable;
//import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author swathi
 */
public class AccountEntryConfirmation extends javax.swing.JPanel implements JPanelView,BeanFactoryApp{

    /** Creates new form AccountEntryConfirmation */
    private AccEntryConfTableModel accemodel;
    private AppView m_App;
    private DataLogicFacilities dlfac;
    public AccountEntryConfirmation() {
        initComponents();
    }

    public void init(AppView app) throws BeanFactoryException {
       m_App=app;
       dlfac=(DataLogicFacilities) app.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");
    }

    public String getTitle() {
       return null;
    }

    public void activate() throws BasicException {
      accemodel=AccEntryConfTableModel.loadInstance(m_App);
      jTable1.setModel(accemodel.getTableModel());
      TableColumnModel cmodel=jTable1.getColumnModel();
      if(jTable1.getRowCount()>0)
      jTable1.setRowSelectionInterval(0, 0);
      jTable2.setModel(accemodel.getRejTableModel());
    }
    
    public boolean deactivate() {
        return true;
    }

    public JComponent getComponent() {
        return this;
    }

    public Object getBean() {
       return this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 =  new javax.swing.JTable(){public Component prepareRenderer(TableCellRenderer renderer,
            int rowIndex, int vColIndex) {
            Component c = super.prepareRenderer(renderer, rowIndex, vColIndex);
            if (c instanceof JComponent) {
                JComponent jc = (JComponent)c;
                jc.setToolTipText(String.valueOf(getValueAt(rowIndex, vColIndex)));

                if (rowIndex % 2 == 0 && !isCellSelected(rowIndex, vColIndex)) {
                    jc.setBackground(Color.lightGray);
                }
                else {
                    jc.setBackground(Color.white);
                }
                if(isCellSelected(rowIndex, vColIndex))
                jc.setBackground(Color.cyan);
            }
            return c;
        }};
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("List");

        jLabel2.setText("List Of Transactions Rejected By Others");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        jButton4.setText("Ok");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Detal");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton1.setText("Detail");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Reject");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setText("Allow");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jButton5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton4)
                            .addGap(4, 4, 4))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
        int row= jTable1.getSelectedRow();
        if(row>=0){
            String tid=accemodel.getTableModel().getValueAt(row, 4).toString();
          AccEntryCongDetail accentry=AccEntryCongDetail.getDialog(this, m_App);
          accentry.showDialog(tid);
        }
        }
        catch(Exception e){
            new MessageInf(e).show(getParent());
          e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try{
        int row= jTable1.getSelectedRow();
        if(row>=0){
            Timestamp t=(Timestamp)accemodel.getTableModel().getValueAt(row, 0);
         Date  d=new Date();
         d.setTime(t.getTime());
         String transref=accemodel.getTableModel().getValueAt(row, 5).toString();
         String transno=dlfac.getnextTranscationNum(d, transref);
         String tid=accemodel.getTableModel().getValueAt(row, 4).toString();
         Object otid=accemodel.getTableModel().getValueAt(row, 6);
         AppUser user=m_App.getAppUserView().getUser();
         GeneralSettingInfo gsininfo=LookupUtilityImpl.getInstance(null).getGeneralSettingsMap().get("Petty Cash Incharge");
         GeneralSettingInfo pcaccinfo=LookupUtilityImpl.getInstance(null).getGeneralSettingsMap().get("Petty Cash Account");
         int cnt=0;
         if(gsininfo!=null && gsininfo.getValue()!=null && pcaccinfo!=null && pcaccinfo.getValue()!=null && m_App.getAppUserView().getUser().getId().equals(gsininfo.getValue())){
                 cnt= new PreparedSentence(m_App.getSession()
                 , "UPDATE ACCOUNTEDITDETAIL SET CONFIRMEDBY=? WHERE TID=? AND (CONFIRMER=? OR CONFIRMER=? OR CONFIRMER=?) AND CONFIRMEDBY IS NULL "
                 , new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING})).exec(new Object[]{user.getId(),tid,user.getcashaccount(),user.getchequeaccount(),pcaccinfo.getValue()});
             }else{
                cnt=  new PreparedSentence(m_App.getSession()
                 , "UPDATE ACCOUNTEDITDETAIL SET CONFIRMEDBY=? WHERE TID=? AND (CONFIRMER=? OR CONFIRMER=?) AND CONFIRMEDBY IS NULL "
                 , new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING})).exec(new Object[]{user.getId(),tid,user.getcashaccount(),user.getchequeaccount()});
             }

         int count=(Integer)new StaticSentence(m_App.getSession()
                 , "SELECT COUNT(*) FROM ACCOUNTEDITDETAIL WHERE TID=? AND CONFIRMEDBY IS  NULL",
                 SerializerWriteString.INSTANCE
                 ,SerializerReadInteger.INSTANCE).find(tid);
         if(count==0 && cnt>0){
         if(otid==null){
         new PreparedSentence(m_App.getSession()
                , "INSERT INTO ACCOUNTJOURNAL(ID,TID,DATE,TRANSTYPE,TRANSREF,TRANSNO,AMOUNT,DUEDATE,ADJUSTED,CREATEDBY,COUNTER,NARRATION,ACCOUNTID,BALANCEAMOUNT,CLEARDATE,DATEOFENTRY) SELECT ID,TID,DATE,TRANSTYPE,TRANSREF,TRANSNO,AMOUNT,DUEDATE,ADJUSTED,CREATEDBY,COUNTER,NARRATION,ACCOUNTID,BALANCEAMOUNT,CLEARDATE,DATEOFENTRY FROM ACCOUNTJOURNALDUP A WHERE A.TID=?"
                , SerializerWriteString.INSTANCE).exec(tid);
         List<Object[]> list=new StaticSentence(m_App.getSession(), "SELECT TRANSTYPE,AMOUNT,ACCOUNTID FROM ACCOUNTJOURNALDUP WHERE TID=?"
                          , SerializerWriteString.INSTANCE,new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.DOUBLE,Datas.STRING})).list(tid);
         for(Object[] obj:list){
          double debit=0,credit=0;
          if(obj[0].toString().equals("D"))
              debit=Double.parseDouble(obj[1].toString());
          else
              credit=Double.parseDouble(obj[1].toString());
               Date d1=new Date();
               d1.setTime(d.getTime());
               Calendar cal=Calendar.getInstance();
               cal.setTimeInMillis(d1.getTime());
               cal.set(Calendar.DATE, cal.getActualMaximum(Calendar.DATE));
               cal.set(Calendar.HOUR, 00);
               cal.set(Calendar.MINUTE, 00);
               cal.set(Calendar.SECOND, 00);
               cal.set(Calendar.MILLISECOND, 00);
               d1.setTime(cal.getTimeInMillis());
          Object[] value=new Object[]{debit,credit,obj[2],d1};
          dlfac.updateTrailBalance(value);
         }
         new PreparedSentence(m_App.getSession()
                , "DELETE FROM ACCOUNTJOURNALDUP WHERE TID=?"
                , SerializerWriteString.INSTANCE).exec(tid);
         new PreparedSentence(m_App.getSession()
                , "UPDATE ACCOUNTJOURNAL SET TRANSNO=?,ACTIVE=TRUE WHERE TID=?"
                , new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING})).exec(new Object[]{transno,tid});
         }else{
           new PreparedSentence(m_App.getSession()
                , "INSERT INTO ACCOUNTJOURNAL(ID,TID,DATE,TRANSTYPE,TRANSREF,TRANSNO,AMOUNT,DUEDATE,ADJUSTED,CREATEDBY,COUNTER,NARRATION,ACCOUNTID,BALANCEAMOUNT,CLEARDATE,DATEOFENTRY,DEACTREF) SELECT ID,TID,DATE,TRANSTYPE,TRANSREF,TRANSNO,AMOUNT,DUEDATE,ADJUSTED,CREATEDBY,COUNTER,NARRATION,ACCOUNTID,BALANCEAMOUNT,CLEARDATE,DATEOFENTRY,DEACTREF FROM ACCOUNTJOURNALDUP A WHERE A.TID=?"
                , SerializerWriteString.INSTANCE).exec(tid);
           List<Object[]> list=new StaticSentence(m_App.getSession(), "SELECT TRANSTYPE,AMOUNT,ACCOUNTID FROM ACCOUNTJOURNALDUP WHERE TID=?"
                          , SerializerWriteString.INSTANCE,new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.DOUBLE,Datas.STRING})).list(tid);
           for(Object[] obj:list){
             double debit=0,credit=0;
             if(obj[0].toString().equals("D"))
                debit=Double.parseDouble(obj[1].toString());
             else
                credit=Double.parseDouble(obj[1].toString());
              Date d1=new Date();
              d1.setTime(d.getTime());
              Calendar cal=Calendar.getInstance();
               cal.setTimeInMillis(d1.getTime());
               cal.set(Calendar.DATE, cal.getActualMaximum(Calendar.DATE));
               cal.set(Calendar.HOUR, 00);
               cal.set(Calendar.MINUTE, 00);
               cal.set(Calendar.SECOND, 00);
               cal.set(Calendar.MILLISECOND, 00);
               d1.setTime(cal.getTimeInMillis());
          Object[] value=new Object[]{debit,credit,obj[2],d1};
             dlfac.updateTrailBalance(value);
           }
           new PreparedSentence(m_App.getSession()
                , "DELETE FROM ACCOUNTJOURNALDUP WHERE TID=?"
                , SerializerWriteString.INSTANCE).exec(tid);
           new PreparedSentence(m_App.getSession()
                , "UPDATE ACCOUNTJOURNAL SET TRANSNO=?,ACTIVE=TRUE,DEACTREF=? WHERE TID=?"
                , new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING})).exec(new Object[]{transno,otid.toString(),tid});
           new PreparedSentence(m_App.getSession()
                , "UPDATE ACCOUNTJOURNAL SET ACTIVE=FALSE,DEACTBY=?,DEACTDATE=? WHERE TID=?"
                , new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.TIMESTAMP,Datas.STRING})).exec(new Object[]{user.getName(),new Date(),otid.toString()});
           List<Object[]> objList=new PreparedSentence(m_App.getSession(), "SELECT ACCOUNTID,AMOUNT,TRANSTYPE,DATE FROM ACCOUNTJOURNAL WHERE TID=?"
                                     , SerializerWriteString.INSTANCE,new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.DOUBLE,Datas.STRING,Datas.TIMESTAMP})).list(otid.toString());
           for(Object[] obj:objList){
               if(obj!=null){
                    Date d1=(Date)obj[3];
                    Calendar cal=Calendar.getInstance();
                    cal.setTimeInMillis(d1.getTime());
                    cal.set(Calendar.HOUR_OF_DAY, 00);
                    cal.set(Calendar.MINUTE, 00);
                    cal.set(Calendar.SECOND, 00);
                    cal.set(Calendar.MILLISECOND, 00);
                    cal.set(Calendar.DATE, cal.getActualMaximum(Calendar.DATE));
                    d1.setTime(cal.getTimeInMillis());
                    if(obj[2].toString().equals("C")){
                        new PreparedSentence(m_App.getSession(), "UPDATE AJPERIODTOTALS SET CURCREDIT=(CURCREDIT-?) where ACCOUNTID=? AND EDATE=? "
                                , new SerializerWriteBasic(new Datas[]{Datas.DOUBLE,Datas.STRING,Datas.TIMESTAMP})).exec(new Object[]{obj[1],obj[0],d1});
                        new PreparedSentence(m_App.getSession(), "UPDATE TRAILBALANCE SET CURCREDIT=(CURCREDIT-?) where ACCOUNTID=?  "
                                , new SerializerWriteBasic(new Datas[]{Datas.DOUBLE,Datas.STRING})).exec(new Object[]{obj[1],obj[0]});
                    }else{
                         new PreparedSentence(m_App.getSession(), "UPDATE AJPERIODTOTALS SET CURDEBIT=(CURDEBIT-?) where ACCOUNTID=? AND EDATE=? "
                                , new SerializerWriteBasic(new Datas[]{Datas.DOUBLE,Datas.STRING,Datas.TIMESTAMP})).exec(new Object[]{obj[1],obj[0],d1});
                         new PreparedSentence(m_App.getSession(), "UPDATE TRAILBALANCE SET CURDEBIT=(CURDEBIT-?) where ACCOUNTID=?  "
                                , new SerializerWriteBasic(new Datas[]{Datas.DOUBLE,Datas.STRING})).exec(new Object[]{obj[1],obj[0]});
                    }
               }
           }
         }
         dlfac.updateTransNumber(transref, d, Integer.parseInt(transno));
         }
         activate();
        }

        }
        catch(Exception e){
            new MessageInf(e).show(new JFrame());
          e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
          try{
        String reason=JOptionPane.showInputDialog(this, "Please enter reason for rejection", null, JOptionPane.OK_OPTION);
        if(reason!=null && reason.length()>0){
         int row= jTable1.getSelectedRow();
         GeneralSettingInfo gsininfo=LookupUtilityImpl.getInstance(null).getGeneralSettingsMap().get("Petty Cash Incharge");
         GeneralSettingInfo pcaccinfo=LookupUtilityImpl.getInstance(null).getGeneralSettingsMap().get("Petty Cash Account");
         int cnt=0;
         if(row>=0){
             String tid=accemodel.getTableModel().getValueAt(row, 4).toString();
             cnt= new PreparedSentence(m_App.getSession()
                , "UPDATE ACCOUNTJOURNALDUP SET ACTIVE=FALSE WHERE TID=? AND ACTIVE=TRUE"
                , SerializerWriteString.INSTANCE).exec(tid);
            if(cnt>0){
             if(gsininfo!=null && gsininfo.getValue()!=null && pcaccinfo!=null && pcaccinfo.getValue()!=null && m_App.getAppUserView().getUser().getId().equals(gsininfo.getValue())){
                  new PreparedSentence(m_App.getSession()
                , "UPDATE ACCOUNTEDITDETAIL SET MESSAGE=?,FLAG=TRUE WHERE TID=? AND (CONFIRMER=? OR CONFIRMER=? OR CONFIRMER=?)"
                , new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING})).exec(new Object[]{reason,tid,m_App.getAppUserView().getUser().getcashaccount(),m_App.getAppUserView().getUser().getchequeaccount(),pcaccinfo.getValue()});
             }else{


               new PreparedSentence(m_App.getSession()
                , "UPDATE ACCOUNTEDITDETAIL SET MESSAGE=?,FLAG=TRUE WHERE TID=? AND (CONFIRMER=? OR CONFIRMER=?)"
                , new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING})).exec(new Object[]{reason,tid,m_App.getAppUserView().getUser().getcashaccount(),m_App.getAppUserView().getUser().getchequeaccount()});
             }
             int count=(Integer)new StaticSentence(m_App.getSession()
                 , "SELECT COUNT(*) FROM ACCOUNTEDITDETAIL WHERE TID=? AND FLAG IS NULL",
                 SerializerWriteString.INSTANCE
                 ,SerializerReadInteger.INSTANCE).find(tid);
             if(count==0){
               new PreparedSentence(m_App.getSession()
                , "DELETE FROM ACCOUNTJOURNALDUP WHERE TID=?"
                , SerializerWriteString.INSTANCE).exec(tid);
             }
               activate();
            }
         }
        }
        }catch(Exception e){
            new MessageInf(e).show(new JFrame());
          e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
         try{
        int row= jTable2.getSelectedRow();
        if(row>=0){
            String tid=accemodel.getRejTableModel().getValueAt(row, 3).toString();
          AccEntryCongDetail accentry=AccEntryCongDetail.getDialog(this, m_App);
          accentry.showDialog(tid);
        }
        }
        catch(Exception e){
            new MessageInf(e).show(new JFrame());
          e.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try{
        int row=jTable2.getSelectedRow();
         if(row>=0){
            String id=accemodel.getRejTableModel().getValueAt(row, 4).toString();
            String tid=accemodel.getRejTableModel().getValueAt(row, 3).toString();
         new PreparedSentence(m_App.getSession()
                 , "UPDATE ACCOUNTEDITDETAIL SET FLAG=TRUE WHERE ID=? "
                 , SerializerWriteString.INSTANCE).exec(id);
         int count=(Integer)new StaticSentence(m_App.getSession()
                 , "SELECT COUNT(*) FROM ACCOUNTEDITDETAIL WHERE TID=? AND FLAG IS NULL",
                 SerializerWriteString.INSTANCE
                 ,SerializerReadInteger.INSTANCE).find(tid);
         if(count==0){
             new PreparedSentence(m_App.getSession()
                , "DELETE FROM ACCOUNTJOURNALDUP WHERE TID=?"
                , SerializerWriteString.INSTANCE).exec(tid);
             new PreparedSentence(m_App.getSession()
                , "DELETE FROM ACCOUNTEDITDETAIL WHERE TID=?"
                , SerializerWriteString.INSTANCE).exec(tid);
         }
          activate();
         }
        }catch(Exception e){
            new MessageInf(e).show(new JFrame());
          e.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

}
