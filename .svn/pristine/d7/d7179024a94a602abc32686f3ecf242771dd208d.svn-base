
package com.openbravo.pos.Booking;

import com.openbravo.basic.BasicException;
import com.openbravo.data.loader.DataRead;
import com.openbravo.data.loader.IKeyed;
import com.openbravo.data.loader.SerializableRead;
import com.openbravo.data.loader.SerializerReadClass;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.Session;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryDataSingle;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.AbstractTableModel;


public class GuestRoomService extends BeanFactoryDataSingle {
    private Session s;
    private int GrLength;
    private static List<GuestRoomService.BillInfo> data;
    private static List<GuestRoomService.BillInfo> data1;
    private final static String[] TABLEHEADERS = {"Bill No" , "Counter" , "Amount"  };
    
    
    
    
    
    
    
    // CUSTOMER ID THROUGH BOOKED ROOM
     public String getCustomerID(AppView app , String s){
         
         Object CustID = new Object();
         
         try {
            CustID  =  new StaticSentence(app.getSession(), "SELECT ID FROM customers WHERE NAME=?", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find(s);
           
         } catch (BasicException ex) {
            Logger.getLogger(BookedHallStatusTableModel.class.getName()).log(Level.SEVERE, null, ex);
        }
         return CustID.toString();
       }  
    
     
     
     
     // CHECK WHETHER CUSTOMER HAVE SHREADTICKETS
      public Object getShreadTickets(AppView app , String CustID){
         
         Object Shd_ID = new Object();
         
         try {
            Shd_ID  =  new StaticSentence(app.getSession(), "SELECT S.ID FROM sharedtickets S WHERE S.NAME = (SELECT C.SEARCHKEY FROM CUSTOMER C WHERE C.ID = ?)", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find(CustID);
           
         } catch (BasicException ex) {
            Logger.getLogger(BookedHallStatusTableModel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return Shd_ID;
       }  
     
     
     
      //CALCULATE TOTAL BILL AMOUNT THROUGH ROOM NOS.
      
      public Double getTotalBillAmt(AppView app , String CustID){
         
         Object BL_AMT = new Object();
         Double d = 0.00; 
         try {
            BL_AMT  =  new StaticSentence(app.getSession(), "SELECT SUM(AMOUNT)+SUM(TAXTOTAL) FROM bill where customer = (SELECT ID FROM CUSTOMERS WHERE NAME=?)", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find(CustID);
           
         } catch (BasicException ex) {
            Logger.getLogger(BookedHallStatusTableModel.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(BL_AMT!=null){
            d = Double.parseDouble(BL_AMT.toString());
            return d;
        }
        else{
            return d;
        }
     }  
      
      
      // GET GUEST ROOM LINKED CUSTOMER NAME
       public String getCust_link_name(AppView app , String link_N ){
         
         Object o = new Object();
         
         try {
            o  =  new StaticSentence(app.getSession(), " SELECT CUSTOMER_N FROM guestroom_link WHERE ROOMNO=?  AND ACTIVE=1", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find(link_N);
           
         } catch (BasicException ex) {
            Logger.getLogger(BookedHallStatusTableModel.class.getName()).log(Level.SEVERE, null, ex);
        }
         if(o!=null){
             return o.toString();
         }
         else{
             return null;
         }
       }  
      
    
      
      
       public static GuestRoomService load_Curr_Bills(AppView app , String c) throws BasicException{
        GuestRoomService GuestInfo = new GuestRoomService(); 
         GuestRoomService GuestInfo1 = new GuestRoomService();
          GuestInfo1.data1 = new ArrayList<GuestRoomService.BillInfo>();
         
        
                    try{
                       
                        
                        GuestInfo.data = new StaticSentence(app.getSession(), "SELECT B.ID , (SELECT L.RDISPLAYNAME   FROM LOCATIONS l WHERE B.WAREHOUSE= L.ID) , AMOUNT+TAXTOTAL  FROM BILL B WHERE CUSTOMER in (SELECT C.ID FROM CUSTOMERS C WHERE  C.NAME =? )  ", SerializerWriteString.INSTANCE, new SerializerReadClass(GuestRoomService.BillInfo.class)).list(c);
                        GuestInfo.GrLength = GuestInfo.data.size();
                        
                        }
                             catch(BasicException ex){
                               Logger.getLogger(GuestRoomService.class.getName()).log(Level.SEVERE, null, ex);
                             } 
              
       return GuestInfo;
     }
   
       public List<GuestRoomService.BillInfo> getBillInfo_Path()
    {
        if(data!=null)
        {
            return data;
        }
        else
            return new ArrayList<GuestRoomService.BillInfo>();
    } 
      
      
       public static class BillInfo implements SerializableRead,IKeyed {
         
           String ID;
           String PLACE;
           Double AMOUNT;
           
           
           public String getID(){
               return ID;
           }
           public void setID(String ID){
               this.ID = ID;
           }
           public String getPLACE(){
               return PLACE;
           }
           public void setPLACE(String PLACE){
               this.PLACE = PLACE;
           }
           public Double getAMOUNT(){
               return AMOUNT;
           }
           public void setAMOUNT(Double AMOUNT){
               this.AMOUNT = AMOUNT;
           }
           
        public void readValues(DataRead dr) throws BasicException {
            ID = dr.getString(1);
            PLACE = dr.getString(2);
            AMOUNT = dr.getDouble(3);
            
        }

        
        
        public Object getKey() {
           return this;
        }
           
       }
    
    
    @Override
    public void init(Session s) {
       this.s=s;
    }
    
    
    
    //LOADING DATA FOR DISPLAYING TABLE
      public  AbstractTableModel getTableModel()
      {
        return new AbstractTableModel(){
          int i=2,j=0;
          
          public int getRowCount() {
                return data.size();
            }
          public int getColumnCount() {
                return TABLEHEADERS.length;
            }
          
          @Override
          public String getColumnName(int column) {
                return TABLEHEADERS[column];
            }

          Class[] types = new Class[]{
               java.lang.String.class , java.lang.String.class, java.lang.Double.class, 
            };
          boolean[] canEdit = new boolean[]{
                false, false, false
            };
           @Override
            public void setValueAt(Object aValue, int row, int column) {
            }
           
           public Object getValueAt(int rowIndex, int columnIndex) {
              GuestRoomService.BillInfo r =data.get(rowIndex);
              
                
               switch(columnIndex){
                   
                   case 0: return r.getID();
                   case 1: return r.getPLACE();
                   case 2: return r.getAMOUNT();
                  
               }
                return null;
            }
          };
        } 
    
    
    
}
