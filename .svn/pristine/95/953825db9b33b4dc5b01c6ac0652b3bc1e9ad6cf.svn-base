/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MinimumUsageBilling.java
 *
 * Created on 16-Jul-2011, 13:09:04
 */

package com.openbravo.pos.Accounts;

import com.openbravo.basic.BasicException;
import com.openbravo.beans.JCalendarDialog;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.PreparedSentence;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.data.loader.Transaction;
import com.openbravo.format.Formats;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.clubmang.DataSourceProvider;
import com.openbravo.pos.clubmang.DebtTypeTableModel;
import com.openbravo.pos.clubmang.FacilityLogic;
import com.openbravo.pos.clubmang.JRBasicField;
import com.openbravo.pos.clubmang.Minusage;
import com.openbravo.pos.clubmang.Periodicity;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.DataLogicSales;
import com.openbravo.pos.forms.JPanelView;
import com.openbravo.pos.inventory.TaxCategoryInfo;
import com.openbravo.pos.sales.TaxesLogic;
import com.openbravo.pos.ticket.TaxInfo;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import javax.swing.AbstractListModel;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRField;
import net.sf.jasperreports.engine.JasperPrint;
import com.openbravo.pos.clubmang.JasperReportNew;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

/**
 *
 * @author swathi
 */
public class MinimumUsageBilling extends javax.swing.JPanel implements JPanelView,BeanFactoryApp {
    private AppView m_App;
   
    private ComboBoxValModel minusagetypemodel;    
    private DataLogicFacilities dfac;
    private MinUsageDataModel mmodel1;    
    private DataLogicSales m_dlSales;
    private Date dnow;
    private Date billingDate; 
    private String billnum;
    private String period;
    private String name;    
    private TaxesLogic taxeslogic;
    private Double totalsum = 0.0;
    private Double taxrate1 = 0.0;
    private Double taxtotal = 0.0;
    private Double rate = 0.0;
    private Double tax = 0.0;
    
    private boolean billed = false;
    Map chargableCustomers = new HashMap();
    List<MinUsageCustomer> custAll = new ArrayList<MinUsageCustomer>();
    String showBillNos = "";

    /** Creates new form MinimumUsageBilling */
    public MinimumUsageBilling() {
        initComponents();
    }
    public double getTotal() {
        return totalsum;
    }

    public double getTaxtotal() {
        return taxtotal;
    }

    public String getBillNo() {
        return billnum;
    }

    public String getPeriod() {
        return period;
    }

    public void setTaxtotal(Double taxtotal) {
        this.taxtotal = taxtotal;
    }

    public void setTotalsum(Double totalsum) {
        this.totalsum = totalsum;
    }

    public String getName1() {
        return name;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox3 = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton13 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        date = new javax.swing.JButton();

        setLayout(null);

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox3.setName("jComboBox3"); // NOI18N
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        add(jComboBox3);
        jComboBox3.setBounds(170, 60, 150, 20);

        jLabel16.setText("Minimum Usage Type");
        jLabel16.setName("jLabel16"); // NOI18N
        add(jLabel16);
        jLabel16.setBounds(40, 60, 120, 20);

        jTextField12.setName("jTextField12"); // NOI18N
        add(jTextField12);
        jTextField12.setBounds(540, 60, 130, 20);

        jLabel30.setText("Period");
        jLabel30.setName("jLabel30"); // NOI18N
        add(jLabel30);
        jLabel30.setBounds(460, 60, 100, 20);

        jLabel17.setText("UpTo Date");
        jLabel17.setName("jLabel17"); // NOI18N
        add(jLabel17);
        jLabel17.setBounds(460, 90, 80, 20);

        jTextField4.setName("jTextField4"); // NOI18N
        add(jTextField4);
        jTextField4.setBounds(540, 90, 130, 20);

        jTextField5.setName("jTextField5"); // NOI18N
        add(jTextField5);
        jTextField5.setBounds(170, 90, 180, 20);

        jLabel18.setText("Date");
        jLabel18.setName("jLabel18"); // NOI18N
        add(jLabel18);
        jLabel18.setBounds(40, 90, 60, 20);

        jLabel23.setText("Bill No");
        jLabel23.setName("jLabel23"); // NOI18N
        add(jLabel23);
        jLabel23.setBounds(460, 120, 100, 20);

        jTextField7.setName("jTextField7"); // NOI18N
        add(jTextField7);
        jTextField7.setBounds(540, 120, 130, 20);

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane4.setViewportView(jTable1);

        add(jScrollPane4);
        jScrollPane4.setBounds(30, 170, 680, 260);

        jButton13.setText("Test Print");
        jButton13.setName("jButton13"); // NOI18N
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        add(jButton13);
        jButton13.setBounds(620, 440, 90, 30);

        jButton1.setText("Generate");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(420, 440, 90, 30);

        jButton2.setText("Bill");
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(520, 440, 90, 30);

        date.setText("Date");
        date.setName("date"); // NOI18N
        date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateActionPerformed(evt);
            }
        });
        add(date);
        date.setBounds(360, 90, 60, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
        if (jComboBox3.getSelectedItem() != null) {
            Minusage pid = (Minusage) jComboBox3.getSelectedItem();
            String id = pid.getPeriod();
            Periodicity p;
            try {
                p = dfac.getPerioicitybyid(id);
                jTextField12.setText(p.getName());
                jTextField12.setVisible(true);
                jLabel30.setVisible(true);
                period = p.getName();
            } catch (BasicException ex) {
                ex.printStackTrace();
            }


        }
}//GEN-LAST:event_jComboBox3ActionPerformed

    private JRField[] getFields() throws JRException, UnsupportedOperationException {
        JRField[] fields = new JRField[4];
        fields[0] = (JRField) new JRBasicField("Mem No", "memno", java.lang.String.class, "java.lang.String");
        fields[1] = (JRField) new JRBasicField("Mem Name", "mname", java.lang.String.class, "java.lang.String");
        fields[2] = (JRField) new JRBasicField("Amount", "amount", java.lang.Double.class, "java.lang.Double");
        fields[3] = (JRField) new JRBasicField("Charge", "Charge", java.lang.Double.class, "java.lang.Double");
        fields[2] = (JRField) new JRBasicField("showUsage", "showUsage", java.lang.String.class, "java.lang.String");
        fields[2] = (JRField) new JRBasicField("showCharge", "showCharge", java.lang.String.class, "java.lang.String");

        return fields;
    }



    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        try {
            Minusage usage = (Minusage) jComboBox3.getSelectedItem();
            Map reportparams = new HashMap();
            reportparams.put("companyName",m_App.getSession().getCompanyName());
            reportparams.put("companyAddress",m_App.getSession().getCompanyAddress());
            reportparams.put("UsageType", this.getName1());
            reportparams.put("Rate", this.rate);
            reportparams.put("Period", this.getPeriod());
            reportparams.put("billnum", this.getBillNo());
            reportparams.put("billedby", m_App.getAppUserView().getUser().getName());
            reportparams.put("tax", this.tax);
            reportparams.put("taxvalue", this.getTaxtotal());
            reportparams.put("totalrate", this.getTotal());
            DataSourceProvider data1 = new DataSourceProvider(mmodel1.getMinUsageCustomer());
            data1.setFields(getFields());
            DataSource4 ds = new DataSource4(mmodel1.getMinUsageCustomer());
            data1.setDataSource(ds);
            //JasperPrint jp= JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/MinUse.jrxml",reportparams,true,data1,false,null);
            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/MinUse.jrxml", reportparams, false, data1, true, null);            
        } catch (Exception e) {
            e.printStackTrace();
        }
}//GEN-LAST:event_jButton13ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:        
        try{
            newMinUsageLogic();
        }catch(Exception e){
            e.printStackTrace();
        }
   
    }//GEN-LAST:event_jButton1ActionPerformed



    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        newBillLogic();        
}//GEN-LAST:event_jButton2ActionPerformed

    private void dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateActionPerformed
        // TODO add your handling code here:
        Date date;

        try {
            date = (Date) Formats.DATE.parseValue(jTextField5.getText());
        } catch (BasicException ex) {
            date = null;
        }
        date = JCalendarDialog.showCalendar(this, date);
        if (date != null) {
            Date date1 = new Date();
            Calendar cal = Calendar.getInstance();
            cal.setTimeInMillis(date1.getTime());
            cal.set(Calendar.HOUR,00);
            cal.set(Calendar.HOUR_OF_DAY,00);
            cal.set(Calendar.MINUTE,00);
            cal.set(Calendar.SECOND,00);
            cal.set(Calendar.MILLISECOND,00);
            cal.set(Calendar.DATE, cal.getActualMinimum(Calendar.DATE));
            cal.add(Calendar.DATE,-1);
            cal.set(Calendar.HOUR,23);
            cal.set(Calendar.MINUTE,50);
            cal.set(Calendar.SECOND,59);
            date1.setTime(cal.getTimeInMillis());
            jTextField5.setText(Formats.TIMESTAMP.formatValue(date1));
            dnow = date1;
        }
}//GEN-LAST:event_dateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton date;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables

    public String getTitle() {
        return "Minimum Usage Billing";
    }

    public void activate() throws BasicException {
        //jList2.setVisible(false);
        //jButton7.setVisible(false);
        jLabel30.setVisible(false);
        jTextField12.setVisible(false);
        jTextField4.setVisible(false);
        jLabel17.setVisible(false);
       // jButton11.setVisible(false);
        jTextField7.setVisible(false);
        jLabel23.setVisible(false);
        taxeslogic = new TaxesLogic(m_dlSales.getTaxList().list());
//        dnow = new Date();
//        Calendar cal = Calendar.getInstance();
//        cal.setTimeInMillis(dnow.getTime());
//        cal.set(Calendar.HOUR_OF_DAY, 00);
//        cal.set(Calendar.MINUTE, 00);
//        cal.set(Calendar.SECOND, 00);
//        cal.set(Calendar.MILLISECOND, 00);
//        dnow.setTime(cal.getTimeInMillis());
        loadData();
        jButton13.setEnabled(false);
        
    }

    public boolean deactivate() {
        return  true;
    }

    public JComponent getComponent() {
        return this;
    }

    public void init(AppView app) throws BeanFactoryException {
        m_App = app;
        dfac = (DataLogicFacilities) app.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");
        m_dlSales = (DataLogicSales) m_App.getBean("com.openbravo.pos.forms.DataLogicSalesCreate");
    }

    public Object getBean() {
        return this;
    }
    public void loadData() throws BasicException {        
        List mlist3 = dfac.getMinUsage();
        minusagetypemodel = new ComboBoxValModel(mlist3);
        jComboBox3.setModel(minusagetypemodel);     
       jTextField5.setText(null);
       jTextField5.setEnabled(false);
       
    }
    private class FacilityTypeListModel extends AbstractListModel {

        private java.util.List facilitiesmodel;

        public FacilityTypeListModel(java.util.List facilitiesmodel) {
            this.facilitiesmodel = facilitiesmodel;
        }

        public int getSize() {
            return facilitiesmodel.size();
        }

        public Object getElementAt(int i) {
            return facilitiesmodel.get(i);
        }

        public void remove(int i) {
            facilitiesmodel.remove(i);
        }
    }

    private class MemTypeListModel extends AbstractListModel {

        private java.util.List memtype;

        public MemTypeListModel(java.util.List memtype) {
            this.memtype = memtype;
        }

        public int getSize() {
            return memtype.size();
        }

        public Object getElementAt(int i) {
            return memtype.get(i);
        }

        public void remove(int i) {
            memtype.remove(i);
        }
    }
    public void reset() throws BasicException{       
        List mlist3 = dfac.getMinUsage();
        minusagetypemodel = new ComboBoxValModel(mlist3);
        jComboBox3.setModel(minusagetypemodel);         
        jTextField5.setText(null);
    }

    public void showDialog(MinUsageDataModel mmodel1, AppView m_App) {

        this.m_App = m_App;
        jScrollPane4.setAutoscrolls(true);
        /*if(rflist.size()>1)
        jTable1.setAutoResizeMode(jTable1.AUTO_RESIZE_OFF);
        else
        jTable1.setAutoResizeMode(jTable1.AUTO_RESIZE_SUBSEQUENT_COLUMNS);*/
        jTable1.setModel(mmodel1.getUsageModel());
        this.mmodel1 = mmodel1;
        int columncnt = jTable1.getColumnModel().getColumnCount();
        if (columncnt > 0) {
            jTable1.getColumnModel().getColumn(0).setMaxWidth(150);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(150);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(150);
            for (int k = 2; k < columncnt; k++) {
                if ((k - 2) % 3 == 0) {
                    jTable1.getColumnModel().getColumn(k).setMaxWidth(150);
                    jTable1.getColumnModel().getColumn(k).setPreferredWidth(150);
                //jTable1.setAutoResizeMode(jTable1.AUTO_RESIZE_OFF);
                } else if ((k - 2) % 3 == 1) {
                    jTable1.getColumnModel().getColumn(k).setMaxWidth(150);
                    jTable1.getColumnModel().getColumn(k).setPreferredWidth(150);
                //jTable1.setAutoResizeMode(jTable1.AUTO_RESIZE_ALL_COLUMNS);
                } else if ((k - 2) % 3 == 2) {
                    jTable1.getColumnModel().getColumn(k).setMaxWidth(150);
                    jTable1.getColumnModel().getColumn(k).setPreferredWidth(150);
                // jTable1.setAutoResizeMode(jTable1.AUTO_RESIZE_OFF);
                }
            }
        }
        setVisible(true);
    }

    private void manageButtons(boolean value) {
        jButton1.setEnabled(value);
        jButton2.setEnabled(value);
    }


    public void newMinUsageLogic() {
        try {

            Minusage usage = (Minusage) jComboBox3.getSelectedItem();
            FacilityLogic flogic = new FacilityLogic();
            Date edate = usage.getLastbilleddate();

            String id = usage.getPeriod();
            Periodicity p1;
            p1 = dfac.getPerioicitybyid(id);
            Date sdate = flogic.calculateStartDate1(p1, edate);
            edate = flogic.calculateEndDate2(sdate, p1);
            DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
            String dateOnly = "";
            String enddate = df.format(usage.getLastbilleddate());
            Map lastBillPeriodsMap = new HashMap();

            if(jTextField5.getText().length()>0){
            if (edate.compareTo(dnow) < 0) {
                MinUsageLogic mulogic = new MinUsageLogic();
                String uid = usage.getid();
                double limit = usage.getAmount();
                double charge = usage.getCharge();
                String mutype = usage.getMinusagetype();
                double camt, camtTotal, limitTotal, usageTotal;
                String usageDisplay;
                String limitDisplay;
                String chargeDisplay;
                List<BillPeriods> bperiods;

                 Date lbilledDate = usage.getLastbilleddate();
                // List<BillPeriods> bperiods = mulogic.findBillPeriods(p1, lbilledDate);





                List<LastBillDate> lbillDates = dfac.getLastBillDates(usage.getid());
                //System.out.println(usage.getid());
                for (LastBillDate lbillDate : lbillDates) {
                    System.out.println(lbillDate);
                    bperiods = mulogic.findBillPeriods(p1, lbillDate.getDate());
                    dateOnly = df.format(lbillDate.getDate());
                    //lastBillPeriodsMap.put(lbillDate.getDate(), bperiods);
                    //chargableCustomers.put(lbillDate.getDate(), new ArrayList<MinUsageCustomer>());
                    lastBillPeriodsMap.put(dateOnly, bperiods);
                    chargableCustomers.put(dateOnly, new ArrayList<MinUsageCustomer>());
                }
                List<MinUsageCustomer> muCustomers = dfac.getMinusageCustomers(usage.getid());
                List<MinUsageCustomer> temp = new ArrayList<MinUsageCustomer>();
                int c = 0;

                for (MinUsageCustomer cust : muCustomers) {
                    c=c+1;

                    System.out.println(c);
                    System.out.println(cust.getName()+"-----"+cust.getSearchkey());

                    String cid = cust.getCid();
                    String custLBillDate = df.format(cust.getLastBillDate());

                    bperiods = (ArrayList<BillPeriods>) lastBillPeriodsMap.get(custLBillDate);
                    List<BillPeriods> tempBp = new ArrayList<BillPeriods>();
                    Date ed = cust.getEnddate();
                    String newMinUsageRef = cust.getNewMinUsageRef();

                    if (ed != null) {
                        if (newMinUsageRef != null) {
                            for (BillPeriods bp2 : bperiods) {
                                if (ed.after(bp2.getStartDate()) && ed.after(bp2.getEndDate())) {
                                    tempBp.add(bp2);
                                } else {
                                    break;
                                }
                            }
                        } else {
                            for (BillPeriods bp2 : bperiods) {
                                if (bp2.getStartDate().before(ed)) {
                                    tempBp.add(bp2);
                                } else {
                                    break;
                                }
                            }
                        }
                        bperiods = tempBp;
                        cust.setDeactivate(true);
                    }
                    camtTotal = 0.0;
                    limitTotal = 0.0;
                    usageTotal = 0.0;
                    usageDisplay = "";
                    limitDisplay = "";
                    chargeDisplay = "";

                    for (BillPeriods bp : bperiods) {

                        camt = 0.0;

                        double custUsage = dfac.getCustomerUsage(cid, bp.getStartDate(), bp.getEndDate(),cust.getFacilities());

                        if (mutype.equals("1")) {
                            if (custUsage >= limit) {
                                camt = 0.0;
                            } else if (custUsage < limit) {
                                camt = charge;
                            }
                        } else if (mutype.equals("2")) {
                            if (custUsage >= limit) {
                                camt = 0.0;
                            } else if (custUsage < limit) {
                                double a2 = limit - custUsage;
                                if (a2 >= charge) {
                                    camt = charge;
                                } else if (a2 < charge) {
                                    camt = a2;
                                }
                            }

                        } else if (mutype.equals("3")) {
                            if (custUsage >= limit) {
                                camt = 0.0;
                            } else if (custUsage < limit) {
                                double a13 = limit / 3;
                                double a23 = a13 * 2;
                                if (custUsage < a13) {
                                    camt = charge;
                                } else if (custUsage >= a13 && custUsage < a23) {
                                    camt = (charge / 3) * 2;
                                } else if (custUsage >= a23 && custUsage < limit) {
                                    camt = charge / 3;
                                }
                            }

                        }
                        camtTotal += camt;
                        limitTotal += limit;
                        usageTotal += custUsage;

                        if (!"".equals(usageDisplay)) {
                            usageDisplay += " / ";
                        }
                        usageDisplay += custUsage;

                        if (!"".equals(limitDisplay)) {
                            limitDisplay += " / ";
                        }
                        limitDisplay += limit;

                        if (!"".equals(chargeDisplay)) {
                            chargeDisplay += " / ";
                        }
                        chargeDisplay += camt;

                    }

                    cust.setCamtTotal(dfac.roundTwoDecimals(camtTotal));
                    cust.setLimitTotal(dfac.roundTwoDecimals(limitTotal));
                    cust.setUsageDisplay(usageDisplay);
                    cust.setLimitDisplay(limitDisplay);
                    cust.setChargeDisplay(chargeDisplay);
                    cust.setUsageTotal(dfac.roundTwoDecimals(usageTotal));




                   if(bperiods.size()>=1){
                    cust.setBillDate(bperiods.get(bperiods.size() - 1).getEndDate());
                   }
                   else{
                        System.out.print("for this member"+cust.getSearchkey());
                        cust.setBillDate(cust.getLastBillDate());
                        //cust.setBillDate(bperiods.get(bperiods.size() - 1).getEndDate());
                   }


                    if (camtTotal > 0) {
                        cust.setNarration("Minimum usage charge for period : " + bperiods.get(0).getStartDate().toString() + "To" + bperiods.get(bperiods.size() - 1).getEndDate().toString() + ":" + cust.getSearchkey());

                        //System.out.println(c);
                        // c++;
                        temp = (List<MinUsageCustomer>) chargableCustomers.get(custLBillDate);
                        temp.add(cust);
                        chargableCustomers.put(custLBillDate, temp);

                    }
                    custAll.add(cust);

                }
                bperiods = (ArrayList<BillPeriods>) lastBillPeriodsMap.get(enddate);
                billingDate = bperiods.get(bperiods.size() - 1).getEndDate();
                jTextField4.setText(Formats.TIMESTAMP.formatValue(billingDate));
                jTextField4.setVisible(true);
                jLabel17.setVisible(true);
                mmodel1 = MinUsageDataModel.loadData(m_App, custAll);
                showDialog(mmodel1, m_App);
            } else {
                JOptionPane.showMessageDialog(this, "Already billed", null, JOptionPane.OK_OPTION);
            }
            }else{
                  JOptionPane.showMessageDialog(this, "Select Date", null, JOptionPane.OK_OPTION);
            }
        } catch (Exception e) {
            e.printStackTrace();

        }
        manageButtons(true);

    }
    private void createbill(MinUsageCustomer cust, String billno, Minusage mintemp, String tid, DebtTypeTableModel.DebtTypeline dueperiod, TaxInfo taxinfo) throws BasicException {
        //  Date d=new Date();
        Object mobile = cust.getMobile();
        String customeraccount = cust.getAccount();
        String user = cust.getName();
        String memid = cust.getCid();
        Date bdate = cust.getBillDate();
        String narration = cust.getNarration();
        Timestamp bt = new Timestamp(bdate.getTime());
        FacilityLogic fl = new FacilityLogic();
        Date duedate = fl.getDueDate(dueperiod, bt);
        Double camount = cust.getCamtTotal();
        rate = dfac.roundTwoDecimals(camount);
        totalsum += camount;
        tax = taxinfo.getRate();
         taxrate1 = tax * rate;
        //////////////////////////////////////shiv
          Object[] obj = (Object[]) new StaticSentence(m_App.getSession(), "SELECT RATEROUNDOFF FROM TAXES WHERE ID=?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(taxinfo.getId());
               if(obj[0].equals("yes")){
              // Double t=tax*100;
              // Object f= new Float(Math.round(t));
              // String st= f.toString();
              // Double t2 = new Double(st);
              // Double t1=t2/100;
              // tax=t1;
                   Object f= new Float(Math.round(taxrate1));
                   String st= f.toString();
                   taxrate1=new Double(st);
          }else if(obj[0].equals("yesnearest")){
              Object f= new Float(Math.round(taxrate1));
                   String st= f.toString();
                   taxrate1=new Double(st);
       
              
           }else if(obj[0].equals("yesnext")){
              Object f= new Float(Math.round(taxrate1+1));
                   String st= f.toString();
                   taxrate1=new Double(st);

                   
           }else if(obj[0].equals("yesprevious")){
             Object f= new Float(Math.round(taxrate1-1));
                   String st= f.toString();
                   taxrate1=new Double(st);

            }
                             else{
                                 }
        //////////////////////////////////////shiv
         
          taxtotal += taxrate1;
        camount = camount + taxrate1;
        Object[] value = new Object[]{UUID.randomUUID().toString(), tid, memid,dnow, "D", mintemp.getName(), billno, camount, duedate, false, m_App.getAppUserView().getUser().getName(), m_App.getProperties().getHost(), narration, customeraccount, camount, true};
        dfac.insertintoaccjoutnal(value);

        String smsmsg = "Dear Member,\rYour a/c with us has been debited by Rs " + dfac.ConvertDoubleToString(camount) + " for " + mintemp.getName() + " on " + Formats.DATE.formatValue(duedate) + " bill no " + billno + ".Thank u";
        if (mobile != null && mobile.toString().trim().length() == 10) {
            dfac.updatetosendMsg(smsmsg, memid, mobile.toString(), 2);
        }
        if(cust.isDeactivate())
        {
        Object[] value1 = new Object[]{memid,mintemp.getid()};
        new PreparedSentence(m_App.getSession(), "UPDATE MEMMINUSAGE SET ACTIVE='FALSE' WHERE MEMNO=? AND USAGETYPE=?", new SerializerWriteBasic(new Datas[]{ Datas.STRING, Datas.STRING})).exec(value1);
        }

    }

    public void newBillLogic() {
        if (billed == false) {
            if (chargableCustomers.size() > 0 && JOptionPane.showConfirmDialog(this, "Do u want to bill ", null, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                manageButtons(false);
                try {
                    Transaction t = new Transaction(m_App.getSession()) {

                        @Override
                        protected Object transact() throws BasicException {

                            String servicetaxacc = null;
                            Object stacc = new StaticSentence(m_App.getSession(), "SELECT VALUE FROM GENERALTABLE WHERE NAME = ? ", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find("Service Tax Account");
                            if (stacc != null) {
                                servicetaxacc = stacc.toString();
                            }

                            if (servicetaxacc == null) {
                                JOptionPane.showMessageDialog(null, "Please Create a service tax account", null, JOptionPane.OK_OPTION);
                            } else {


                                Minusage mintemp = new Minusage();

                                mintemp = (Minusage) jComboBox3.getSelectedItem();
                                name = mintemp.getName();
                                DebtTypeTableModel.DebtTypeline dueperiod = dfac.getDebtTypebyid(mintemp.getCreditperiod());
                                TaxCategoryInfo tinfo = (TaxCategoryInfo) m_dlSales.getTaxCategoryByid(mintemp.getServiceTax());
                                TaxInfo taxinfo = taxeslogic.getTaxInfo(tinfo);
                                totalsum = 0.0;
                                for (Object key : chargableCustomers.keySet()) {

                                    List<MinUsageCustomer> mucustomers = (ArrayList<MinUsageCustomer>) chargableCustomers.get(key);
                                    if (mucustomers.size() > 0) {


                                        String tid = UUID.randomUUID().toString();
                                        setTaxtotal(0.0);
                                        setTotalsum(0.0);

                                        String billno = dfac.getnewbillno1(mintemp.getid());
                                        if (!billno.equals("")) {
                                            if (!"".equals(showBillNos)) {
                                                showBillNos += " / ";
                                            }
                                            showBillNos += billno;
                                            jTextField7.setText(showBillNos);
                                            jTextField7.setVisible(true);
                                            jLabel23.setVisible(true);

                                            billnum = billno;

                                            for (MinUsageCustomer cust : mucustomers) {
                                                boolean selected = (Boolean) cust.getBillit();
                                                String amt = cust.getCamtTotal().toString();
                                                if (selected == true && !amt.equals("0.0")) {


                                                    createbill(cust, billno, mintemp, tid, dueperiod, taxinfo);
                                                //System.out.println(count++);
                                                }
                                            }

                                            dfac.updatebillno1(mintemp.getid());


                                            //ID,TID,DATE,TRANSTYPE,TRANSREF,TRANSNO,AMOUNT,DUEDATE,ADJUSTED,CREATEDBY,COUNTER,NARRATION,ACCOUNTID,BALANCEAMOUNT,CLEARDATE
                                            Object[] value1 = new Object[]{UUID.randomUUID().toString(), tid, dnow, "C", mintemp.getName(), billno, getTotal(), dnow, true, m_App.getAppUserView().getUser().getName(), m_App.getProperties().getHost(), mintemp.getName() + " on " + Formats.DATE.formatValue(dnow), mintemp.getAcchead(), 0.0, dnow, true};
                                            dfac.insertintoaccjoutnal1(value1);

                                            if (getTaxtotal() > 0) {
                                                Double sum1 = dfac.roundTwoDecimals(getTaxtotal());
                                                Object[] value2 = new Object[]{UUID.randomUUID().toString(), tid, dnow, "C", mintemp.getName(), billno, sum1, dnow, true, m_App.getAppUserView().getUser().getName(), m_App.getProperties().getHost(), "Service tax for bill number " + billno, servicetaxacc, 0.0, dnow, true};
                                                dfac.insertintoaccjoutnal1(value2);
                                            }

                                        } else {
                                            JOptionPane.showMessageDialog(null, "Define a bill sequence", "Create bill", JOptionPane.OK_OPTION);
                                        }
                                    }
                                }
                                for (MinUsageCustomer mucust : custAll) {
                                    dfac.updateLastBilledDateOfMember(mucust.getBillDate(), mucust.getCid(), mintemp.getid());
                                }
                                dfac.updateLastBilledDate(billingDate, mintemp.getid());

                                jButton13.setEnabled(true);
                                manageButtons(true);
                            // int count = 0;

                            }

                            return null;
                        }
                    };
                    t.execute();

                } catch (BasicException ex) {
                    ex.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Already billed. Please generate if u want to bill again");
        }
    }

}
