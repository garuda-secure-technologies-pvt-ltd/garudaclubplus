/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PurchaseIndent.java
 *
 * Created on 08-Oct-2011, 20:22:15
 */
package com.openbravo.pos.inventory;

import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerWriteInteger;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.data.loader.Transaction;
import com.openbravo.format.Formats;
import com.openbravo.pos.catalog.CatalogSelector;
import com.openbravo.pos.catalog.JCatalog;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.clubmang.DataSourceProvider;
import com.openbravo.pos.clubmang.JasperReportNew;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.DataLogicSales;
import com.openbravo.pos.forms.JPanelView;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import javax.swing.JComponent;
import javax.swing.table.TableColumnModel;
import com.openbravo.pos.inventory.PurchaseIndentModel.MyAbstractTableModel;
import com.openbravo.pos.ticket.CategoryInfo;
import com.openbravo.pos.ticket.ProductInfoExt;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import net.sf.jasperreports.engine.JasperPrint;

/**
 *
 * @author swathi
 */
public class PurchaseIndent extends javax.swing.JPanel implements JPanelView, BeanFactoryApp {

    private AppView m_App;
    private DataLogicFacilities dlfac;
    private PurchaseIndentModel pumodel;
    private MyAbstractTableModel tablemodel;
    private AbstractTableModel tablemodel1;
    private ComboBoxValModel vendormodel;
    List<PurchaseIndentModel.PurchaseIndentLine> listold;
    PurchaseIndentModel.PurchaseIndentLine1 pl;
    private CatalogSelector m_cat;
    private DataLogicSales m_dlSales;
    private Component component;
    private ComboBoxValModel cModel;
    private JComboBox comboBox;
    boolean flag = true;

    /** Creates new form PurchaseIndent */
    public PurchaseIndent() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 =  new javax.swing.JTable(){public Component prepareRenderer(TableCellRenderer renderer,
            int rowIndex, int vColIndex) {
            Component c = super.prepareRenderer(renderer, rowIndex, vColIndex);
            if (c instanceof JComponent) {
                JComponent jc = (JComponent)c;
                jc.setToolTipText(String.valueOf(getValueAt(rowIndex, vColIndex)));

                if (rowIndex % 2 == 0 && !isCellSelected(rowIndex, vColIndex)) {
                    jc.setBackground(Color.cyan);
                }
                else {
                    jc.setBackground(Color.white);
                }
                if(isCellSelected(rowIndex, vColIndex))
                jc.setBackground(Color.lightGray);
            }
            return c;
        }};
        next = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        date = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        warehouse = new javax.swing.JComboBox();
        back = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        load = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        pino = new javax.swing.JTextField();
        jNumberKeys1 = new com.openbravo.beans.JNumberKeys();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        next.setText("Next");
        next.setName("next"); // NOI18N
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        jLabel1.setText("Date:");
        jLabel1.setName("jLabel1"); // NOI18N

        date.setName("date"); // NOI18N

        save.setText("Save and Print");
        save.setName("save"); // NOI18N
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new java.awt.BorderLayout());

        warehouse.setName("warehouse"); // NOI18N
        warehouse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                warehouseItemStateChanged(evt);
            }
        });

        back.setText("Back");
        back.setName("back"); // NOI18N
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        jLabel3.setText("Warehouse");
        jLabel3.setName("jLabel3"); // NOI18N

        load.setText("Load");
        load.setName("load"); // NOI18N
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        jLabel2.setText("PI.No:");
        jLabel2.setName("jLabel2"); // NOI18N

        pino.setName("pino"); // NOI18N
        pino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pinoActionPerformed(evt);
            }
        });

        jNumberKeys1.setName("jNumberKeys1"); // NOI18N
        jNumberKeys1.addJNumberEventListener(new com.openbravo.beans.JNumberEventListener() {
            public void keyPerformed(com.openbravo.beans.JNumberEvent evt) {
                jNumberKeys1KeyPerformed(evt);
            }
        });

        jTextField1.setName("jTextField1"); // NOI18N

        jButton1.setText("Enter");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(load, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(warehouse, 0, 156, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 201, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pino)
                            .addComponent(date, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                        .addGap(198, 198, 198))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(back)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(next)
                                .addGap(2, 2, 2)
                                .addComponent(save))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jTextField1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1))
                            .addComponent(jNumberKeys1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(warehouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(load))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jNumberKeys1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(back)
                            .addComponent(next)
                            .addComponent(save))))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        try {
            // TODO add your handling code here:
            listold = pumodel.getPurchseindentList();
            pl = new PurchaseIndentModel.PurchaseIndentLine1();
            List<PurchaseIndentModel.PurchaseIndentLine1> listnew = new ArrayList<PurchaseIndentModel.PurchaseIndentLine1>();
            PurchaseIndentModel.PurchaseIndentLine1 pline1 = null;
            for (PurchaseIndentModel.PurchaseIndentLine p : listold) {
                if (p.isIsSelected()) {
                    if (p.getAppvendor() != null) {
                        pline1 = new PurchaseIndentModel.PurchaseIndentLine1();
                        pline1.setProductid(p.getPid());
                        pline1.setPrdtName(p.getPname());
                        pline1.setQty(p.getRoq());
                        pline1.setRate(p.getRate());
                        pline1.setOrderedqty(p.getIndentQty());
                        pline1.setOrderedrate(p.getIndentRate());
                        pline1.setRemarks(p.getRemark());
                        pline1.setIntvendorid(getVendorId(p.getIntvendor()));
                        pline1.setIntvendor(p.getIntvendor());
                        pline1.setAppvendorId(getVendorId(p.getAppvendor()));
                        pline1.setAppvendor(p.getAppvendor());
                        pline1.setMinStockLevel(p.getMinstocklevel());
                        pline1.setMaxStockLevel(p.getMaxstocklevel());
                        listnew.add(pline1);
                    } else {
                        JOptionPane.showMessageDialog(this, "select vendor");
                        return;
                    }
                }
            }
            pumodel.setPurInd(listnew);
            pumodel.getPurInd().add(pl);
            loadPurchaseIndent();
            back.setVisible(true);
            //enter.setVisible(true);
            flag = false;
        } catch (BasicException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_nextActionPerformed

    private int getSeqNo() throws BasicException {
        int seqno = 1;
        Object object = new StaticSentence(m_App.getSession(), "SELECT MAX(SEQNO) FROM PURCHASEINDENT", null, SerializerReadString.INSTANCE).find();
        if (object != null) {
            seqno = seqno + Integer.parseInt(object.toString());
        }
        return seqno;
    }

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        if (jTable1.getRowCount() > 0) {
            if (jTable1.getValueAt(0, 0) != null) {
                try {
                    final int seqno = getSeqNo();
                    Transaction t = new Transaction(m_App.getSession()) {

                        @Override
                        protected Object transact() throws BasicException {
                           
                            String pId = UUID.randomUUID().toString();
                            Object[] obj = new Object[]{pId, seqno, new Date(), m_App.getAppUserView().getUser().getId()};
                            new StaticSentence(m_App.getSession(), "INSERT INTO PURCHASEINDENT (ID,SEQNO,CRDATE,CREATEDBY) VALUES(?,?,?,?)",
                                    new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.INT, Datas.TIMESTAMP, Datas.STRING}),
                                    null).exec(obj);

                            List<PurchaseIndentModel.PurchaseIndentLine1> purInd = pumodel.getPurInd();
                            for (PurchaseIndentModel.PurchaseIndentLine1 p : purInd) {
                                if (p.getPrdtName() != null) {
                                    if (p.getAppvendor() != null && p.getOrderedqty() > 0 && p.getOrderedrate() != null) {
                                        if (p.getAppvendor() != null) {
                                            p.setAppvendorId(getVendorId(p.getAppvendor()));
                                        }
                                        Object[] value = new Object[]{UUID.randomUUID().toString(), pId, p.getProductid(), p.getQty(), p.getOrderedqty(), p.getOrderedqty(), p.getRate(), p.getOrderedrate(), p.getIntvendorid(), p.getAppvendorId(), p.getRemarks()};
                                        insertToPurchaseIndentDetails(value);
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Vendor column should not be empty,\r\n ordered Qty. and Ordered Rate should be greater than 0 for the selected products", "invalid operation", JOptionPane.WARNING_MESSAGE);
                                        throw new BasicException();
                                    }
                                }
                            }
                            return null;
                        }
                    };
                    t.execute();
                    JOptionPane.showMessageDialog(null, "Saved Successfully");
                    listold = pumodel.getPurchseindentList();
                    List<PurchaseIndentModel.PurchaseIndentLine> listnew1 = new ArrayList<PurchaseIndentModel.PurchaseIndentLine>();
                    for (PurchaseIndentModel.PurchaseIndentLine p : listold) {
                        if (!p.isIsSelected()) {
                            listnew1.add(p);
                        }
                    }
                    pumodel.setPuIndLine(listnew1);
                    next.setVisible(true);
                    set();
                    pino.setText(String.valueOf(getSeqNo()));
                    flag = true;
                    print(seqno);
                } catch (Exception e) {
                }
            } else {
                JOptionPane.showMessageDialog(this, "Enter product", "empty list", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Enter product", "empty list", JOptionPane.WARNING_MESSAGE);
        }

}//GEN-LAST:event_saveActionPerformed
    private void print(int indentno) {
        try {
            Date crdate=new Date();
            String createdby = null;
            String createdrole= null;
            pumodel = PurchaseIndentModel.loadIndentsToPrint(m_App,indentno);
            Object[] obj = (Object[]) new StaticSentence(m_App.getSession(), "SELECT P.NAME,PI.CRDATE FROM PURCHASEINDENT PI,PEOPLE P  WHERE SEQNO=? AND PI.CREATEDBY=P.ID", SerializerWriteInteger.INSTANCE,new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.TIMESTAMP})).find(indentno);
            if(obj!=null){
                createdby = obj[0].toString();
                crdate = (Date) obj[1];
            }
            List<PurchaseIndentModel.PrintPurchaseIndent> list = pumodel.getPrintPurchaseIndents();
            Map reportparams = new HashMap();            
            reportparams.put("companyName", m_App.getSession().getCompanyName());
            reportparams.put("companyAddress", m_App.getSession().getCompanyAddress());
            reportparams.put("date", crdate);
            reportparams.put("createdBy", createdby);
            reportparams.put("createdRole", createdrole);
            reportparams.put("pino", indentno);
            DataSourceProvider data1 = new DataSourceProvider(list);
            DataSourcePurchaseIndent ds = new DataSourcePurchaseIndent(list);
            data1.setDataSource(ds);
            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/PurchaseIndentInit.jrxml", reportparams, false, data1, true, null);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        try {
            if (warehouse.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(this, "select warehouse");
            } else {
                List<CategoryInfo> cinfolist = new ArrayList();
                cinfolist.add((CategoryInfo) warehouse.getSelectedItem());
                m_cat.loadCatalog(cinfolist);
                pumodel = PurchaseIndentModel.loadInstance(m_App, dlfac, warehouse.getSelectedItem().toString());
                next.setVisible(true);
                set();
            }
            back.setVisible(false);
            //enter.setVisible(false);
            flag = true;
        } catch (Exception e) {
            e.printStackTrace();
        }
}//GEN-LAST:event_backActionPerformed

    private void warehouseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_warehouseItemStateChanged
        // TODO add your handling code here:
        try {
            if (warehouse.getSelectedIndex() != -1) {
                List<CategoryInfo> cinfolist = new ArrayList();
                m_cat.loadCatalog(cinfolist);
                cinfolist.add((CategoryInfo) warehouse.getSelectedItem());
                m_cat.loadCatalog(cinfolist);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_warehouseItemStateChanged

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        // TODO add your handling code here:
        try {
            if (warehouse.getSelectedIndex() == -1) {
                JOptionPane.showMessageDialog(this, "select warehouse");
            } else {
                List<CategoryInfo> cinfolist = new ArrayList();
                cinfolist.add((CategoryInfo) warehouse.getSelectedItem());
                m_cat.loadCatalog(cinfolist);
                pumodel = PurchaseIndentModel.loadInstance(m_App, dlfac, warehouse.getSelectedItem().toString());
                next.setVisible(true);
                pino.setText(String.valueOf(getSeqNo()));
                set();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

}//GEN-LAST:event_loadActionPerformed

    private void pinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pinoActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_pinoActionPerformed

    private void jNumberKeys1KeyPerformed(com.openbravo.beans.JNumberEvent evt) {//GEN-FIRST:event_jNumberKeys1KeyPerformed
        // TODO add your handling code here:
        stateTransition(evt.getKey());

}//GEN-LAST:event_jNumberKeys1KeyPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DecimalFormat dFormat = new DecimalFormat("#.##");
        try {
            int row = jTable1.getSelectedRow();
            System.out.println("-------- " + row + " --------");
            if (row < 0) {
                JOptionPane.showMessageDialog(this, "Please select any row to insert value", "Cannot insert", JOptionPane.OK_OPTION);
            } else if (flag) {
                if (row >= 0) {
                    int column = jTable1.getSelectedColumn();
                    if (jTextField1.getText().length() > 0) {
                        if (column == 7) {
                            try {
                                int qty = Integer.parseInt(jTextField1.getText());
                                pumodel.getPurchaseIndentTable().setValueAt(qty, row, column);
                                if (jTable1.getRowCount() - 1 != row) {
                                    jTable1.setRowSelectionInterval(row + 1, row + 1);
                                }
                                else{
                                jTable1.setRowSelectionInterval(row -1, row - 1);
                            }
                                jTextField1.setText(null);
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(this, "Enter only numbers");
                            }
                        } else if (column == 8) {
                            Double rate = dlfac.roundTwoDecimals(Double.valueOf(jTextField1.getText()).doubleValue());
                            pumodel.getPurchaseIndentTable().setValueAt(rate, row, column);
                            if (jTable1.getRowCount() - 1 != row) {
                                jTable1.setRowSelectionInterval(row + 1, row + 1);
                            }else{
                                jTable1.setRowSelectionInterval(row -1, row - 1);
                            }
                            jTextField1.setText(null);
                        }
                    }

                }
            } else if (!flag) {
                if (row >= 0) {
                    int column = jTable1.getSelectedColumn();
                    if (jTextField1.getText().length() > 0) {
                        if (column == 2) {
                            try {
                                int qty = Integer.parseInt(jTextField1.getText());
                                pumodel.getPurchaseIndentTableModel().setValueAt(qty, row, column);
                                jTextField1.setText(null);
                                if (jTable1.getRowCount() - 1 == row) {
                                    pl = new PurchaseIndentModel.PurchaseIndentLine1();
                                    pumodel.getPurInd().add(pl);
                                }
                                loadPurchaseIndent();
                                jTable1.setRowSelectionInterval(row + 1, row + 1);
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(this, "Enter only numbers");
                            }
                        } else if (column == 4) {
                            Double rate = dlfac.roundTwoDecimals(Double.valueOf(jTextField1.getText()).doubleValue());
                            pumodel.getPurchaseIndentTableModel().setValueAt(rate, row, column);
                            if (jTable1.getRowCount() - 1 == row) {
                                pl = new PurchaseIndentModel.PurchaseIndentLine1();
                                pumodel.getPurInd().add(pl);
                            }
                            loadPurchaseIndent();
                            jTable1.setRowSelectionInterval(row + 1, row + 1);
                            jTextField1.setText(null);
                        }
                    }

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void stateTransition(char cTrans) {

        if (cTrans == '\u007f') {
            jTextField1.setText(null);
        } else if (cTrans == '+' || cTrans == '-') {
        } else if (cTrans == ' ' || cTrans == '=') {
        } else {

            jTextField1.setText(jTextField1.getText() + cTrans);
        }
    }

    public void insertToPurchaseIndentDetails(Object[] obj) {
        try {
            new StaticSentence(m_App.getSession(), "INSERT INTO PURCHASEINDENTDETAILS(ID,PURCHASEINDENTID,PRODUCTID,INTQTY,APPQTY,BALANCEINDQTY,INTRATE,APPRATE,INTVENDOR,APPVENDOR,REMARKS) VALUES(?,?,?,?,?,?,?,?,?,?,?)",
                    new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING, Datas.INT, Datas.INT, Datas.INT, Datas.DOUBLE, Datas.DOUBLE, Datas.STRING, Datas.STRING, Datas.STRING}),
                    null).exec(obj);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public String getVendorId(String name) throws BasicException {
        String vId = null;
        Object obj = new StaticSentence(m_App.getSession(), "SELECT ID FROM VENDOR WHERE NAME=?", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find(name);
        if (obj != null) {
            vId = obj.toString();
        }
        return vId;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JTextField date;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private com.openbravo.beans.JNumberKeys jNumberKeys1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton load;
    private javax.swing.JButton next;
    private javax.swing.JTextField pino;
    private javax.swing.JButton save;
    private javax.swing.JComboBox warehouse;
    // End of variables declaration//GEN-END:variables

    public String getTitle() {
        return "Purchase Indent";
    }

    public void activate() throws BasicException {
        date.setEditable(false);
        pino.setEditable(false);
        pino.setText(null);
        m_cat = new JCatalog(m_dlSales);
        m_cat.getComponent().setPreferredSize(new Dimension(0, 245));
        m_cat.addActionListener(new CatalogListener());
        component = m_cat.getComponent();
        jPanel2.add(component, BorderLayout.CENTER);
        Date datenow = new Date();
        date.setText(Formats.DATE.formatValue(datenow));
        List vlist = dlfac.getVendorList();
        String[] str = new String[vlist.size()];
        for (int i = 0; i < vlist.size(); i++) {
            str[i] = vlist.get(i).toString();
        }
        //vlist.toArray(str);
        comboBox = new JComboBox(str);
        cModel = new ComboBoxValModel(m_dlSales.getMainWarehouses());
        warehouse.setModel(cModel);
        pumodel = PurchaseIndentModel.emptyInstance();
        next.setVisible(false);
        //enter.setVisible(false);
        set();

    }

    public boolean deactivate() {
        return true;
    }

    public JComponent getComponent() {
        return this;
    }

    public void init(AppView app) throws BeanFactoryException {
        m_App = app;
        m_dlSales = (DataLogicSales) app.getBean("com.openbravo.pos.forms.DataLogicSalesCreate");
        dlfac = (DataLogicFacilities) app.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");
        vendormodel = new ComboBoxValModel();
    }

    public Object getBean() {
        return this;
    }

    private void set() throws BasicException {
        //enter.setVisible(false);
        back.setVisible(false);
        save.setVisible(false);
        jPanel2.setVisible(false);
        load();
    }

    private void load() throws BasicException {
        tablemodel = pumodel.getPurchaseIndentTable();
        jTable1.setModel(tablemodel);
        TableColumnModel jColumns = jTable1.getColumnModel();
        jColumns.getColumn(0).setPreferredWidth(30);
        jColumns.getColumn(0).setResizable(false);
        jColumns.getColumn(1).setPreferredWidth(200);
        jColumns.getColumn(1).setResizable(false);
        jColumns.getColumn(2).setPreferredWidth(100);
        jColumns.getColumn(2).setResizable(false);
        jColumns.getColumn(3).setPreferredWidth(100);
        jColumns.getColumn(3).setResizable(false);
        jColumns.getColumn(4).setPreferredWidth(100);
        jColumns.getColumn(4).setResizable(false);
        jColumns.getColumn(5).setPreferredWidth(100);
        jColumns.getColumn(5).setResizable(false);
        jColumns.getColumn(6).setPreferredWidth(100);
        jColumns.getColumn(6).setResizable(false);
        jColumns.getColumn(7).setPreferredWidth(100);
        jColumns.getColumn(7).setResizable(false);
        jColumns.getColumn(8).setPreferredWidth(100);
        jColumns.getColumn(8).setResizable(false);
        jColumns.getColumn(9).setPreferredWidth(100);
        jColumns.getColumn(9).setResizable(false);
        jColumns.getColumn(10).setCellEditor(new DefaultCellEditor(comboBox));
        jColumns.getColumn(10).setPreferredWidth(200);
        jColumns.getColumn(10).setResizable(false);
        jColumns.getColumn(11).setPreferredWidth(150);
        jColumns.getColumn(11).setResizable(false);

    }

    private void loadPurchaseIndent() throws BasicException {
        jTable1.setBackground(Color.WHITE);
        tablemodel1 = pumodel.getPurchaseIndentTableModel();
        jTable1.setModel(tablemodel1);
        TableColumnModel jColumns = jTable1.getColumnModel();
        jColumns.getColumn(0).setPreferredWidth(200);
        jColumns.getColumn(0).setResizable(false);
        jColumns.getColumn(1).setPreferredWidth(80);
        jColumns.getColumn(1).setResizable(false);
        jColumns.getColumn(2).setPreferredWidth(80);
        jColumns.getColumn(2).setResizable(false);
        jColumns.getColumn(3).setPreferredWidth(80);
        jColumns.getColumn(3).setResizable(false);
        jColumns.getColumn(4).setPreferredWidth(80);
        jColumns.getColumn(4).setResizable(false);
        jColumns.getColumn(5).setCellEditor(new DefaultCellEditor(comboBox));
        jColumns.getColumn(5).setPreferredWidth(200);
        jColumns.getColumn(5).setResizable(false);
        jColumns.getColumn(6).setPreferredWidth(200);
        jColumns.getColumn(6).setResizable(false);
        save.setVisible(true);
        next.setVisible(false);
        jPanel2.setVisible(true);

    }

    private class CatalogListener implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            try {
                int row = jTable1.getRowCount() - 1;
                int column = jTable1.getSelectedColumn();
                ProductInfoExt pinfo = (ProductInfoExt) e.getSource();
                if (pinfo.getAccount() != null) {
                    if (isProductExist(pinfo.getID())) {
                        JOptionPane.showMessageDialog(null, "Selected Product is already exist", null, JOptionPane.OK_OPTION);
                    } else {
                        pumodel.getPurchaseIndentTableModel().setValueAt(pinfo.getName(), row, 0);
                        pumodel.getPurchaseIndentTableModel().setValueAt(pinfo.getID(), row, 7);

                        Object[] obj = getROQ(pinfo.getID().toString());
                        if (obj != null && obj[0] != null) {
                            pumodel.getPurchaseIndentTableModel().setValueAt(obj[0], row, 1);
                            pumodel.getPurchaseIndentTableModel().setValueAt(obj[1], row, 8);
                            pumodel.getPurchaseIndentTableModel().setValueAt(obj[2], row, 9);
                            pumodel.getPurchaseIndentTableModel().setValueAt(obj[3], row, 3);
                            pumodel.getPurchaseIndentTableModel().setValueAt(obj[4], row, 5);
                            pumodel.getPurchaseIndentTableModel().setValueAt(obj[5], row, 10);
                            pumodel.getPurchaseIndentTableModel().setValueAt(obj[4], row, 11);
                        }
                        loadPurchaseIndent();
                        //jTable1.setModel(pumodel.getPurchaseIndentTableModel());
                        jTable1.setRowSelectionInterval(row, row);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please Specify a Purchase Account to the product", null, JOptionPane.OK_OPTION);
                }
            } catch (BasicException ex) {
                ex.printStackTrace();
            }
        }
    }

    private Object[] getROQ(String pid) throws BasicException {
        int roq = 0;
        int mnSL = 0;
        int mxsL = 0;
        double d = 0.0;
        double qty = 0;
        String vendor = null;
        Object[] obj = (Object[]) new StaticSentence(m_App.getSession(), "SELECT P.REORDERQUANTITY,P.MINSTOCKLEVEL,P.MAXSTOCKLEVEL,P1.RATE,V.NAME,S.UNITS  FROM PRODUCTS P,PURCHASEJOURNAL P1,VENDOR V,PURCHASEJOURNALMAIN PM,STOCKCURRENT S WHERE P1.ITEM=P.ID AND P.ID=? AND P1.PARENT=PM.ID AND PM.VENDOR=V.ID AND P.ID=S.PRODUCT GROUP BY P.ID  ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.INT, Datas.INT, Datas.INT, Datas.DOUBLE, Datas.STRING, Datas.DOUBLE})).find(pid);
        if (obj != null) {
            if (obj[0] != null) {
                roq = Integer.parseInt(obj[0].toString());
            }
            if (obj[1] != null) {
                mnSL = Integer.parseInt(obj[1].toString());
            }
            if (obj[2] != null) {
                mxsL = Integer.parseInt(obj[2].toString());
            }
            if (obj[3] != null) {
                d = Double.parseDouble(obj[3].toString());
            }
            if (obj[4] != null) {
                vendor = obj[4].toString();
            }
            if (obj[5] != null) {
                qty = Double.parseDouble(obj[5].toString());
            }
        }
        return new Object[]{roq, mnSL, mxsL, d, vendor, qty};
    }

    private boolean isProductExist(String pid) {
        boolean bool = false;
        List<PurchaseIndentModel.PurchaseIndentLine1> plist = pumodel.getPurInd();
        for (PurchaseIndentModel.PurchaseIndentLine1 p : plist) {
            if (pid.equals(p.getProductid())) {
                bool = true;
            }
        }
        return bool;
    }
}
