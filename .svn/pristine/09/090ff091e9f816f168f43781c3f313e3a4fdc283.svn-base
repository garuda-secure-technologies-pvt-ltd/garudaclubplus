/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.Accounts;

import com.openbravo.basic.BasicException;
import com.openbravo.beans.JCalendarDialog;
import com.openbravo.data.gui.MessageInf;
import com.openbravo.data.loader.DataRead;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.IKeyed;
import com.openbravo.data.loader.PreparedSentence;
import com.openbravo.data.loader.SerializableRead;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerReadClass;
import com.openbravo.data.loader.SerializerReadDouble;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWrite;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.data.loader.Transaction;
import com.openbravo.format.Formats;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author user
 */
public class CloseInventory extends javax.swing.JPanel  implements JPanelView,BeanFactoryApp {

     private AppView m_App;
     private String debtAccount;
     private String creditAccount;
      private DataLogicFacilities  dlfac;
       private final static String[] TABLEHEADERS = {"Date","Amount", "Cr By", "Cr Date", "Active",  "Debit Account","Credit Account"};
       private List<ClosingInventoryBean> allList;
    /**
     * Creates new form CloseInventory
     */
    public CloseInventory() {
        initComponents();
    }
    
    public void activate() throws BasicException {
        reset();
        Object values = new StaticSentence(m_App.getSession(), "SELECT VALUE FROM GENERALTABLE WHERE NAME = 'Accout Debit (Inventory)'", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find();
        
        if(values!=null)
        {
           debtAccount = values.toString();
           
           
            Object values2 = new StaticSentence(m_App.getSession(), "SELECT VALUE FROM GENERALTABLE WHERE NAME = 'Account Credit (Income and Expand)'", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find();
            if(values2!=null)
            {
                creditAccount = values2.toString();
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please Assign Account Credit in GeneralTable!!", "GeneralTable", JOptionPane.ERROR_MESSAGE);
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Please Assign Account Debt in GeneralTable!!", "GeneralTable", JOptionPane.ERROR_MESSAGE);
        }
        
        getList();
        jTable1.setModel(this.getTableModel());
        
        
    }
     public void init(AppView app) throws BeanFactoryException {
        
             m_App = app; 
             dlfac=(DataLogicFacilities) app.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");
        
         
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        DateTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        DateSelect = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        narration = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jLabel1.setText("Date");

        jLabel2.setText("Amount");

        amount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amountKeyReleased(evt);
            }
        });

        DateSelect.setText("Date");
        DateSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateSelectActionPerformed(evt);
            }
        });

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Narration");

        narration.setColumns(20);
        narration.setRows(5);
        narration.setText("Being Closing Stock Transferred at the end of year.");
        jScrollPane2.setViewportView(narration);
        narration.setWrapStyleWord(true);
        narration.setLineWrap(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(DateTextField)
                                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(DateSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 57, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(DateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DateSelect))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("New", jPanel1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Deactivate ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );

        jTabbedPane1.addTab("List", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void DateSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateSelectActionPerformed

        Date date=new Date();
        try {
            date = (Date) Formats.TIMESTAMP.parseValue(DateTextField.getText());
        } catch (BasicException e) {
            date = null;
        }
        try{
            date = JCalendarDialog.showCalendarTimeHours(this, date);
            if (date != null) {
                
                Calendar cal=Calendar.getInstance();
            cal.setTimeInMillis(date.getTime());
            cal.set(Calendar.DATE, cal.getActualMaximum(Calendar.DATE));
            date.setTime(cal.getTimeInMillis());
               
                    DateTextField.setText(Formats.TIMESTAMP.formatValue(date));
               
            }
        }catch(Exception e1){
            e1.printStackTrace();
        }

    }//GEN-LAST:event_DateSelectActionPerformed

    private void amountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountKeyReleased
        char c = evt.getKeyChar();
    
    if(c!=KeyEvent.VK_BACK_SPACE && c!=KeyEvent.VK_TAB && c!=KeyEvent.VK_ESCAPE && c!=KeyEvent.VK_ENTER && c!=KeyEvent.VK_CONTROL && c!=KeyEvent.VK_SHIFT && c!=KeyEvent.VK_PERIOD && c!=KeyEvent.VK_MINUS)
    {
    if(!Character.isDigit(c))
    {
        JOptionPane.showMessageDialog(this, "Please enter only numbers..");
            
            amount.setText(null);
    }
    }
    }//GEN-LAST:event_amountKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      if(DateTextField.getText()!=null && DateTextField.getText().length()>2 &&amount.getText()!=null && amount.getText().length()>1 )
      {
          
          
          
          try {
              Date d1  =(Date) Formats.TIMESTAMP.parseValue(DateTextField.getText());
                      Date today1 = new Date();
                      Calendar cal1 = Calendar.getInstance();
                cal1.setTime(d1);
                cal1.set(Calendar.HOUR_OF_DAY, 00);
                cal1.set(Calendar.MINUTE, 00);
                cal1.set(Calendar.SECOND, 00);
                cal1.set(Calendar.MILLISECOND, 00);
                d1 = cal1.getTime();
              ClosingInventoryBean ciBean =  (ClosingInventoryBean) new StaticSentence(m_App.getSession()
                     ,"SELECT C.ID, C.DATE,C.AMOUNT, C.ACTIVE, C.CRBY,C.CRDATE, (SELECT AC.NAME FROM ACCOUNTMASTER AC WHERE AC.ID = (SELECT A.ACCOUNTID FROM ACCOUNTJOURNAL A WHERE A.TID = C.ACCOUNTREF AND A.TRANSTYPE = 'D')) as debtAccount ,(SELECT AC2.NAME FROM ACCOUNTMASTER AC2 WHERE AC2.ID = (SELECT A2.ACCOUNTID FROM ACCOUNTJOURNAL A2 WHERE A2.TID = C.ACCOUNTREF AND A2.TRANSTYPE = 'C')) as creditAccount, C.ACCOUNTREF FROM CLOSINGINVENTORY C WHERE C.DATE =? AND C.ACTIVE IS TRUE ORDER BY CRDATE DESC"
                   ,new SerializerWriteBasic(new Datas[]{Datas.TIMESTAMP})
                   ,new SerializerReadClass( ClosingInventoryBean.class )).find(new Object[]{d1});
                if(ciBean==null)
                {
              Transaction t  = new Transaction(m_App.getSession()) {
                  @Override
                  protected Object transact() throws BasicException {
                      
                
                 Date d  =(Date) Formats.TIMESTAMP.parseValue(DateTextField.getText());
                      Date today = new Date();
                      Calendar cal1 = Calendar.getInstance();
                cal1.setTime(d);
                cal1.set(Calendar.HOUR_OF_DAY, 00);
                cal1.set(Calendar.MINUTE, 00);
                cal1.set(Calendar.SECOND, 00);
                cal1.set(Calendar.MILLISECOND, 00);
                d = cal1.getTime();
                
            
                
                
                String tid = UUID.randomUUID().toString();
                double amt = Double.parseDouble(amount.getText());
                String transno=dlfac.getnextTranscationNum(today, "Journal");
                
                    Object[] value=new Object[]{UUID.randomUUID().toString(),tid,d,"D","Journal",transno,amt,today,false,m_App.getAppUserView().getUser().getName(),m_App.getProperties().getHost(),narration.getText(),debtAccount,amt,null,today,true};
                    dlfac.insertintoaccjoutnal3(value);
                    Object[] value1=new Object[]{UUID.randomUUID().toString(),tid,d,"C","Journal",transno,amt,today,false,m_App.getAppUserView().getUser().getName(),m_App.getProperties().getHost(),narration.getText(),creditAccount,amt,null,today,true};
                       dlfac.insertintoaccjoutnal3(value1);
                
                
                 dlfac.updateTransNumber("Journal", today, Integer.parseInt(transno));
                
                
                
                      Object [] values = new Object[]{UUID.randomUUID().toString(), d, amt, true, m_App.getAppUserView().getUser().getName().toString(), m_App.getProperties().getHost(), today, tid  };
                       new PreparedSentence(m_App.getSession()
                  , "INSERT INTO CLOSINGINVENTORY(ID, DATE, AMOUNT, ACTIVE, CRBY, CRHOST, CRDATE, ACCOUNTREF) VALUES (?,?,?,?,?,?,?,?)"
                  , new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.TIMESTAMP, Datas.DOUBLE, Datas.BOOLEAN, Datas.STRING,Datas.STRING,Datas.TIMESTAMP, Datas.STRING})
                  ).exec(values);
                      
                  
                  
                  return null;
                  }
              };
              t.execute();
             JOptionPane.showMessageDialog(this, "Saved Successfully.", TOOL_TIP_TEXT_KEY, WIDTH);
             reset();
                }
                else
                {
                  JOptionPane.showMessageDialog(null, "Already old Entry is there with same date. Deactivate old entry and then enter new entry", "Deactivate old entry", JOptionPane.ERROR_MESSAGE);
                }
          } catch (BasicException ex) {
              
              new MessageInf(ex).show(getParent());
              
          }
      }
      else
      {
          JOptionPane.showMessageDialog(this, "Please Enter details..", "Fill the form", JOptionPane.WARNING_MESSAGE);
      }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
       if(jTabbedPane1.getSelectedIndex()==1)
       {
          getList();
          jTable1.setModel(this.getTableModel()); 
       }
               // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(jTable1.getSelectedRow()!=-1)
        {
            ClosingInventoryBean cib1 = allList.get(jTable1.getSelectedRow());
            if(cib1.isActive())
            {
                
           
            final ClosingInventoryBean cib = cib1;
            if(JOptionPane.showConfirmDialog(JOptionPane.getRootFrame(), "Are you sure want to deactivate?", null, JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION){
              
                   try {
                    Transaction t = new Transaction(m_App.getSession()) {
                        @Override
                        protected Object transact() throws BasicException {
                             
                     
                       new PreparedSentence(m_App.getSession()
                              , "UPDATE ACCOUNTJOURNAL SET ACTIVE=FALSE,DEACTBY=?,DEACTDATE=? WHERE TID= ? "
                              , new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.TIMESTAMP,Datas.STRING})).exec(new Object[]{m_App.getAppUserView().getUser().getName(),new Date(),cib.getAccountref()});
                       List<Object[]> objList=new PreparedSentence(m_App.getSession(), "SELECT ACCOUNTID,AMOUNT,TRANSTYPE,DATE FROM ACCOUNTJOURNAL WHERE TID=?"
                                          , SerializerWriteString.INSTANCE,new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.DOUBLE,Datas.STRING,Datas.TIMESTAMP})).list(cib.getAccountref());
                for(Object[] obj:objList){
                    if(obj!=null){
                         Date d1=(Date)obj[3];
                         Calendar cal=Calendar.getInstance();
                         cal.setTimeInMillis(d1.getTime());
                         cal.set(Calendar.HOUR_OF_DAY, 00);
                         cal.set(Calendar.MINUTE, 00);
                         cal.set(Calendar.SECOND, 00);
                         cal.set(Calendar.MILLISECOND, 00);
                         cal.set(Calendar.DATE, cal.getActualMaximum(Calendar.DATE));
                         d1.setTime(cal.getTimeInMillis());
                          if(obj[2].toString().equals("C")){
                             new PreparedSentence(m_App.getSession(), "UPDATE AJPERIODTOTALS SET CURCREDIT=(CURCREDIT-?) where ACCOUNTID=? AND EDATE=? "
                                     , new SerializerWriteBasic(new Datas[]{Datas.DOUBLE,Datas.STRING,Datas.TIMESTAMP})).exec(new Object[]{obj[1],obj[0],d1});
                             new PreparedSentence(m_App.getSession(), "UPDATE TRAILBALANCE SET CURCREDIT=(CURCREDIT-?) where ACCOUNTID=?  "
                                     , new SerializerWriteBasic(new Datas[]{Datas.DOUBLE,Datas.STRING})).exec(new Object[]{obj[1],obj[0]});
                         }else{
                              new PreparedSentence(m_App.getSession(), "UPDATE AJPERIODTOTALS SET CURDEBIT=(CURDEBIT-?) where ACCOUNTID=? AND EDATE=? "
                                     , new SerializerWriteBasic(new Datas[]{Datas.DOUBLE,Datas.STRING,Datas.TIMESTAMP})).exec(new Object[]{obj[1],obj[0],d1});
                              new PreparedSentence(m_App.getSession(), "UPDATE TRAILBALANCE SET CURDEBIT=(CURDEBIT-?) where ACCOUNTID=?  "
                                     , new SerializerWriteBasic(new Datas[]{Datas.DOUBLE,Datas.STRING})).exec(new Object[]{obj[1],obj[0]});
                         }
                    }
                }
                
                
                new PreparedSentence(m_App.getSession()
                              , "UPDATE closinginventory SET ACTIVE=FALSE,DEACBY=?, DEACHOST = ?, DEACDATE=? WHERE ID= ? "
                              , new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.TIMESTAMP,Datas.STRING})).exec(new Object[]{m_App.getAppUserView().getUser().getName(), m_App.getProperties().getHost(), new Date(),cib.getId()});
                            return null;
                        }
                    };
                
                    t.execute();
                    JOptionPane.showMessageDialog(this, "Deactivated Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    activate();
                } catch (BasicException ex) {
                    Logger.getLogger(CloseInventory.class.getName()).log(Level.SEVERE, null, ex);
                    new MessageInf(ex).show(null);
                }
              
               
               
            }
        } 
        else
            {
                JOptionPane.showMessageDialog(this, "Selected Item already deactivated.", "Already Deactivated", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DateSelect;
    private javax.swing.JTextField DateTextField;
    private javax.swing.JTextField amount;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea narration;
    // End of variables declaration//GEN-END:variables

    public String getTitle() {
        return "Closing Inventory";//To change body of generated methods, choose Tools | Templates.
    }

    

    public boolean deactivate() {
        return true; //To change body of generated methods, choose Tools | Templates.
    }

    public JComponent getComponent() {
        return this;//To change body of generated methods, choose Tools | Templates.
    }

   

    public Object getBean() {
        return this; //To change body of generated methods, choose Tools | Templates.
    }

    private void reset() {
        jTabbedPane1.setSelectedIndex(0);
        DateTextField.setText(null);
        amount.setText(null);
    }
    public AbstractTableModel getTableModel() {
        return new AbstractTableModel() {

             public String getColumnName(int column) {
                 return AppLocal.getIntString(TABLEHEADERS[column]);
             }
            
            public int getRowCount() {
                return allList.size(); //To change body of generated methods, choose Tools | Templates.
            }

            public int getColumnCount() {
                return TABLEHEADERS.length; //To change body of generated methods, choose Tools | Templates.
            }

            public Object getValueAt(int rowIndex, int columnIndex) {
                
                ClosingInventoryBean c = allList.get(rowIndex);
                
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
                 switch (columnIndex) {
                    // Date","Amount", "Cr By", "Cr Date", "Active",  "Debit Account","Credit Account
                     case 0: return sdf.format(c.getDate());
                     case 1: return c.getAmount();
                         case 2: return c.getCrby();
                             case 3: return sdf.format(c.getCrdate());
                                 case 4: if(c.isActive())
                                 {
                                     return "Yes";
                                 }
                                 else
                                 {
                                     return "No";
                                 } 
                                 case 5: return c.getDebtAccount();
                                     case 6: return c.getCreditAccount();
                                         
                                     
                     
                     default: return null;
                 }
                
                //To change body of generated methods, choose Tools | Templates.
            }
        };
    }
    
    private void getList()
    {
         try {
             allList = null;
        allList =  new StaticSentence(m_App.getSession()
                     ,"SELECT C.ID, C.DATE,C.AMOUNT, C.ACTIVE, C.CRBY,C.CRDATE, (SELECT AC.NAME FROM ACCOUNTMASTER AC WHERE AC.ID = (SELECT A.ACCOUNTID FROM ACCOUNTJOURNAL A WHERE A.TID = C.ACCOUNTREF AND A.TRANSTYPE = 'D')) as debtAccount ,(SELECT AC2.NAME FROM ACCOUNTMASTER AC2 WHERE AC2.ID = (SELECT A2.ACCOUNTID FROM ACCOUNTJOURNAL A2 WHERE A2.TID = C.ACCOUNTREF AND A2.TRANSTYPE = 'C')) as creditAccount, C.ACCOUNTREF FROM CLOSINGINVENTORY C ORDER BY CRDATE DESC"
                   ,SerializerWriteString.INSTANCE
                   ,new SerializerReadClass( ClosingInventoryBean.class )).list();
             
             
             
         } catch (BasicException ex) {
             Logger.getLogger(CloseInventory.class.getName()).log(Level.SEVERE, null, ex);
         }
        
    }
    
    public static class ClosingInventoryBean implements SerializableRead, IKeyed {
        
        private String id;
        private Date date;
        private double amount;
        private boolean active;
        private String crby;
        private String crhost;
        private Date crdate;
        private String debtAccount;
        private String creditAccount;
        private String accountref;
        
        
        
        public void readValues(DataRead dr) throws BasicException {
            id = dr.getString(1);
            date = dr.getTimestamp(2);
            amount = dr.getDouble(3);
            active = dr.getBoolean(4);
            crby = dr.getString(5);
            crdate = dr.getTimestamp(6);
            debtAccount = dr.getString(7);
            creditAccount = dr.getString(8);
            accountref = dr.getString(9);
            // SELECT C.DATE,C.AMOUNT, C.ACTIVE, C.CRBY,C.CRDATE,(SELECT NAME FROM ACCOUNTMASTER WHERE ID = (SELECT ACCOUNTID FROM ACCOUNTJOURNAL WHERE TID = C.ACCOUNTREF AND TRANSREF = 'D')),(SELECT NAME FROM ACCOUNTMASTER WHERE ID = (SELECT ACCOUNTID FROM ACCOUNTJOURNAL WHERE TID = C.ACCOUNTREF AND TRANSREF = 'D')) FROM CLOSINGINVENTORY C
        }

        public String getId() {
            return id;
        }

        public String getAccountref() {
            return accountref;
        }

        public void setAccountref(String accountref) {
            this.accountref = accountref;
        }

        public void setId(String id) {
            this.id = id;
        }

        public Object getKey() {
            return this; //To change body of generated methods, choose Tools | Templates.
        }

        public Date getDate() {
            return date;
        }

        public void setDate(Date date) {
            this.date = date;
        }

        public double getAmount() {
            return amount;
        }

        public void setAmount(double amount) {
            this.amount = amount;
        }

        public boolean isActive() {
            return active;
        }

        public void setActive(boolean active) {
            this.active = active;
        }

        public String getCrby() {
            return crby;
        }

        public void setCrby(String crby) {
            this.crby = crby;
        }

        public String getCrhost() {
            return crhost;
        }

        public void setCrhost(String crhost) {
            this.crhost = crhost;
        }

        public Date getCrdate() {
            return crdate;
        }

        public void setCrdate(Date crdate) {
            this.crdate = crdate;
        }

        public String getDebtAccount() {
            return debtAccount;
        }

        public void setDebtAccount(String debtAccount) {
            this.debtAccount = debtAccount;
        }

        public String getCreditAccount() {
            return creditAccount;
        }

        public void setCreditAccount(String creditAccount) {
            this.creditAccount = creditAccount;
        }
        
        
   
    }
   }
