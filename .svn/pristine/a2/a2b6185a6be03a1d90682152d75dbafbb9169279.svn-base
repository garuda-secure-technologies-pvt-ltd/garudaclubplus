/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TextAreaEditorAbstract.java
 *
 * Created on Jul 3, 2009, 3:28:24 PM
 */

package com.openbravo.editor;

import com.openbravo.basic.BasicException;
import java.awt.Color;
import java.awt.Component;
import javax.swing.border.Border;

/**
 *
 * @author swathi
 */
public abstract class TextAreaEditorAbstract extends javax.swing.JPanel implements EditorComponent{

     private EditorKeys editorkeys;

    private boolean m_bActive;
    private final Border m_borderactive =  new javax.swing.border.CompoundBorder(new javax.swing.border.LineBorder(javax.swing.UIManager.getDefaults().getColor("TextField.selectionBackground")), new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 4, 1, 4)));
    private final Border m_borderinactive =  new javax.swing.border.CompoundBorder(new javax.swing.border.LineBorder(javax.swing.UIManager.getDefaults().getColor("Button.darkShadow")), new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 4, 1, 4)));

    /** Creates new form JPanelNumber */
    public TextAreaEditorAbstract() {

        initComponents();

        editorkeys = null;
        m_bActive = false;
        m_jText.setBorder(m_borderinactive);
      //  activate();
    }

    protected abstract int getMode();
    protected abstract int getAlignment();
    protected abstract String getEditMode();
    protected abstract String getTextEdit();
    protected abstract String getTextFormat() throws BasicException;
    protected abstract void typeCharInternal(char c);
    protected abstract void transCharInternal(char c);

    public void typeChar(char c) {
        typeCharInternal(c);
        reprintText();
        firePropertyChange("Edition", null, null);
    }

    public void transChar(char c) {
        transCharInternal(c);
        reprintText();
        firePropertyChange("Edition", null, null);
    }

    public void addEditorKeys(EditorKeys ed) {
        editorkeys = ed;
    }
    public void deactivate() {
        setActive(false);
    }
    public Component getComponent() {
        return this;
    }
    public void activate() {
        if (isEnabled()) {
            editorkeys.setActive(this, getMode());
            setActive(true);
        }
    }

    private void setActive(boolean bValue) {
        m_bActive = bValue;
        m_jText.setBorder(m_bActive ? m_borderactive : m_borderinactive);
        reprintText();
    }

    protected void reprintText() {

       // m_jText.setHorizontalAlignment(getAlignment());
        if (m_bActive) {
            m_jMode.setText(getEditMode());
            m_jText.setText(getTextEdit());
            m_jText.setForeground(javax.swing.UIManager.getDefaults().getColor("Label.foreground"));
        } else {
            m_jMode.setText(null);
            try {
                m_jText.setText(getTextFormat());
                m_jText.setForeground(javax.swing.UIManager.getDefaults().getColor("Label.foreground"));
            } catch (BasicException e) {
                m_jText.setText(getTextEdit());
                m_jText.setForeground(Color.RED);
            }
        }
    }
   
    public void setEnabled(boolean b) {

        if (editorkeys != null) {
            editorkeys.setInactive(this);
        }
        panBackground.setBackground(b
            ? javax.swing.UIManager.getDefaults().getColor("TextField.background")
            : javax.swing.UIManager.getDefaults().getColor("TextField.disabledBackground"));
        super.setEnabled(b);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panBackground = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        m_jText = new javax.swing.JTextArea();
        m_jMode = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        panBackground.setLayout(new java.awt.BorderLayout());

        m_jText.setColumns(20);
        m_jText.setRows(5);
        m_jText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                m_jTextFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(m_jText);

        panBackground.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(panBackground, java.awt.BorderLayout.CENTER);

        m_jMode.setText("           ");
        add(m_jMode, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void m_jTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_m_jTextFocusGained
        // TODO add your handling code here:
        activate();
    }//GEN-LAST:event_m_jTextFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel m_jMode;
    private javax.swing.JTextArea m_jText;
    private javax.swing.JPanel panBackground;
    // End of variables declaration//GEN-END:variables

}
