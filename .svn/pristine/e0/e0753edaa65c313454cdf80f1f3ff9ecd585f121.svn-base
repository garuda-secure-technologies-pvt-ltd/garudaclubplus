/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.inventory;

import com.openbravo.basic.BasicException;
import com.openbravo.beans.JFlowPanel;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.gui.MessageInf;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.LocalRes;
import com.openbravo.data.loader.PreparedSentence;
import com.openbravo.data.loader.SentenceList;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerWriteBasicExt;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.Session;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.format.Formats;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.DataLogicSales;
import com.openbravo.pos.forms.JPanelView;
import com.openbravo.pos.inventory.CreateProductsForWarehouseModel.LocationBean;
import com.openbravo.pos.ticket.CategoryInfo;
import com.openbravo.pos.ticket.ProductInfoExt;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;


/**
 *
 * @author user
 */
public class CreateProductsForWarehouse extends javax.swing.JPanel implements JPanelView,BeanFactoryApp {

    private AppView m_App;
    private Session session;
    private CreateProductsForWarehouseModel cp;
    private CreateProductsForWarehouseModel cpfw;
    private List<LocationBean> lbList;
    private ComboBoxValModel cbvm;
    private ComboBoxValModel cbvmA;
    private ComboBoxValModel cbvmB;
    private List<ProductInfoExt> productsList;
    private DataLogicSales m_dlSales;
    private List<CategoryInfo> catinfoFW;
     private List<CategoryInfo> catinfoTW;
   private HashMap<String, List<ProductInfoExt>> prodByCate; 
   private HashMap<String, List<ProductInfoExt>> newProdByCate = new HashMap<String, List<ProductInfoExt>>();
    private  JFlowPanel catList ;
    private SentenceList taxcatsent;
    private ComboBoxValModel taxcatmodel;
     
    public CreateProductsForWarehouse() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fromWarehouse = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        newWarehouse = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        fwCat = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        nwCatSelect = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        fwSelectedCatID = new javax.swing.JLabel();
        index = new javax.swing.JLabel();
        savePanel = new javax.swing.JPanel();
        insert = new javax.swing.JButton();

        jLabel1.setText("Warehouse");

        fromWarehouse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        fromWarehouse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fromWarehouseItemStateChanged(evt);
            }
        });
        fromWarehouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromWarehouseActionPerformed(evt);
            }
        });

        jLabel2.setText("New Warehouse");

        newWarehouse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        newWarehouse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                newWarehouseItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fromWarehouse, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newWarehouse, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 19, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fromWarehouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(newWarehouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addGap(45, 45, 45)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(423, Short.MAX_VALUE))
        );

        newWarehouse.setVisible(false);
        jScrollPane2.setVisible(false);

        jScrollPane1.setViewportView(jPanel1);

        jLabel3.setText("From Warehouse Category");

        jLabel4.setText("Select New Warehouse Category");

        nwCatSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        fwSelectedCatID.setText("jLabel5");

        index.setText("jLabel5");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(index))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fwCat, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(nwCatSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fwSelectedCatID)))
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fwCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(fwSelectedCatID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(index)
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(nwCatSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fwCat.setEditable(false);
        fwSelectedCatID.setVisible(false);
        index.setVisible(false);

        insert.setText("Insert Into DataBase");
        insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout savePanelLayout = new javax.swing.GroupLayout(savePanel);
        savePanel.setLayout(savePanelLayout);
        savePanelLayout.setHorizontalGroup(
            savePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(savePanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(insert, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        savePanelLayout.setVerticalGroup(
            savePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, savePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(insert, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(savePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(savePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(148, Short.MAX_VALUE))
        );

        jPanel2.setVisible(false);
        savePanel.setVisible(false);
    }// </editor-fold>//GEN-END:initComponents

    private void fromWarehouseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fromWarehouseItemStateChanged
        try {
            
            
            LocationBean l = (LocationBean) fromWarehouse.getSelectedItem();
            productsList = cpfw.getProductByLocation(l.getId());
            prodByCate = cpfw.getProdByLocation();
            catinfoFW = m_dlSales.getCategoriesListByParent(l.getId());
            reset();  
            newWarehouse.setVisible(true);
            jScrollPane2.setVisible(true);
            catList = new JFlowPanel();
            
            catList.applyComponentOrientation(getComponentOrientation());

            Set<String> cIds = prodByCate.keySet();
            Collection c = cIds;
            List list = new ArrayList();
            list.addAll(c);
            

            for (int i = 0; i <
                    list.size(); i++) {

               // AppUser user = (AppUser) people.get(i);
               
                Object obj1 = new StaticSentence(m_App.getSession(), "SELECT NAME FROM categories WHERE ID=? ", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find(list.get(i));
                if(obj1!=null)
                {
                    
                    
                JButton btn = new JButton(new AppUserAction(obj1.toString(),list.get(i).toString(), i));
               
                
                btn.setBackground(Color.red);
                btn.applyComponentOrientation(getComponentOrientation());
                btn.setFocusPainted(false);
                btn.setFocusable(false);
                btn.setRequestFocusEnabled(false);
                btn.setHorizontalAlignment(SwingConstants.LEADING);
                btn.setMaximumSize(new Dimension(150, 50));
                btn.setPreferredSize(new Dimension(150, 50));
                btn.setMinimumSize(new Dimension(150, 50));

                catList.add(btn);
                }
            }

            jScrollPane2.getViewport().setView(catList);

    
             
            
            
        } catch (BasicException ex) {
            Logger.getLogger(CreateProductsForWarehouse.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fromWarehouseItemStateChanged

    private void newWarehouseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_newWarehouseItemStateChanged
        try {
           jScrollPane2.setVisible(true);
            catinfoTW = m_dlSales.getCategoriesListByParent(((LocationBean)newWarehouse.getSelectedItem()).getId());
            
            
           
            
        } catch (BasicException ex) {
            Logger.getLogger(CreateProductsForWarehouse.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_newWarehouseItemStateChanged

    private void cancel()
    {
        fwSelectedCatID.setText(null);
        index.setText(null);
        fwCat.setText(null);
       // nwCatSelect.setModel(null);
        jPanel1.setVisible(true);
        jPanel2.setVisible(false);
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       cancel();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     
      CategoryInfo newSelectedCategory =   (CategoryInfo) nwCatSelect.getSelectedItem();
      String fwSelCatId = fwSelectedCatID.getText();
      List<ProductInfoExt> newIDchangedCate = new ArrayList<ProductInfoExt>();
      LocationBean old = (LocationBean) fromWarehouse.getSelectedItem();
      String oldPrefix = old.getPrefix();
      LocationBean newB = (LocationBean) newWarehouse.getSelectedItem();
      String newPrefix = newB.getPrefix();
      
     List<ProductInfoExt> changeCategory =  prodByCate.get(fwSelCatId);
     if(changeCategory!=null)
     {
        for (Iterator<ProductInfoExt> it = changeCategory.iterator(); it.hasNext();) {
            ProductInfoExt productInfoExt = it.next();
            productInfoExt.setCategoryID(newSelectedCategory.getID());
            productInfoExt.setID(UUID.randomUUID().toString());
            productInfoExt.setReference( productInfoExt.getReference().replace(oldPrefix, newPrefix));
            productInfoExt.setCode(productInfoExt.getCode().replace(oldPrefix, newPrefix));
           // productInfoExt.setTaxCategoryInfo((TaxCategoryInfo) jComboBox1.getSelectedItem());
             productInfoExt.setWarehouse(newB.getId());
            
            newIDchangedCate.add(productInfoExt);
        }
         prodByCate.remove(fwSelCatId);
        
        if(newProdByCate.get(newSelectedCategory.getID())==null)
        {
             newProdByCate.put(newSelectedCategory.getID(), newIDchangedCate);
        }
        else
        {
            Collection collList = newIDchangedCate;
            newProdByCate.get(newSelectedCategory.getID()).addAll(collList);
            
        }
        
     
      if( !savePanel.isVisible())
      {
      ((JButton) catList.getComponent(Integer.parseInt(index.getText()))).setBackground(Color.GREEN);
      jScrollPane2.getViewport().setView(catList);
      
        for (int i = 0; i < catList.getComponentCount(); i++) {
             if(catList.getComponent(i).getBackground()==Color.GREEN)
             {
                // if(i==catList.getComponentCount()-1)
               //  {
                     savePanel.setVisible(true);
                     break;
                  
               //  }
             }
             
        }}
     }
     else
     {
         JOptionPane.showMessageDialog(null, "Cannot Edit!! Please exit and login again to do changes.", "Error", JOptionPane.ERROR_MESSAGE);
     }
      cancel();
      
      
    }//GEN-LAST:event_jButton1ActionPerformed

    private void insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertActionPerformed
        
         List<ProductInfoExt> all = new ArrayList<ProductInfoExt>();
        for (Map.Entry<String, List<ProductInfoExt>> entry :  newProdByCate.entrySet()) {
            String string = entry.getKey();
            Collection cAll = entry.getValue();
            all.addAll(cAll);
        }
        int x = 0;
        int y = 0;
        for (Iterator<ProductInfoExt> it = all.iterator(); it.hasNext();) {
             try {
                 ProductInfoExt sp = it.next();
                 Object [] params = new Object[]{sp.getID(), sp.getReference(), sp.getCode(), sp.getName(), sp.isCom(), sp.isScale(), sp.getPriceBuy(), sp.getPriceSell(), sp.getCategoryID(), sp.getTaxCategoryID(), sp.getImage(), null, null, true, null,  sp.getProperties(),
                     sp.getPRCategory(), sp.getUnitType(), sp.getsAccount(), sp.getCategoryID(), sp.getWarehouse(), sp.isIsStockMaintainRequired(), null, null, null, null};
                //Datas[] productcatDatas = new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING, Datas.STRING, Datas.BOOLEAN, Datas.BOOLEAN, Datas.DOUBLE, Datas.DOUBLE, Datas.STRING, Datas.STRING, Datas.IMAGE, Datas.DOUBLE, Datas.DOUBLE, Datas.BOOLEAN, Datas.INT, Datas.BYTES, Datas.STRING, Datas.STRING, Datas.STRING, Datas.STRING, Datas.STRING, Datas.STRING, Datas.BOOLEAN, Datas.INT, Datas.INT, Datas.INT, Datas.INT};
                 Datas[] productcatDatas = new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING, Datas.STRING, Datas.BOOLEAN, Datas.BOOLEAN, Datas.DOUBLE, Datas.DOUBLE, Datas.STRING, Datas.STRING, Datas.IMAGE, Datas.DOUBLE, Datas.DOUBLE, Datas.BYTES, Datas.STRING, Datas.STRING, Datas.STRING, Datas.STRING,  Datas.STRING, Datas.BOOLEAN, Datas.INT, Datas.INT, Datas.INT, Datas.INT};
                  
                 
                 
                 
                 Object [] v = new Object[]{sp.getID(), sp.getReference(), sp.getCode(), sp.getName(), sp.isCom(), sp.isScale(), sp.getPriceBuy(), sp.getPriceSell(), sp.getCategoryID(), sp.getTaxCategoryID(), sp.getImage(), null, null,null,
                     sp.getPRCategory(), sp.getUnitType(), sp.getAccount(), sp.getsAccount(), ((LocationBean) newWarehouse.getSelectedItem()).getId(), sp.isIsStockMaintainRequired(), null, null, null, null};
                // , new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26}
                 int i = new PreparedSentence(m_App.getSession(), "INSERT INTO PRODUCTS (ID, REFERENCE, CODE, NAME, ISCOM, ISSCALE, PRICEBUY, PRICESELL, CATEGORY, TAXCAT, IMAGE, STOCKCOST, STOCKVOLUME, ATTRIBUTES, "
                         + "PRCATEGORY,UNITTYPE,PACCOUNT,SACCOUNT,LOCATION,INVENTRYMAINTAIN,MAXSTOCKLEVEL,MINSTOCKLEVEL,REORDERLEVEL,REORDERQUANTITY) VALUES (?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)", 
                         new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING, Datas.STRING, Datas.BOOLEAN, Datas.BOOLEAN, Datas.DOUBLE, Datas.DOUBLE, Datas.STRING, Datas.STRING, Datas.IMAGE, Datas.DOUBLE, Datas.DOUBLE, Datas.BYTES,
                             Datas.STRING, Datas.STRING, Datas.STRING,Datas.STRING,Datas.STRING,  Datas.BOOLEAN, Datas.INT, Datas.INT, Datas.INT, Datas.INT})).exec(v);
                 x =x+ new PreparedSentence(m_App.getSession(), "INSERT INTO PDT_PRCAT (ID,PRCAT,CATEGORY) VALUES (?,?,?)",  new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING})).exec(new Object[]{sp.getID(), sp.getPRCategory(),((LocationBean) newWarehouse.getSelectedItem()).getId() });
                    
                  y =y+ new PreparedSentence(m_App.getSession(), "INSERT INTO PRODUCTS_CAT (PRODUCT, CATORDER) VALUES (?, ?)",  new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING})).exec(new Object[]{sp.getID(), null});
                     
             } catch (BasicException ex) {
                 Logger.getLogger(CreateProductsForWarehouse.class.getName()).log(Level.SEVERE, null, ex);
                 
             }
                
            
            
        }
        newProdByCate.clear();
        JOptionPane.showMessageDialog(null, "Total Products Created = "+x, "Success", JOptionPane.INFORMATION_MESSAGE);
       
        
    }//GEN-LAST:event_insertActionPerformed

    private void fromWarehouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromWarehouseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fromWarehouseActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox fromWarehouse;
    private javax.swing.JTextField fwCat;
    private javax.swing.JLabel fwSelectedCatID;
    private javax.swing.JLabel index;
    private javax.swing.JButton insert;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox newWarehouse;
    private javax.swing.JComboBox nwCatSelect;
    private javax.swing.JPanel savePanel;
    // End of variables declaration//GEN-END:variables

    public String getTitle() {
        return ""; //To change body of generated methods, choose Tools | Templates.
    }

    public void activate() throws BasicException {
        reset();
        cp = CreateProductsForWarehouseModel.loadinstance(m_App);
        this.lbList = cp.getLB();
        cbvm = new ComboBoxValModel(lbList);
        fromWarehouse.setModel(cbvm);
        fromWarehouse.setSelectedItem(null);
        
        cbvmA = new ComboBoxValModel(lbList);
        newWarehouse.setModel(cbvmA);
        newWarehouse.setSelectedItem(null);
        
        loaddata();
    }

    public boolean deactivate() {
        return true; //To change body of generated methods, choose Tools | Templates.
    }

    public JComponent getComponent() {
        return this; //To change body of generated methods, choose Tools | Templates.
    }

    public void init(AppView app) throws BeanFactoryException {
        this.m_App = app;
        this.session = app.getSession();
         cpfw = new CreateProductsForWarehouseModel();
         cpfw.init(session);
          m_dlSales = (DataLogicSales) app.getBean("com.openbravo.pos.forms.DataLogicSalesCreate");
    }

    public Object getBean() {
        return this;
    }

    private void loaddata() {
        
        
    }

    private void reset() {
       
        
        newWarehouse.setSelectedIndex(0);
     
        jPanel2.setVisible(false);
        fwCat.setText(null);
        List reset = new ArrayList();
        ComboBoxValModel res = new ComboBoxValModel(reset);
        nwCatSelect.setModel(res);
        jScrollPane2.getViewport().setView(null);
        jScrollPane2.setVisible(false);
        fwSelectedCatID.setText(null);
        index.setText(null);
        savePanel.setVisible(false);
        newWarehouse.setVisible(false);
    }
    
     private class AppUserAction extends AbstractAction
     {
         String id = null;
         String name = null;
         int inde = 0;
        private AppUserAction(String toString, String toString0, int i) {
             putValue(Action.NAME, toString);
             id = toString0;
             name = toString;
             inde = i;
        }
         
        
         
        public void actionPerformed(ActionEvent e) {
            
            
           
         
            if(!((LocationBean)fromWarehouse.getSelectedItem()).getId().equals(((LocationBean)newWarehouse.getSelectedItem()).getId()))
            {
            fwCat.setText(name);
            cbvmB = new ComboBoxValModel(catinfoTW);
            
            nwCatSelect.setModel(cbvmB);
            nwCatSelect.setSelectedItem(null);
            
            jPanel2.setVisible(true);
            fwSelectedCatID.setText(id);
            index.setText(inde+"");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "From Warehouse and To Warehouse cannot be same..", "Same Warehouse", JOptionPane.ERROR_MESSAGE);
                jPanel2.setVisible(false);
            }
            
        }
     }
}
