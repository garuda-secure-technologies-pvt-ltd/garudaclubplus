/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.Accounts;

import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.gui.MessageInf;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.PreparedSentence;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerReadClass;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.pos.Accounts.DivisionalAccountMaster.DivisionMasterBean;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author user
 */
public class DivisionAccountsLinking extends javax.swing.JPanel implements JPanelView,BeanFactoryApp {

    /**
     * Creates new form DivisionAccountsLinking
     */
    private AppView m_App;
    private ComboBoxValModel divModel;
    private ComboBoxValModel accModel;
    private DataLogicFacilities dlfac;
    private final static String[] TABLEHEADERS = {"Account Name"};
    private List<AccountMasterExt> divAccountList;
    
    public DivisionAccountsLinking() {
        initComponents();
    }
    
     public void activate() throws BasicException {
         reset();
         load();
        
         //To change body of generated methods, choose Tools | Templates.
    }
     
     public void init(AppView app) throws BeanFactoryException {
         //To change body of generated methods, choose Tools | Templates.
         m_App=app;
       dlfac=(DataLogicFacilities) app.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");
    }

     public void load()
     {
         List<AccountMasterExt> sacclist = new ArrayList<AccountMasterExt>();
         Collection<AccountMasterExt> pCList;
         
         
        try {
            if(!jCheckBox1.isSelected())
            {
            sacclist=new StaticSentence(m_App.getSession(), "SELECT A.ID,A.NAME,A.SEARCHKEY,A.TYPE_,A.SIGN,A.SUMMARY,A.PARENT,A.EDITABLE FROM ACCOUNTMASTER A WHERE  LEVEL_='S' AND ACTIVE=TRUE AND A.ID NOT IN(SELECT AMID FROM divisionalaccountlink WHERE ACTIVE IS TRUE)ORDER BY A.NAME", SerializerWriteString.INSTANCE, new SerializerReadClass(AccountMasterExt.class)).list();
            pCList = getCategories(false);
            }
            else
            {
                sacclist=dlfac.getaccounts();
                pCList = getCategories(true);
            }
            
            
            List<DivisionMasterBean> divList = new StaticSentence(m_App.getSession(), "SELECT dam.ID, dam.NAME, dam.ACTIVE, dam.CRBY, dam.CRDATE, count(dal.divid) as totlinkcount from divisionalaccountmaster dam left join divisionalaccountlink dal on (dam.id = dal.divid and dal.active is true) where dam.active is true group by dam.id"
                   ,SerializerWriteString.INSTANCE
                   ,new SerializerReadClass( DivisionMasterBean.class )).list();
            
            sacclist.addAll(pCList);
             accModel=new ComboBoxValModel(sacclist);
             divModel = new ComboBoxValModel(divList);
             jComboBox1.setModel(accModel);
             jComboBox2.setModel(divModel);
             jComboBox3.setModel(divModel);
             jComboBox3.setSelectedIndex(-1);
        } catch (BasicException ex) {
            Logger.getLogger(DivisionAccountsLinking.class.getName()).log(Level.SEVERE, null, ex);
            new MessageInf(ex).show(getParent());
        }
     }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        ShowAll = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();

        jLabel1.setText("Select Account");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Select Division");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jCheckBox1.setText("Show All");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, 285, Short.MAX_VALUE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox1)))
                .addContainerGap(167, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(299, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Linking", jPanel2);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setText("Select Division");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });

        ShowAll.setText("Show both Active and Deactive linked accounts");
        ShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAllActionPerformed(evt);
            }
        });

        jButton2.setText("Deactivate");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ShowAll)
                .addContainerGap(133, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ShowAll))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(146, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Division Wise Accounts", jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        load();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            AccountMasterExt ame = (AccountMasterExt) accModel.getSelectedItem();
            DivisionMasterBean dmb = (DivisionMasterBean) divModel.getSelectedItem();
            boolean save = false;
            
            Object obj[] = (Object[]) new StaticSentence(m_App.getSession(), "SELECT count(*) FROM divisionalaccountlink WHERE amid=? and active is true ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.INT})).find(ame.getid());
            if(obj==null)
            {
                save = true;
            }
            else
            {
             
                if(obj[0]!=null)
                {
                
                 if(Integer.parseInt(obj[0].toString())>0)
                 {
                if(JOptionPane.showConfirmDialog(this, "This account is already linked with another division. Do you want to deactivate linking with old division??", "Already Linked", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
                {
                                      Object[] value = new Object[]{m_App.getAppUserView().getUser().getName(), new Date(), m_App.getProperties().getHost(), ame.getid()};
                                      int i =   new PreparedSentence(m_App.getSession(), "update divisionalaccountlink set ACTIVE = false, DEACBY = ?,  DEACDATE = ?,  DEACHOST= ? where amid = ? and active is true", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.TIMESTAMP, Datas.STRING,Datas.STRING})).exec(value);
                                      if(i>0)
                                      {
                                         save = true; 
                                      }
                }
                 }
                 else
                 {
                     save = true;  
                 }
                }
                else
                {
                    save = true; 
                }
                    
            }
            
            
            if(save)
            {
            Object[] value = new Object[]{UUID.randomUUID().toString(), dmb.getId(), ame.getid(), true, m_App.getAppUserView().getUser().getName(), new Date(), m_App.getProperties().getHost(), ame.getSign()};
                                      int i =   new PreparedSentence(m_App.getSession(), "INSERT INTO divisionalaccountlink(ID, DIVID, AMID, ACTIVE, CRBY, CRDATE, CRHOST, ACCORPROD) VALUES (?,?,?,?,?,?,?,?)", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING, Datas.BOOLEAN,Datas.STRING, Datas.TIMESTAMP, Datas.STRING,Datas.STRING})).exec(value);
                            //sanj
                                      if(i>0)
                                      {
                                           JOptionPane.showMessageDialog(this, "Saved Successfully", "Saved", JOptionPane.INFORMATION_MESSAGE);
                                           activate();
                                      }
                                      else
                                      {
                                          JOptionPane.showMessageDialog(this, "Unable to save", "Unable to save", JOptionPane.INFORMATION_MESSAGE);
                                      }
            }
        
        
        } catch (BasicException ex) {
            Logger.getLogger(DivisionAccountsLinking.class.getName()).log(Level.SEVERE, null, ex);
            new MessageInf(ex).show(getParent());
        }
                                    
       
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAllActionPerformed
        loadTable();
    }//GEN-LAST:event_ShowAllActionPerformed

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        
        loadTable();
        
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    int row = jTable1.getSelectedRow();
        if(row!=-1) 
        {
        try {
            AccountMasterExt amExt = divAccountList.get(row);
            DivisionMasterBean amd = (DivisionMasterBean) jComboBox3.getSelectedItem();
            
           List obj = (List) new StaticSentence(m_App.getSession(), "SELECT active FROM divisionalaccountlink WHERE amid=? and divid = ? ",new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING}), SerializerReadString.INSTANCE).list(new Object[]{amExt.getid(), amd.getId()});
            
            if(obj!=null && obj.get(0)!=null )
            {
                boolean b = false;
                
                for(int i = 0; i<obj.size(); i++)
                {
                    if(obj.get(i)!=null)
                    {
                        if(obj.get(i).equals("1"))
                        {b = true;
                         break;
                        }else
                        {   b = false;
                        }
                        
                    }
                }
                
                if(b)
                {
                 if(JOptionPane.showConfirmDialog(this, "Do you want to deactivate the selected account from selected division??", "Confirm", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
                 {
                     Object[] value = new Object[]{m_App.getAppUserView().getUser().getName(), new Date(), m_App.getProperties().getHost(), amExt.getid(), amd.getId()};
                                      int i =   new PreparedSentence(m_App.getSession(), "update divisionalaccountlink set ACTIVE = false, DEACBY = ?,  DEACDATE = ?,  DEACHOST= ? where amid = ? and divid = ? and active is true", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.TIMESTAMP, Datas.STRING,Datas.STRING,Datas.STRING})).exec(value);
                 
                                       if(i>0)
                                      {
                                           JOptionPane.showMessageDialog(this, "Deactivated Successfully", "Saved", JOptionPane.INFORMATION_MESSAGE);
                                           //activate();
                                           jComboBox3.setSelectedItem(amd);
                                           loadTable();
                                      }
                                      
                 }
                    
                    
                    
                    
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "Selected Account already deactivated with selected Division. Please uncheck check box to see only active accounts. ", "Select Row", JOptionPane.PLAIN_MESSAGE); 
                }
                
                
                
                
                
            }
        
        
        } catch (BasicException ex) {
            Logger.getLogger(DivisionAccountsLinking.class.getName()).log(Level.SEVERE, null, ex);
        }
           
            
            
            
        }
         else
        {
            
            JOptionPane.showMessageDialog(this, "Please select a row then press Deactivate button", "Select Row", JOptionPane.PLAIN_MESSAGE);
        }
            
            
            
            // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ShowAll;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public String getTitle() {
       return "Division Link";//To change body of generated methods, choose Tools | Templates.
    }

   

    public boolean deactivate() {
       return true; //To change body of generated methods, choose Tools | Templates.
    }

    public JComponent getComponent() {
        return this; //To change body of generated methods, choose Tools | Templates.
    }

    
    public Object getBean() {
        return this; //To change body of generated methods, choose Tools | Templates.
    }

    private void reset() {
        
        jCheckBox1.setSelected(false);
        //To change body of generated methods, choose Tools | Templates.
    }
    
    public AbstractTableModel getTableModel() {
        return new AbstractTableModel() {
            @Override
            public String getColumnName(int column) {
                
                  return AppLocal.getIntString(TABLEHEADERS[column]);
               
            }
            public int getRowCount() {
                return divAccountList.size();
            }
            public int getColumnCount() {
               
                 return TABLEHEADERS.length;
            }
            public Object getValueAt(int row, int column) {
                AccountMasterExt l = divAccountList.get(row);

                switch (column) {

                case 0: return l.getName();
               // case 1: return l.getrperiod();
                    
                   
                default: return null;
                }
            }
        };
    }

    private void loadTable() {
        try {
            DivisionMasterBean dmBean = (DivisionMasterBean) jComboBox3.getSelectedItem();
            Collection<AccountMasterExt> ma;
            if(ShowAll.isSelected())
            {
         ma = getSelectedCategories(dmBean.getId(), true);
            }
            else
            {
             ma = getSelectedCategories(dmBean.getId(), false);
            }
            if(!ShowAll.isSelected())
             {
                divAccountList =  new StaticSentence(m_App.getSession(), "SELECT A.ID,A.NAME,A.SEARCHKEY,A.TYPE_,A.SIGN,A.SUMMARY,A.PARENT,A.EDITABLE FROM ACCOUNTMASTER A WHERE  LEVEL_='S' AND ACTIVE=TRUE AND A.ID  IN(SELECT AMID FROM divisionalaccountlink WHERE ACTIVE IS TRUE and divid = ?)ORDER BY A.NAME",new SerializerWriteBasic(new Datas[]{Datas.STRING}), new SerializerReadClass(AccountMasterExt.class)).list(new Object[]{dmBean.getId()});
                
             }
            else
            {
                divAccountList =  new StaticSentence(m_App.getSession(), "SELECT A.ID,A.NAME,A.SEARCHKEY,A.TYPE_,A.SIGN,A.SUMMARY,A.PARENT,A.EDITABLE FROM ACCOUNTMASTER A WHERE  LEVEL_='S' AND ACTIVE=TRUE AND A.ID IN(SELECT AMID FROM divisionalaccountlink WHERE divid = ?)ORDER BY A.NAME", new SerializerWriteBasic(new Datas[]{Datas.STRING}), new SerializerReadClass(AccountMasterExt.class)).list(new Object[]{dmBean.getId()});
            }
        
          divAccountList.addAll(ma);
            
        jTable1.setModel(getTableModel());
        
        } catch (BasicException ex) {
            Logger.getLogger(DivisionAccountsLinking.class.getName()).log(Level.SEVERE, null, ex);
            new MessageInf(ex).show(getParent());
        } //To change body of generated methods, choose Tools | Templates.
    }

    private Collection<AccountMasterExt> getCategories(boolean b) {
        
        List<Object [] > list = new ArrayList<Object[]>();
        try {
        
            if(b)
            {
           list = new StaticSentence(m_App.getSession(), "SELECT ID, NAME, PARENTID, LOCATION from categories ORDER BY NAME", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING})).list();
            }
            else
            {
                list = new StaticSentence(m_App.getSession(), "SELECT ID, NAME, PARENTID, LOCATION from categories WHERE ID NOT IN (SELECT AMID FROM divisionalaccountlink WHERE ACTIVE IS TRUE) ORDER BY NAME", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING})).list();
            }
            } catch (BasicException ex) {
            Logger.getLogger(DivisionAccountsLinking.class.getName()).log(Level.SEVERE, null, ex);
            new MessageInf(ex).show(getParent());
            }
        Collection<AccountMasterExt> temp = new ArrayList<AccountMasterExt>();
        for (Iterator<Object[]> it = list.iterator(); it.hasNext();) {
            Object[] o = it.next();
            AccountMasterExt ame = new AccountMasterExt();
            ame.setId(o[0].toString());
            ame.setSearchkey(o[1].toString());
            ame.setName("PC-"+o[1].toString());
            if(o[2]!=null)
            {
            ame.setParent(o[2].toString());
            }
            else
            {
                 ame.setParent("");
            }
            ame.setType(o[3].toString());
            ame.setSign("Products");
            temp.add(ame);
            
        }
        return temp;
        
    }

    private Collection<AccountMasterExt> getSelectedCategories(String id, boolean b) {
        Collection<AccountMasterExt> temp = new ArrayList<AccountMasterExt>();
        List<Object [] > list = new ArrayList<Object[]>();
        try {
            
            if(!b)
            {
            list = new StaticSentence(m_App.getSession(), "SELECT ID, NAME, PARENTID, LOCATION from categories WHERE ID IN (SELECT AMID FROM divisionalaccountlink WHERE ACTIVE is true AND DIVID = ? ) ORDER BY NAME", new SerializerWriteBasic(new Datas[]{Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING})).list(new Object[]{id});
            }
            else
            {
                list = new StaticSentence(m_App.getSession(), "SELECT ID, NAME, PARENTID, LOCATION from categories WHERE ID IN (SELECT AMID FROM divisionalaccountlink WHERE DIVID = ? ) ORDER BY NAME", new SerializerWriteBasic(new Datas[]{Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING})).list(new Object[]{id});
            }
            } catch (BasicException ex) {
            Logger.getLogger(DivisionAccountsLinking.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Iterator<Object[]> it = list.iterator(); it.hasNext();) {
            Object[] o = it.next();
            AccountMasterExt ame = new AccountMasterExt();
            ame.setId(o[0].toString());
            ame.setSearchkey(o[1].toString());
            ame.setName("PC-"+o[1].toString());
            if(o[2]!=null)
            {
            ame.setParent(o[2].toString());
            }
            else
            {
                 ame.setParent("");
            }
            ame.setType(o[3].toString());
            ame.setSign("Products");
            temp.add(ame);
            
        }
        return temp;
    }

}
