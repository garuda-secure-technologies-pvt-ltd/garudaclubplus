/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jBRStatement.java
 *
 * Created on Jun 7, 2012, 10:19:37 AM
 */
package com.openbravo.pos.Accounts;

import com.openbravo.basic.BasicException;
import com.openbravo.beans.JCalendarDialog;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.format.Formats;
//import com.openbravo.pos.Accounts.jBRStatementModel.jBRStatements;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.clubmang.DataSourceProvider;
import com.openbravo.pos.clubmang.JRBasicField;
import com.openbravo.pos.clubmang.JasperReportNew;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import com.openbravo.pos.util.JRViewer300;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javax.swing.JComboBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRField;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.convert.SubreportConverter;

/**
 *
 * @author user
 */
public class jBRStatement extends javax.swing.JPanel implements JPanelView, BeanFactoryApp  {
    private jBRStatementModel dmodel;
     private AppView mapps;
      private ComboBoxValModel fModel;
    private List<BankReconcilation> details;
     
       private waitDialog w;
    private DataLogicFacilities dlfac;
    private String accid;
     private jBRStatementModel dmodels;
      Date fdate;
 private String chequeaccount;
    private JRViewer300 reportviewer = null;

   ArrayList al = new ArrayList();

    /** Creates new form jBRStatement */
    public jBRStatement() {
        initComponents();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
  //  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        debttotal = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(){public Component prepareRenderer(TableCellRenderer renderer,
            int rowIndex, int vColIndex) {
            Component c = super.prepareRenderer(renderer, rowIndex, vColIndex);
            if (c instanceof JComponent) {
                JComponent jc = (JComponent)c;
                jc.setToolTipText(String.valueOf(getValueAt(rowIndex, vColIndex)));

                if (rowIndex % 2 == 0 && !isCellSelected(rowIndex, vColIndex)) {
                    jc.setBackground(Color.lightGray);
                }
                else {
                    jc.setBackground(Color.white);
                }
                if(isCellSelected(rowIndex, vColIndex))
                jc.setBackground(Color.cyan);
            }
            return c;
        }};
        jTextField3 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable(){public Component prepareRenderer(TableCellRenderer renderer,
            int rowIndex, int vColIndex) {
            Component c = super.prepareRenderer(renderer, rowIndex, vColIndex);
            if (c instanceof JComponent) {
                JComponent jc = (JComponent)c;
                jc.setToolTipText(String.valueOf(getValueAt(rowIndex, vColIndex)));

                if (rowIndex % 2 == 0 && !isCellSelected(rowIndex, vColIndex)) {
                    jc.setBackground(Color.lightGray);
                }
                else {
                    jc.setBackground(Color.white);
                }
                if(isCellSelected(rowIndex, vColIndex))
                jc.setBackground(Color.cyan);
            }
            return c;
        }};
        jTextField4 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        print = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();

        jLabel1.setText("Bank Reconcillation Statement as on");
        jLabel1.setName("jLabel1"); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.setName("jComboBox1"); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Balance as per Ledger");
        jLabel2.setName("jLabel2"); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/date.png"))); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Less: Deposit but not Credited by Bank");
        jLabel3.setName("jLabel3"); // NOI18N

        debttotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        debttotal.setName("debttotal"); // NOI18N
        debttotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debttotalActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "LedgerDate", "NARRATION", "Amount", "BankDate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        jTextField3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField3.setName("jTextField3"); // NOI18N

        jButton2.setText("Execute");
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Add: Withdrawal not effected in Bank");
        jLabel4.setName("jLabel4"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "LedgerDate", "NARRATION", "Amount", "BankDate"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setName("jTable2"); // NOI18N
        jScrollPane2.setViewportView(jTable2);

        jTextField4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField4.setName("jTextField4"); // NOI18N

        jButton3.setText("Execute");
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Balance as per Bank Statement");
        jLabel5.setName("jLabel5"); // NOI18N

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1.setName("jTextField1"); // NOI18N
        jTextField1.setPreferredSize(new java.awt.Dimension(71, 23));

        jButton4.setText("Execute");
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        print.setText("Print");
        print.setName("print"); // NOI18N
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        jLabel6.setText("Select Date :");
        jLabel6.setName("jLabel6"); // NOI18N

        jTextField2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField2.setName("jTextField2"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                .addContainerGap(404, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addContainerGap(560, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, 0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, 0, 401, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(debttotal, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(jTextField2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4))
                        .addGap(94, 94, 94))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(debttotal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(print)
                .addContainerGap(107, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Date date;
        try {
            date = (Date) Formats.DATE.parseValue(jTextField2.getText());
        } catch (BasicException e) {
            date = null;
        }
        date = JCalendarDialog.showCalendar(this, date);
        if (date != null) {
            jTextField2.setText(Formats.DATE.formatValue(date));
         //  Formats.setDatePattern("yyyy-MM-dd");
         //   jTextField2.setText(Formats.DATE.formatValue(date));
          //  Formats.setDatePattern("");
           
        }
          double balance=0.0;
    if (jComboBox1.getSelectedIndex() != -1) {
        
         if (jTextField2.getText().isEmpty() == true ) {
            JOptionPane.showMessageDialog(null, "Please Enter date");

        }
         else if (jTextField2.getText().isEmpty() == false ){
             if(jComboBox1.getSelectedItem()!= null)
              try {
             Object  accid1 =  jComboBox1.getSelectedItem();
                accid = accid1.toString();
                fdate = (Date) Formats.DATE.parseValue(jTextField2.getText());
               fdate=getSecondDate(jTextField2.getText());//by pratima
            Object[] obj1 = (Object[]) new StaticSentence(mapps.getSession(), "SELECT id FROM accountmaster WHERE ACTIVE = TRUE AND NAME=? ", new SerializerWriteBasic(new Datas[]{Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING})).find(new Object[]{accid});
                              
                accid= obj1[0].toString();
                dmodels = jBRStatementModel.loadInstance(mapps, accid, fdate);
               
              Object[] obj = (Object[]) new StaticSentence(mapps.getSession()
                          , 
                      //"select((SELECT SUM(AMOUNT) FROM ACCOUNTJOURNAL a join accountmaster am on am.id=a.accountid WHERE a.accountid=? and a.DATE<?  AND a.TRANSTYPE='D' AND a.ACTIVE=TRUE)-(SELECT SUM(AMOUNT) FROM ACCOUNTJOURNAL a join accountmaster am on am.id=a.accountid WHERE a.accountid=? and a.DATE<?  AND a.TRANSTYPE='c' AND a.ACTIVE=TRUE))FROM APPLICATIONS"
                       "SELECT ((SELECT SUM(AMOUNT) FROM ACCOUNTJOURNAL a join accountmaster am on am.id=a.accountid WHERE a.accountid=? and a.DATE<=?  AND a.TRANSTYPE='D' AND a.ACTIVE=TRUE)-(SELECT SUM(AMOUNT) FROM ACCOUNTJOURNAL a join accountmaster am on am.id=a.accountid WHERE a.accountid=? and a.DATE<=? AND a.TRANSTYPE='C' AND a.ACTIVE=TRUE)) FROM APPLICATIONS "
                              , new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.TIMESTAMP,Datas.STRING, Datas.TIMESTAMP})
                                , new SerializerReadBasic(new Datas[]{Datas.DOUBLE})).find(new Object[]{accid,fdate,accid,fdate});
           
             if(obj[0]!=null)
           balance=Double.parseDouble(obj[0].toString());
        
          }
            
   catch (BasicException ex) {
                Logger.getLogger(jBRStatement.class.getName()).log(Level.SEVERE, null, ex);
            }
        //  debttotal.setText(String.valueOf(BigDecimal.valueOf(balance).toPlainString()));
        debttotal.setText(String.valueOf(new DecimalFormat("####0.00").format(BigDecimal.valueOf(balance).doubleValue())));
         
        
    }
        
    }
}//GEN-LAST:event_jButton1ActionPerformed

private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

    // TODO add your handling code here:
}//GEN-LAST:event_jComboBox1ActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

    double bs=0.00;
    
    
    if (jTextField2.getText().isEmpty() == true ) {
            JOptionPane.showMessageDialog(null, "Please Enter date");

        }
    
    else if (jTextField2.getText().isEmpty() == false ){
    
     try {
             Object  accid1 =  jComboBox1.getSelectedItem();
                accid = accid1.toString();
                fdate = (Date) Formats.DATE.parseValue(jTextField2.getText());
                fdate=getSecondDate(jTextField2.getText());//by pratima
            Object[] obj1 = (Object[]) new StaticSentence(mapps.getSession(), "SELECT id FROM accountmaster WHERE ACTIVE = TRUE AND NAME=? ", new SerializerWriteBasic(new Datas[]{Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING})).find(new Object[]{accid});
                              
                accid= obj1[0].toString();
                dmodels = jBRStatementModel.loadInstance(mapps, accid, fdate);
                jTable2.setModel(dmodels.getTableModel1());
         
                  Object[] obj4 = (Object[]) new StaticSentence(mapps.getSession(),
                  // "select((SELECT SUM(AMOUNT) FROM ACCOUNTJOURNAL a join accountmaster am on am.id=a.accountid WHERE a.accountid=? and a.DATE<=?  AND a.TRANSTYPE='D' AND a.ACTIVE=TRUE)-(SELECT SUM(AMOUNT) FROM ACCOUNTJOURNAL a join accountmaster am on am.id=a.accountid WHERE a.accountid=? and a.DATE<= ?  AND a.TRANSTYPE='C' AND a.ACTIVE=TRUE)-(SELECT  sum(a.amount-b.amount)  from bankrecord b, accountjournal a join accountmaster am on am.id=a.accountid where a.accountid=? and a.transtype = 'd' and (b.accid = a.id ) and a.date<=? and (b.bankdate>A.DATE or b.bankdate is null))+(SELECT  sum(a.amount-b.amount)  from bankrecord b, accountjournal a join accountmaster am on am.id=a.accountid where a.accountid=? and a.transtype = 'c' and (b.accid = a.id ) and a.date<=? and (b.bankdate>A.DATE or b.bankdate is null)))"
                   //"select((SELECT  CASE  WHEN a.date<=? and b.bankdate>? or b.bankdate is null  THEN sum(a.amount) WHEN a.date<=? and b.bankdate<=? THEN sum(a.amount-b.amount) ELSE  ''  END  as Ledgeramount from bankrecord b, accountjournal a join accountmaster am on am.id=a.accountid where a.accountid=? and a.transtype = 'd' and (b.accid = a.id )   and a.date<=? and (b.bankdate<=? or b.bankdate>? or b.bankdate is null) order by a.date)-((SELECT SUM(AMOUNT) FROM ACCOUNTJOURNAL a join accountmaster am on am.id=a.accountid WHERE a.accountid=? and a.DATE<=?  AND a.TRANSTYPE='D' AND a.ACTIVE=TRUE)-(SELECT SUM(AMOUNT) FROM ACCOUNTJOURNAL a join accountmaster am on am.id=a.accountid WHERE a.accountid=? and a.DATE<= ?  AND a.TRANSTYPE='C' AND a.ACTIVE=TRUE)) +(SELECT  CASE  WHEN a.date<=? and b.bankdate>? or b.bankdate is null  THEN sum(a.amount) WHEN a.date<=? and b.bankdate<=? THEN sum(a.amount-b.amount) ELSE  ''  END  as Ledgeramount from bankrecord b, accountjournal a join accountmaster am on am.id=a.accountid where a.accountid=? and a.transtype = 'c' and (b.accid = a.id )   and a.date<=? and (b.bankdate<=? or b.bankdate>? or b.bankdate is null) order by a.date))"
                  "select((SELECT SUM(AMOUNT) FROM ACCOUNTJOURNAL a join accountmaster am on am.id=a.accountid WHERE a.accountid=? and a.DATE<=?  AND a.TRANSTYPE='D' AND a.ACTIVE=TRUE)-(SELECT SUM(AMOUNT) FROM ACCOUNTJOURNAL a join accountmaster am on am.id=a.accountid WHERE a.accountid=? and a.DATE<= ?  AND a.TRANSTYPE='C' AND a.ACTIVE=TRUE)-(SELECT sum(CASE  WHEN a.date<=? and b.bankdate>? or b.bankdate is null  THEN (a.amount) WHEN a.date<=? and b.bankdate<=? THEN (a.amount-b.amount)  ELSE  ''  END)  as Ledgeramount from  accountjournal a left join bankrecord b on a.id=b.accid join accountmaster am on am.id=a.accountid where a.accountid=? and a.transtype = 'd' and a.date<=? and a.active=true and (b.bankdate<=? or b.bankdate>? or b.bankdate is null ) order by a.date)+(SELECT sum(CASE  WHEN a.date<=? and b.bankdate>? or b.bankdate is null  THEN (a.amount) WHEN a.date<=? and b.bankdate<=? THEN (a.amount-b.amount)  ELSE  ''  END ) as Ledgeramount from  accountjournal a left join bankrecord b on a.id=b.accid join accountmaster am on am.id=a.accountid where a.accountid=? and a.transtype = 'c' and a.date<=? and a.active=true  and (b.bankdate<=? or b.bankdate>? or b.bankdate is null ) order by a.date))"
                          , new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.TIMESTAMP,Datas.STRING, Datas.TIMESTAMP, Datas.TIMESTAMP, Datas.TIMESTAMP, Datas.TIMESTAMP, Datas.TIMESTAMP,Datas.STRING, Datas.TIMESTAMP, Datas.TIMESTAMP, Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.STRING, Datas.TIMESTAMP,Datas.TIMESTAMP, Datas.TIMESTAMP})
                  , new SerializerReadBasic(new Datas[]{Datas.DOUBLE})).find(new Object[]{accid,fdate,accid,fdate,fdate,fdate,fdate,fdate,accid,fdate,fdate,fdate,fdate,fdate,fdate,fdate,accid,fdate,fdate,fdate});
        
             if(obj4[0]!=null)
         bs=Double.parseDouble(obj4[0].toString());
           
                
               
            } catch (BasicException ex) {
                Logger.getLogger(jBRStatement.class.getName()).log(Level.SEVERE, null, ex);
            }
      //jTextField1.setText(String.valueOf(BigDecimal.valueOf(bs).toPlainString()));
     jTextField1.setText(String.valueOf(new DecimalFormat("####0.00").format(BigDecimal.valueOf(bs).doubleValue())));
     
   
//        jTable2.setAutoResizeMode(jTable2.AUTO_RESIZE_OFF);
DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
    rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
        jTable2.getColumnModel().getColumn(0).setMinWidth(10);
        jTable2.getColumnModel().getColumn(0).setMaxWidth(78);
        jTable2.getColumnModel().getColumn(0).setCellRenderer(tableCellRenderer);
        jTable2.getColumnModel().getColumn(1).setMinWidth(0);
        jTable2.getColumnModel().getColumn(1).setMaxWidth(0);
        jTable2.getColumnModel().getColumn(2).setMinWidth(10);
        jTable2.getColumnModel().getColumn(2).setMaxWidth(355);
        jTable2.getColumnModel().getColumn(3).setMinWidth(0);
        jTable2.getColumnModel().getColumn(3).setMaxWidth(0);
        jTable2.getColumnModel().getColumn(4).setMinWidth(10);
        jTable2.getColumnModel().getColumn(4).setMaxWidth(78);
        jTable2.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(5).setMinWidth(10);
        jTable2.getColumnModel().getColumn(5).setMaxWidth(78);
        jTable2.getColumnModel().getColumn(5).setCellRenderer(tableCellRenderer);
        return;
    }  
    
    
    
    // TODO add your handling code here:
}//GEN-LAST:event_jButton4ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
 double Ctotal=0.00;
    
    
    if (jTextField2.getText().isEmpty() == true ) {
            JOptionPane.showMessageDialog(null, "Please Enter date");

        }
    
    else if (jTextField2.getText().isEmpty() == false ){
    
     try {
             Object  accid1 =  jComboBox1.getSelectedItem();
                accid = accid1.toString();
                fdate = (Date) Formats.DATE.parseValue(jTextField2.getText());
                fdate=getSecondDate(jTextField2.getText());//by pratima
            Object[] obj1 = (Object[]) new StaticSentence(mapps.getSession(), "SELECT id FROM accountmaster WHERE ACTIVE = TRUE AND NAME=? ", new SerializerWriteBasic(new Datas[]{Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING})).find(new Object[]{accid});
                              
                accid= obj1[0].toString();
                dmodels = jBRStatementModel.loadInstance(mapps, accid, fdate);
                jTable2.setModel(dmodels.getTableModel1());
         
                  Object[] obj3 = (Object[]) new StaticSentence(mapps.getSession(),
//                          "SELECT  sum(a.amount-b.amount)  from bankrecord b, accountjournal a join accountmaster am on am.id=a.accountid where a.accountid=? and a.transtype = 'c' and (b.accid = a.id ) and a.date<=? and (b.bankdate>A.DATE or b.bankdate is null)"
//      
//                  , new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.TIMESTAMP})
//                  , new SerializerReadBasic(new Datas[]{Datas.DOUBLE})).find(new Object[]{accid,fdate});
//               
       "SELECT sum(CASE  WHEN a.date<=? and b.bankdate>? or b.bankdate is null  THEN(a.amount) WHEN a.date<=? and b.bankdate<=? THEN (a.amount-b.amount)  ELSE  ''  END)  as Ledgeramount from  accountjournal a left join bankrecord b on a.id=b.accid join accountmaster am on am.id=a.accountid where a.accountid=? and a.transtype = 'c' and a.date<=? and a.active=true  and (b.bankdate<=? or b.bankdate>? or b.bankdate is null ) order by a.date"
                         
                          
                          //"SELECT  CASE  WHEN a.date<=? and b.bankdate>? or b.bankdate is null  THEN sum(a.amount) WHEN a.date<=? and b.bankdate<=? THEN sum(a.amount-b.amount) ELSE  ''  END  as Ledgeramount from bankrecord b, accountjournal a join accountmaster am on am.id=a.accountid where a.accountid=? and a.transtype = 'c' and (b.accid = a.id )   and a.date<=? and (b.bankdate<=? or b.bankdate>? or b.bankdate is null) order by a.date"
                               , new SerializerWriteBasic(new Datas[]{Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.STRING, Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP})
                                , new SerializerReadBasic(new Datas[]{Datas.DOUBLE})).find(new Object[]{fdate,fdate,fdate,fdate,accid,fdate,fdate,fdate});
               
             if(obj3[0]!=null)
          Ctotal=Double.parseDouble(obj3[0].toString());
           
                
               
            } catch (BasicException ex) {
                Logger.getLogger(jBRStatement.class.getName()).log(Level.SEVERE, null, ex);
            }
      jTextField4.setText(String.valueOf(new DecimalFormat("####0.00").format(BigDecimal.valueOf(Ctotal).doubleValue())));
    
//         jTable2.setAutoResizeMode(jTable2.AUTO_RESIZE_OFF);
DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
    rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
        jTable2.getColumnModel().getColumn(0).setMinWidth(10);
        jTable2.getColumnModel().getColumn(0).setMaxWidth(76);
        jTable2.getColumnModel().getColumn(0).setCellRenderer(tableCellRenderer);
        jTable2.getColumnModel().getColumn(1).setMinWidth(0);
        jTable2.getColumnModel().getColumn(1).setMaxWidth(0);
         jTable2.getColumnModel().getColumn(2).setMinWidth(10);
        jTable2.getColumnModel().getColumn(2).setMaxWidth(355);
        jTable2.getColumnModel().getColumn(3).setMinWidth(0);
        jTable2.getColumnModel().getColumn(3).setMaxWidth(0);
       jTable2.getColumnModel().getColumn(4).setMinWidth(10);
        jTable2.getColumnModel().getColumn(4).setMaxWidth(78);
          jTable2.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        jTable2.getColumnModel().getColumn(5).setMinWidth(10);
        jTable2.getColumnModel().getColumn(5).setMaxWidth(78);
        jTable2.getColumnModel().getColumn(7).setCellRenderer(tableCellRenderer);
     
     return;
    }
    
    // TODO add your handling code here:
}//GEN-LAST:event_jButton3ActionPerformed

private void debttotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debttotalActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_debttotalActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        double dtotal=0.0;
    if (jTextField2.getText().isEmpty() == true ) {
            JOptionPane.showMessageDialog(null, "Please Enter date");

        }
    
    else if (jTextField2.getText().isEmpty() == false ){
    
     try {
             Object  accid1 =  jComboBox1.getSelectedItem();
                accid = accid1.toString();
                fdate = (Date) Formats.DATE.parseValue(jTextField2.getText());
                fdate=getSecondDate(jTextField2.getText());//by pratima
            Object[] obj = (Object[]) new StaticSentence(mapps.getSession(), "SELECT id FROM accountmaster WHERE ACTIVE = TRUE AND NAME=? ", new SerializerWriteBasic(new Datas[]{Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING})).find(new Object[]{accid});
                              
                accid= obj[0].toString();
                dmodels = jBRStatementModel.loadInstance(mapps, accid, fdate);
                jTable1.setModel(dmodels.getTableModel());
                
                
                 Object[] obj4 = (Object[]) new StaticSentence(mapps.getSession(),
                         //"SELECT  sum(a.amount-b.amount)  from bankrecord b, accountjournal a join accountmaster am on am.id=a.accountid where a.accountid=? and a.transtype = 'd' and (b.accid = a.id ) and a.date<=? and (b.bankdate>A.DATE or b.bankdate is null)"
                        // "SELECT  CASE  WHEN a.date<=? and b.bankdate>? or b.bankdate is null  THEN sum(a.amount) WHEN a.date<=? and b.bankdate<=? THEN sum(a.amount-b.amount) ELSE  ''  END  as Ledgeramount from bankrecord b, accountjournal a join accountmaster am on am.id=a.accountid where a.accountid=? and a.transtype = 'd' and (b.accid = a.id )   and a.date<=? and (b.bankdate<=? or b.bankdate>? or b.bankdate is null) order by a.date"
                         //  "SELECT CASE  WHEN a.date<=? and b.bankdate>? or b.bankdate is null  THEN sum(a.amount) WHEN a.date<=? and b.bankdate<=? THEN sum(a.amount-b.amount)  ELSE  ''  END  as Ledgeramount from  accountjournal a left join bankrecord b on a.id=b.accid join accountmaster am on am.id=a.accountid where a.accountid=?  and a.transtype = 'd' and a.date<=? and (b.bankdate<=? or b.bankdate>? or b.bankdate is null ) order by a.date"    
                         "SELECT sum(CASE  WHEN a.date<=? and b.bankdate>? or b.bankdate is null  THEN (a.amount) WHEN a.date<=? and b.bankdate<=? THEN (a.amount-b.amount)  ELSE  ''  END)  as Ledgeramount from  accountjournal a left join bankrecord b on a.id=b.accid join accountmaster am on am.id=a.accountid where a.accountid=? and a.transtype = 'd' and a.date<=? and a.active=true and (b.bankdate<=? or b.bankdate>? or b.bankdate is null ) order by a.date"
                         
                         , new SerializerWriteBasic(new Datas[]{Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.STRING, Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP})
                                , new SerializerReadBasic(new Datas[]{Datas.DOUBLE})).find(new Object[]{fdate,fdate,fdate,fdate,accid,fdate,fdate,fdate});
               
          
             if(obj4[0]!=null)
          dtotal=Double.parseDouble(obj4[0].toString());
           
               
            } catch (BasicException ex) {
                Logger.getLogger(jBRStatement.class.getName()).log(Level.SEVERE, null, ex);
            }
      // jTextField3.setText(String.valueOf(BigDecimal.valueOf(dtotal).toPlainString()));
     jTextField3.setText(String.valueOf(new DecimalFormat("####0.00").format(BigDecimal.valueOf(dtotal).doubleValue())));
     
//     
//        jTable1.setAutoResizeMode(jTable1.AUTO_RESIZE_OFF);
DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
    rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
          jTable1.getColumnModel().getColumn(0).setMinWidth(10);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(76);
        jTable1.getColumnModel().getColumn(0).setCellRenderer(tableCellRenderer);
        jTable1.getColumnModel().getColumn(1).setMinWidth(0);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(2).setMinWidth(10);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(355);
        jTable1.getColumnModel().getColumn(3).setMinWidth(0);
        jTable1.getColumnModel().getColumn(3).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(4).setMinWidth(10);
        jTable1.getColumnModel().getColumn(4).setMaxWidth(78);
         jTable1.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        jTable1.getColumnModel().getColumn(5).setMinWidth(10);
        jTable1.getColumnModel().getColumn(5).setMaxWidth(78);
        jTable1.getColumnModel().getColumn(5).setCellRenderer(tableCellRenderer);
        
       
     return;
    }
}//GEN-LAST:event_jButton2ActionPerformed
 private JRField[] getFields1() throws JRException, UnsupportedOperationException {
        JRField[] fields = new JRField[8];
        
        fields[0] = (JRField) new JRBasicField("BankDates", " BankDates", java.util.Date.class, "java.util.Date");
        fields[1] = (JRField) new JRBasicField("Narration", "NARRATION", java.lang.String.class, "java.lang.String");
        fields[2] = (JRField) new JRBasicField("Amount", "Amount", java.lang.Double.class, "java.lang.Double");
        fields[3] = (JRField) new JRBasicField("Dates", "Dates", java.util.Date.class, "java.util.Date");
      


        return fields;
    }
 private JRField[] getFields() throws JRException, UnsupportedOperationException {
        JRField[] fields = new JRField[4];
        
         fields[0] = (JRField) new JRBasicField("BankDates", " BankDates", java.sql.Date.class, "java.util.Date");
        fields[1] = (JRField) new JRBasicField("Narration", "NARRATION", java.lang.String.class, "java.lang.String");
        fields[2] = (JRField) new JRBasicField("Amount", "Amount", java.lang.Double.class, "java.lang.Double");
        fields[3] = (JRField) new JRBasicField("Dates", "Dates", java.sql.Date.class, "java.util.Date");
      return fields;
}
private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
// TODO add your handling code here:
         

            
    try {
        
     
            Map reportparams = new HashMap();
               reportparams.put("companyName",mapps.getSession().getCompanyName());
               reportparams.put("companyAddress",mapps.getSession().getCompanyAddress());
            //  reportparams.put("Date",(Date)Formats.DATE.parseValue(jTextField2.getText()));
             reportparams.put("Date", getSecondDate(jTextField2.getText()));
             // reportparams.put("Date",jTextField2.getText().toString());
            //  reportparams.put("Date", jTextField2.getText().toString());
               reportparams.put("BankName", jComboBox1.getSelectedItem().toString());
               reportparams.put("LedgerBalance", Double.parseDouble(debttotal.getText()));
//                               
              DataSourceProvider data1 = new DataSourceProvider(dmodels.getBreconss());
               data1.setFields(getFields1());
               reportparams.put("BSBalance", Double.parseDouble(jTextField1.getText()));
//              
               DataSourceForjBRStatement ds1 = new  DataSourceForjBRStatement(dmodels.getBreconss());
               DataSourceForjBrStatements ds2 = new DataSourceForjBrStatements(dmodels.getBrecons());
               DataSourceForjBRStatement ds3 = new DataSourceForjBRStatement(dmodels.getBreconss());
               DataSourceForjBrStatements ds4 = new DataSourceForjBrStatements(dmodels.getBrecons());

             reportparams.put("LessDataSource", ds2);
            reportparams.put("AddDataSource", ds1);
            
            
            if(dmodels.getBreconss()!=null && dmodels.getBreconss().size()>0)
              data1.setDataSource(ds3);
            else 
             data1.setDataSource(ds4 );
              try{
               //  JasperPrint jp = JasperReportNew.runReport(mapps, "./reports/com/openbravo/reports/NewC.jrxml", reportparams, false, data1, true, null);
            
               
       
               JasperPrint jp = JasperReportNew.runReport(mapps, "./reports/com/openbravo/reports/New Folder/Mainreport.jrxml", reportparams, false, data1, true, " ");
            
            }catch (Exception ex)
            {
            System.out.println(ex);
            }
          
        } catch (Exception ex) {
           ex.printStackTrace();
        }
    
    
}//GEN-LAST:event_printActionPerformed




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField debttotal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JButton print;
    // End of variables declaration//GEN-END:variables

    public String getTitle() {
         return "Bank Reconciliation Statement";
    }

    public void activate() throws BasicException {
      debttotal.setText(null);
      jTextField1.setText(null);
      jTextField2.setText(null);
       jTextField3.setText(null);
       jTextField4.setText(null);
    
         JPanel panel = new JPanel(new java.awt.CardLayout());
        List<BankReconcilation> anms2 = dlfac.getAllNames();
        fModel   = new ComboBoxValModel(anms2);
        jComboBox1.setModel(fModel);
          fModel = new ComboBoxValModel(anms2);
            jComboBox1.setModel(fModel);         
        jComboBox1.setSelectedIndex(-1);
        dmodel = jBRStatementModel.emptyinstance();
         jTable1.setModel(dmodel.getTableModel());
          jTable2.setModel(dmodel.getTableModel());
        
//        jTable1.getColumnModel().getColumn(0).setMinWidth(0);
//        jTable1.getColumnModel().getColumn(0).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(1).setMinWidth(0);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(0);
//        jTable1.getColumnModel().getColumn(2).setMinWidth(0);
//        jTable1.getColumnModel().getColumn(2).setMaxWidth(0);
        jTable1.getColumnModel().getColumn(3).setMinWidth(0);
        jTable1.getColumnModel().getColumn(3).setMaxWidth(0);
//        jTable1.getColumnModel().getColumn(4).setMinWidth(0);
//        jTable1.getColumnModel().getColumn(4).setMaxWidth(0);
//        jTable1.getColumnModel().getColumn(5).setMinWidth(0);
//        jTable1.getColumnModel().getColumn(5).setMaxWidth(0);
//////      
////       
//        jTable2.getColumnModel().getColumn(0).setMinWidth(0);
//        jTable2.getColumnModel().getColumn(0).setMaxWidth(0);
        jTable2.getColumnModel().getColumn(1).setMinWidth(0);
        jTable2.getColumnModel().getColumn(1).setMaxWidth(0);
//        jTable2.getColumnModel().getColumn(2).setMinWidth(0);
//        jTable2.getColumnModel().getColumn(2).setMaxWidth(0);
        jTable2.getColumnModel().getColumn(3).setMinWidth(0);
        jTable2.getColumnModel().getColumn(3).setMaxWidth(0);
//        jTable2.getColumnModel().getColumn(4).setMinWidth(0);
//        jTable2.getColumnModel().getColumn(4).setMaxWidth(0);
//        jTable2.getColumnModel().getColumn(5).setMinWidth(0);
//        jTable2.getColumnModel().getColumn(5).setMaxWidth(0);

      
    }

    public boolean deactivate() {
        return true;
    }

    public JComponent getComponent() {
        return this;
    }

    public void init(AppView app) throws BeanFactoryException {
        
       mapps=app;
          dlfac=(DataLogicFacilities) mapps.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");
          
           JPanel panel = new JPanel(new java.awt.CardLayout());
          }

    public Object getBean() {
          return this;
}

    
     TableCellRenderer tableCellRenderer = new DefaultTableCellRenderer() {

     
     
    SimpleDateFormat f = new SimpleDateFormat("dd-MM-yyyy");
    DecimalFormat df = new DecimalFormat("#0.00");
    public Component getTableCellRendererComponent(JTable jTable1,
            Object value, boolean isSelected, boolean hasFocus,
            int row, int column) {
        
        if( value instanceof Date) {
            value = f.format(value);
        }
         if( value instanceof Double) {
            value = df.format(value);
        }
        return super.getTableCellRendererComponent(jTable1, value, isSelected,
                hasFocus, row, column);
    }
};  
   
  TableCellRenderer tableCellRenderer1 = new DefaultTableCellRenderer() {
      DecimalFormat df = new DecimalFormat("#0.00");
      public Component getTableCellRendererComponent(JTable jTable1,
            Object value, boolean isSelected, boolean hasFocus,
            int row, int column) {
        JLabel cell = (JLabel) super.getTableCellRendererComponent(
          jTable1, value, isSelected, hasFocus, row, column);

      //set Alignment
      cell.setHorizontalAlignment(SwingConstants.RIGHT);
      if( value instanceof Double) {
            value = df.format(value);
        }
      return cell;
      }
      @Override public void setValue(Object value) {
        setText(value instanceof Double ? df.format(value) : "");
    }
    
   
}; 

   private Date getSecondDate(String date) throws BasicException {
        Date d = (Date) Formats.TIMESTAMP.parseValue(date);
        Calendar cal = Calendar.getInstance();
        cal.setTimeInMillis(d.getTime());
        cal.set(Calendar.HOUR_OF_DAY, 23);
        cal.set(Calendar.MINUTE, 59);
        cal.set(Calendar.SECOND, 59);
        cal.set(Calendar.MILLISECOND, 59);
       // cal.set(Calendar.AM_PM, Calendar.PM);
        d.setTime(cal.getTimeInMillis());
        return d;
    }
  
    
}
