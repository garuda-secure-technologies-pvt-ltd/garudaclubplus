/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.Accounts;

import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.loader.DataRead;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.IKeyed;
import com.openbravo.data.loader.PreparedSentence;
import com.openbravo.data.loader.SerializableRead;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerReadClass;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.format.Formats;
import com.openbravo.pos.clubmang.DataSourceProvider;
import com.openbravo.pos.clubmang.JasperReportNew;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.sf.jasperreports.engine.JasperPrint;

/**
 *
 * @author User
 */
public class TrialBalanceNew extends javax.swing.JPanel implements JPanelView, BeanFactoryApp  {

    /**
     * Creates new form TrialBalanceNew
     */
    private List<Object[]> memlist=new ArrayList<Object[]>();
    private AppView myapp;
    private String[] headers;
    private  Connection con=null;
    private PreparedStatement ps1=null,ps2=null;
    private DefaultTableModel model1,model2;
    private Double amount=0.0,total=0.0;
    private ComboBoxValModel cmodel1;
    private ComboBoxValModel cmodel2;
    private String level=null;
    private List<AccountMasterKey> lst=new ArrayList<AccountMasterKey>();
    private List<MemberRecList> list=new ArrayList<MemberRecList>();
    private AccountMasterKey accmaster;
    private String sk=null;
    private waitDialog w;
    
    
    
    public TrialBalanceNew() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        radioCredit = new javax.swing.JRadioButton();
        radioDebit = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        tfamount = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(){
            public boolean isCellEditable(int row,int coloumn){
                return false;
            }
        };
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        zerobalance = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        sendSmsButton = new javax.swing.JButton();
        smsCheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        jLabel1.setText("Level");

        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("All Accounts having");

        buttonGroup1.add(radioCredit);
        radioCredit.setText("Cr.");
        radioCredit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioCreditActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioDebit);
        radioDebit.setText("Dr.");
        radioDebit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioDebitActionPerformed(evt);
            }
        });

        jLabel3.setText("more than or equal to");

        tfamount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfamount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tfamountMouseClicked(evt);
            }
        });
        tfamount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfamountKeyTyped(evt);
            }
        });

        jTable1.setEditingColumn(0);
        jTable1.setEditingRow(0);
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Generate Report");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Total");

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1.setEditable(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Name:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 51));
        jLabel6.setText("NOTE:  Only those accounts directly placed under the Main Head or Breakdown will be displayed here.");

        zerobalance.setText("Yes");
        zerobalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zerobalanceActionPerformed(evt);
            }
        });

        jLabel7.setText("Accounts with zero balance");

        jLabel8.setForeground(new java.awt.Color(255, 51, 0));
        jLabel8.setText("* Note : Please verify that trial balance  is tallying before relying on this report. ");

        sendSmsButton.setText("Send SMS");
        sendSmsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSmsButtonActionPerformed(evt);
            }
        });

        smsCheckBox.setText("Send SMS ");
        smsCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                smsCheckBoxItemStateChanged(evt);
            }
        });
        smsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smsCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(smsCheckBox)
                .addGap(18, 18, 18)
                .addComponent(sendSmsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(172, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendSmsButton)
                    .addComponent(smsCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 67, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        jButton1.setText("Execute");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel9.setForeground(new java.awt.Color(255, 51, 0));
        jLabel9.setText("* Note : SMS feature will get activated only for Level : \"Main Head-C \" and Name : \" Member's Receivable \" . ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(zerobalance)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)
                                .addComponent(radioDebit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(radioCredit)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfamount, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(radioDebit)
                    .addComponent(radioCredit)
                    .addComponent(jLabel3)
                    .addComponent(tfamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(zerobalance)
                                .addComponent(jLabel7))
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel4)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap(75, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void radioCreditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioCreditActionPerformed
        // TODO add your handling code here:
        jButton2.setEnabled(false);
    }//GEN-LAST:event_radioCreditActionPerformed

    private void radioDebitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioDebitActionPerformed
        // TODO add your handling code here:
        jButton2.setEnabled(false);
    }//GEN-LAST:event_radioDebitActionPerformed

   
  /*  public Connection getConnection(){
        try {
            Class.forName("com.mysql.jdbc.Driver");
             con = DriverManager.getConnection("jdbc:mysql://192.168.1.145:3306/bci16thapr","root","garuda");
             
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        return con;
        
        
        
    }*/
    
   public boolean isDouble(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       jButton2.setEnabled(true);
            String x = jComboBox2.getSelectedItem().toString();
            if(x.equals("Member's Receivable")){
                
                smsCheckBox.setEnabled(true);
            }
            else{
                smsCheckBox.setSelected(false);
                smsCheckBox.setEnabled(false);
            }
        total=0.0;
        String num=tfamount.getText();
        
        //isDouble(num);
        if(jComboBox1.getSelectedItem()!=null && jComboBox2.getSelectedItem()!=null){
         
        if(tfamount.getText()!=null && tfamount.getText().length()>0 && isDouble(num)){
        Vector<String> v=new Vector<String>();
            v.add("Name");
            v.add("Cr/Dr Amount");
           amount=Double.valueOf(tfamount.getText());
            
            Object[] obj=null,obj1=null;
            List lst = null;
           // Object[][] obj2=null;
           // Vector v2=new Vector();
            ResultSet rs1=null,rs2=null;
            model1=new DefaultTableModel(null, headers);
            model2=new DefaultTableModel(null, headers);
       
        
            accmaster=(AccountMasterKey) jComboBox2.getSelectedItem();
            
            if(radioDebit.isSelected()){
            try {
            String query=null;    
            if(zerobalance.isSelected())
              // query="select a.Name,(t.obdebit+t.curdebit-t.obcredit-t.curcredit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.obdebit+t.curdebit-t.obcredit-t.curcredit)>=? order by a.name";
             
                 query="select a.Name,sum((t.debit+t.curdebit)-(t.credit+t.curcredit)) as amount from accountmaster a,ajperiodtotals t where a.parent=? and a.id=t.accountid group by a.id having sum((t.debit+t.curdebit)-(t.credit+t.curcredit))>=0 order by a.name";
             else  
                //query="select a.Name,(t.obdebit+t.curdebit-t.obcredit-t.curcredit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.obdebit+t.curdebit-t.obcredit-t.curcredit)>0 and (t.obdebit+t.curdebit-t.obcredit-t.curcredit)>=? order by a.name";
                 
                query="select a.Name,sum((t.debit+t.curdebit)-(t.credit+t.curcredit)) as amount from accountmaster a,ajperiodtotals t where a.parent=? and a.id=t.accountid group by a.id having sum((t.debit+t.curdebit)-(t.credit+t.curcredit))>0 order by a.name";
           // con=getConnection();
            
           
            con=myapp.getSession().getConnection();
            ps1=con.prepareStatement(query);
            ps1.setString(1, accmaster.getSearchkey().toString());
            //ps1.setDouble(2, amount);
            rs1=ps1.executeQuery();
            while(rs1.next()){
                 Vector v2=new Vector();
                 double d=rs1.getDouble(2);
                 if(d>=amount){
                 v2.add(rs1.getString(1));
                
                String s=new BigDecimal(d).setScale(2,BigDecimal.ROUND_HALF_EVEN).toPlainString();
                v2.add(s);
                model1.addRow(v2);
                 }
               
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
        }   
  
         
        //model1=new DefaultTableModel(v2, v);
        jTable1.setModel(model1);
        
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);
        jTable1.getColumn("Amount").setCellRenderer( rightRenderer );
         //this.jTable1.getColumn("Validation").setEditable(false);
        
        for(int i=0;i<model1.getRowCount();i++){
           if(jTable1.getModel().getValueAt(i,1)!=null){
               try {
                   String s1=jTable1.getModel().getValueAt(i,1).toString(); 
                   total+=Formats.ConvertStringToDouble(s1);
               } catch (ParseException ex) {
                   Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
               }
        }
        
    }
//        DecimalFormat df = new DecimalFormat("#.###");
//        jTextField1.setText(df.format(total));
        
        double dt=total.doubleValue();
         String s=new BigDecimal(dt).setScale(2,BigDecimal.ROUND_HALF_EVEN).toPlainString();
         
         
        jTextField1.setText(s);
     }
     
     else if(radioCredit.isSelected()){
           try {
           String query=null;    
            if(zerobalance.isSelected())
                 //query="select a.Name,(t.curcredit+t.obcredit-t.curdebit-t.obdebit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.curcredit+t.obcredit-t.curdebit-t.obdebit)>=? order by a.name";
                 query="select a.Name,sum((t.credit+t.curcredit)-(t.debit+t.curdebit)) as amount from accountmaster a,ajperiodtotals t where a.parent=? and a.id=t.accountid group by a.id having sum((t.credit+t.curcredit)-(t.debit+t.curdebit))>=0 order by a.name";
            else
               //query="select a.Name,(t.curcredit+t.obcredit-t.curdebit-t.obdebit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.curcredit+t.obcredit-t.curdebit-t.obdebit)>0 and (t.curcredit+t.obcredit-t.curdebit-t.obdebit)>=? order by a.name";
           
                 query="select a.Name,sum((t.credit+t.curcredit)-(t.debit+t.curdebit)) as amount from accountmaster a,ajperiodtotals t where a.parent=? and a.id=t.accountid group by a.id having sum((t.credit+t.curcredit)-(t.debit+t.curdebit))>0 order by a.name";
          // con=getConnection();
            
            
            con=myapp.getSession().getConnection();
            ps1=con.prepareStatement(query);
            ps1.setString(1, accmaster.getSearchkey().toString());
          //  ps1.setDouble(2, amount);
            rs1=ps1.executeQuery();
            while(rs1.next()){
                Vector v2=new Vector();
                double d=rs1.getDouble(2);
                if(d>=amount){
                v2.add(rs1.getString(1));
                String s=new BigDecimal(d).setScale(2,BigDecimal.ROUND_HALF_EVEN).toPlainString();
                
                v2.add(s);
                model1.addRow(v2);
                }
               
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
        }   
  
         
        //model1=new DefaultTableModel(v2, v);
        jTable1.setModel(model1);
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);
        jTable1.getColumn("Amount").setCellRenderer( rightRenderer );
        
                for(int i=0;i<model1.getRowCount();i++){
           if(jTable1.getModel().getValueAt(i,1)!=null){
               try {
                   String s1=jTable1.getModel().getValueAt(i,1).toString(); 
                   total+=Formats.ConvertStringToDouble(s1);
               } catch (ParseException ex) {
                   Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
               }
        }
        
    }
         double dt=total.doubleValue();
         String s=new BigDecimal(dt).setScale(2,BigDecimal.ROUND_HALF_EVEN).toPlainString();
        // DecimalFormat df = new DecimalFormat("#.###");
        jTextField1.setText(s);
         //jTextField1.setText(total.toString());
          
      }
        
     else{
         jButton2.setEnabled(false);
         smsCheckBox.setEnabled(false);
         JOptionPane.showMessageDialog(null, "Select One Option Credit or Debit", "Required value", JOptionPane.ERROR_MESSAGE);
     }
       }else{
            jButton2.setEnabled(false);
            smsCheckBox.setEnabled(false);
           JOptionPane.showMessageDialog(null, "Enter the Proper Amount in text field ", "Required value", JOptionPane.ERROR_MESSAGE);
       }
        }else{
            smsCheckBox.setEnabled(false);
            jButton2.setEnabled(false);
                JOptionPane.showMessageDialog(null, "Select level and name fields..", "Required value", JOptionPane.ERROR_MESSAGE);
            }
    
       
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        
      //  amount=Double.valueOf(tfamount.getText());
        
        accmaster=(AccountMasterKey) jComboBox2.getSelectedItem();
        List<MemberRecList> lst1=new ArrayList<MemberRecList>();
        if(radioDebit.isSelected()){
            
            String query=null;    
            if(zerobalance.isSelected())
               // query="select a.Name,(t.obdebit+t.curdebit-t.obcredit-t.curcredit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.obdebit+t.curdebit-t.obcredit-t.curcredit)>=? order by a.name";
                
                query="select a.Name,sum((t.debit+t.curdebit)-(t.credit+t.curcredit)) as amount from accountmaster a,ajperiodtotals t where a.parent=? and a.id=t.accountid group by a.id having sum((t.debit+t.curdebit)-(t.credit+t.curcredit))>=? order by a.name";
            else  
              //  query="select a.Name,(t.obdebit+t.curdebit-t.obcredit-t.curcredit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.obdebit+t.curdebit-t.obcredit-t.curcredit)>0 and (t.obdebit+t.curdebit-t.obcredit-t.curcredit)>=? order by a.name";
             
                   query="select a.Name,sum((t.debit+t.curdebit)-(t.credit+t.curcredit)) as amount from accountmaster a,ajperiodtotals t where a.parent=? and a.id=t.accountid group by a.id having sum((t.debit+t.curdebit)-(t.credit+t.curcredit))>=? and sum((t.debit+t.curdebit)-(t.credit+t.curcredit))>0 order by a.name";
            try {
                lst1=(List<MemberRecList>) new StaticSentence(myapp.getSession()
                                        ,query ,
                                         new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.DOUBLE})
                                        ,new SerializerReadClass(MemberRecList.class)).list(new Object[]{accmaster.getSearchkey().toString(), amount });
            } catch (BasicException ex) {
                Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
            }
            DataSourceProvider data1=new DataSourceProvider(lst1);
            DatasourceTrial ds=new DatasourceTrial(lst1);
            data1.setDataSource(ds);
            
            
            Map reportsparam=new HashMap();
            reportsparam.put("companyName",myapp.getSession().getCompanyName());
            reportsparam.put("companyAddress",myapp.getSession().getCompanyAddress());
            reportsparam.put("type",jComboBox1.getSelectedItem().toString()+"  :  "+jComboBox2.getSelectedItem().toString());
          
            reportsparam.put("dr/cr","Dr");
            reportsparam.put("amount",amount);
            reportsparam.put("Total",jTextField1.getText());
            
            
            JasperPrint jp = JasperReportNew.runReport(myapp, "./reports/com/openbravo/reports/Member_RecievableReport.jrxml", reportsparam, false, data1, true, null); 
            
        }
        
        else if(radioCredit.isSelected()){
            //"select a.Name,(t.curcredit+t.obcredit-t.curdebit-t.obdebit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.curcredit+t.obcredit-t.curdebit-t.obdebit)>=? order by a.name"
            String query=null;    
            if(zerobalance.isSelected())
                 // query="select a.Name,(t.curcredit+t.obcredit-t.curdebit-t.obdebit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.curcredit+t.obcredit-t.curdebit-t.obdebit)>=? order by a.name";
             
                query="select a.Name,sum((t.credit+t.curcredit)-(t.debit+t.curdebit)) as amount from accountmaster a,ajperiodtotals t where a.parent=? and a.id=t.accountid group by a.id having sum((t.credit+t.curcredit)-(t.debit+t.curdebit))>=? order by a.name";
            else
              //  query="select a.Name,(t.curcredit+t.obcredit-t.curdebit-t.obdebit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.curcredit+t.obcredit-t.curdebit-t.obdebit)>0 and (t.curcredit+t.obcredit-t.curdebit-t.obdebit)>=? order by a.name";
                
                query="select a.Name,sum((t.credit+t.curcredit)-(t.debit+t.curdebit)) as amount from accountmaster a,ajperiodtotals t where a.parent=? and a.id=t.accountid group by a.id having sum((t.credit+t.curcredit)-(t.debit+t.curdebit))>=? and sum((t.credit+t.curcredit)-(t.debit+t.curdebit))>0 order by a.name";
            try {
                lst1=(List<MemberRecList>) new StaticSentence(myapp.getSession()
                                        ,query ,
                                         new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.DOUBLE})
                                        ,new SerializerReadClass(MemberRecList.class)).list(new Object[]{ accmaster.getSearchkey().toString(),amount });
            } catch (BasicException ex) {
                Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
            }
            DataSourceProvider data1=new DataSourceProvider(lst1);
            DatasourceTrial ds=new DatasourceTrial(lst1);
            data1.setDataSource(ds);
            
            
            Map reportsparam=new HashMap();
            reportsparam.put("companyName",myapp.getSession().getCompanyName());
            reportsparam.put("companyAddress",myapp.getSession().getCompanyAddress());
            reportsparam.put("type",jComboBox1.getSelectedItem().toString()+"  :  "+jComboBox2.getSelectedItem().toString());
          
            reportsparam.put("dr/cr","Cr");
            reportsparam.put("amount",amount);
            reportsparam.put("Total",jTextField1.getText());
            
            JasperPrint jp = JasperReportNew.runReport(myapp, "./reports/com/openbravo/reports/Member_RecievableReport.jrxml", reportsparam, false, data1, true, null); 
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void tfamountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfamountMouseClicked
        // TODO add your handling code here:
        jButton2.setEnabled(false);
    }//GEN-LAST:event_tfamountMouseClicked

    private void tfamountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfamountKeyTyped
        // TODO add your handling code here:
          jButton2.setEnabled(false);
    }//GEN-LAST:event_tfamountKeyTyped

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
//        List level=getNames(jComboBox1.getSelectedItem().toString());
//        cmodel2=new ComboBoxValModel(level);
//        jComboBox2.setModel(cmodel2);
        
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
      // String level=null;
        jButton2.setEnabled(false);
        
        if(jComboBox1.getSelectedIndex()!=-1){
            if(jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Main Head- C"))
                level="C";
            else if(jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Breakdown- D"))
                level="D";
            else
                JOptionPane.showMessageDialog(null, "Please select the level first ", "Required value", JOptionPane.ERROR_MESSAGE);
                
        // List levellist=getNames(level);
        lst=getKey(level);
        cmodel2=new ComboBoxValModel(lst);
       // accmaster=new AccountMasterKey();
           /* for (Iterator<AccountMasterKey> it = lst.iterator(); it.hasNext();) {
                accmaster = it.next();
                cmodel2.add(accmaster.getName());
                sk=accmaster.getSearchkey();
                
            }*/
        jComboBox2.setModel(cmodel2);
        }
        else{
           // JOptionPane.showMessageDialog(null, "Please select the level first ", "Required value", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
       
        jButton2.setEnabled(false);
         
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void zerobalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zerobalanceActionPerformed
        // TODO add your handling code here:
        
        jButton2.setEnabled(false);
    }//GEN-LAST:event_zerobalanceActionPerformed

    private void smsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smsCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_smsCheckBoxActionPerformed

    List<MemberRecListSMS> lst1ForSMS=new ArrayList<MemberRecListSMS>();
    
    private void sendSmsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendSmsButtonActionPerformed
        
        int cnl_req = JOptionPane.showConfirmDialog(jPanel2, "Do you want to send SMS to all member ? " ,"SMS confirmation",JOptionPane.YES_NO_OPTION );
        if(cnl_req == JOptionPane.YES_OPTION){
            
           int cnl_req2 = JOptionPane.showConfirmDialog(jPanel2, "Please do not close this page as it take few minutes to send SMS to all members." ,"SMS confirmation",JOptionPane.YES_NO_OPTION );
            if(cnl_req == JOptionPane.YES_OPTION){
            
            
            lst1ForSMS=new ArrayList<MemberRecListSMS>();
            
            
            
            w = new waitDialog(new JFrame(), true);
            int h = w.getSize().height;
            int w1 = w.getSize().width;
            Toolkit toolkit = Toolkit.getDefaultToolkit();
            Dimension scrnsize = toolkit.getScreenSize();
            w.setLocation(scrnsize.width / 2 - w1, scrnsize.height / 2 - h);
            
            
            Thread t = new Thread(
                    new Runnable() {

                        public void run() {
            
            // CODE FOR QUERY 
            String CreditDebitStr = "";
            accmaster=(AccountMasterKey) jComboBox2.getSelectedItem();
                
                if(radioDebit.isSelected()){
                    CreditDebitStr = "Dr.";        
                    String query=null;    
                    if(zerobalance.isSelected())
                       // query="select a.Name,(t.obdebit+t.curdebit-t.obcredit-t.curcredit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.obdebit+t.curdebit-t.obcredit-t.curcredit)>=? order by a.name";

                        query="select a.Name,sum((t.debit+t.curdebit)-(t.credit+t.curcredit)) as amount , c.searchkey , c.mobile from accountmaster a,ajperiodtotals t , customers c  where a.id = c.account and  a.parent=? and a.id=t.accountid  and c.mobile is not null group by a.id having sum((t.debit+t.curdebit)-(t.credit+t.curcredit))>=? order by a.name";
                    else  
                      //  query="select a.Name,(t.obdebit+t.curdebit-t.obcredit-t.curcredit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.obdebit+t.curdebit-t.obcredit-t.curcredit)>0 and (t.obdebit+t.curdebit-t.obcredit-t.curcredit)>=? order by a.name";

                           query="select a.Name,sum((t.debit+t.curdebit)-(t.credit+t.curcredit)) as amount , c.searchkey , c.mobile from accountmaster a,ajperiodtotals t  , customers c where a.id = c.account and a.parent=? and a.id=t.accountid and c.mobile is not null group by a.id having sum((t.debit+t.curdebit)-(t.credit+t.curcredit))>=? and sum((t.debit+t.curdebit)-(t.credit+t.curcredit))>0 order by a.name";
                    try {
                        lst1ForSMS=(List<MemberRecListSMS>) new StaticSentence(myapp.getSession()
                                                ,query ,
                                                 new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.DOUBLE})
                                                ,new SerializerReadClass(MemberRecListSMS.class)).list(new Object[]{accmaster.getSearchkey().toString(), amount });
                    } catch (BasicException ex) {
                        Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
                    }



                }

                else if(radioCredit.isSelected()){
                    //"select a.Name,(t.curcredit+t.obcredit-t.curdebit-t.obdebit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.curcredit+t.obcredit-t.curdebit-t.obdebit)>=? order by a.name"
                    String query=null;    
                    CreditDebitStr = "Cr.";
                    if(zerobalance.isSelected())
                         // query="select a.Name,(t.curcredit+t.obcredit-t.curdebit-t.obdebit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.curcredit+t.obcredit-t.curdebit-t.obdebit)>=? order by a.name";

                        query="select a.Name,sum((t.credit+t.curcredit)-(t.debit+t.curdebit)) as amount , c.searchkey , c.mobile  from accountmaster a,ajperiodtotals t , customers c  where a.id = c.account and a.parent=? and a.id=t.accountid and c.mobile is not null group by a.id having sum((t.credit+t.curcredit)-(t.debit+t.curdebit))>=? order by a.name";
                    else
                      //  query="select a.Name,(t.curcredit+t.obcredit-t.curdebit-t.obdebit) as amount from accountmaster a,trailbalance t where a.parent=? and a.id=t.accountid and (t.curcredit+t.obcredit-t.curdebit-t.obdebit)>0 and (t.curcredit+t.obcredit-t.curdebit-t.obdebit)>=? order by a.name";

                        query="select a.Name,sum((t.credit+t.curcredit)-(t.debit+t.curdebit)) as amount , c.searchkey , c.mobile  from accountmaster a,ajperiodtotals t  , customers c where a.id = c.account and  a.parent=? and a.id=t.accountid and c.mobile is not null group by a.id having sum((t.credit+t.curcredit)-(t.debit+t.curdebit))>=? and sum((t.credit+t.curcredit)-(t.debit+t.curdebit))>0 order by a.name";
                    try {
                        lst1ForSMS=(List<MemberRecListSMS>) new StaticSentence(myapp.getSession()
                                                ,query ,
                                                 new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.DOUBLE})
                                                ,new SerializerReadClass(MemberRecListSMS.class)).list(new Object[]{ accmaster.getSearchkey().toString(),amount });
                    } catch (BasicException ex) {
                        Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
                    }




                }
            
                String ClubName = myapp.getSession().getCompanyName();
                Object[] obj16;
                try {
                    obj16 = (Object[]) new StaticSentence(myapp.getSession(), " select name from garudaconame.company where active=1 and descr=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(myapp.getSession().getCompanyName());
                    if(obj16!=null){
                        ClubName = obj16[0].toString();
                    }  
                } catch (BasicException ex) {
                    Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
                }
                  
                // send sms process
            
                Date d = new Date();
                String DateStr = Formats.DATE.formatValue(d);
                
                boolean withname=false;
                for(int i=0;i<lst1ForSMS.size();i++){

                    String SearchKey = lst1ForSMS.get(i).getSearchkey();
                    String MobileNo = lst1ForSMS.get(i).getMobileno();
                    String AmountStr = roundTwoDecimals(lst1ForSMS.get(i).getAmount())+" "+CreditDebitStr;


                    String TemSmsStr = "Dear Member, Your balance with "+ClubName+" M.No: "+SearchKey+
                            " as on "+DateStr+" is "+AmountStr+" Plz pay at the earliest. Ignore if already paid.";



                    try {
                            new PreparedSentence(myapp.getSession(), "INSERT INTO activemsgtable(ID,Message,SENDTO,WITHNAME,PRIORITY,CNT) VALUES (?,?,?,?,?,?) "
                            ,new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.BOOLEAN,Datas.INT,Datas.INT})
                            ).exec(new Object[]{UUID.randomUUID().toString(),TemSmsStr,MobileNo,withname,0,0});
                    } catch (BasicException ex) {
                        ex.printStackTrace();
                        Logger.getLogger(dueListTable.class.getName()).log(Level.SEVERE, null, ex);
                        w.hideDialog();
                    }



                
                }
                // for loop ends
                w.hideDialog();
                JOptionPane.showMessageDialog(jPanel2, " SMS send successfully to members.", " SMS success message", JOptionPane.INFORMATION_MESSAGE);

                        }
                   });
                t.start();
                w.showDialog("Please wait.Sending Sms...");

                if(lst1ForSMS.size()==0){
                     JOptionPane.showMessageDialog(this, " No members to send SMS ", " Sms Warning", JOptionPane.ERROR_MESSAGE);
                }
            
            
            }
            
            
            
            
            
            
            
            
            
        }
        
    }//GEN-LAST:event_sendSmsButtonActionPerformed

    private void smsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_smsCheckBoxItemStateChanged
         if(smsCheckBox.isSelected()){
             sendSmsButton.setVisible(true);
         }
         else{
             sendSmsButton.setVisible(false);
         }
    }//GEN-LAST:event_smsCheckBoxItemStateChanged

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        if(jComboBox2.getSelectedIndex()!=-1){
            String x = jComboBox2.getSelectedItem().toString();
            if(x.equals("Member's Receivable")){
                
                smsCheckBox.setEnabled(true);
            }
            else{
                smsCheckBox.setSelected(false);
                smsCheckBox.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JRadioButton radioCredit;
    private javax.swing.JRadioButton radioDebit;
    private javax.swing.JButton sendSmsButton;
    private javax.swing.JCheckBox smsCheckBox;
    private javax.swing.JTextField tfamount;
    private javax.swing.JRadioButton zerobalance;
    // End of variables declaration//GEN-END:variables

    public String getTitle() {
        return "MainHead Report";
    }

    public void activate() throws BasicException {
        tfamount.setVisible(true);
         headers=new String[]{"Name","Amount"};
         jComboBox1.setSelectedIndex(-1);
         jComboBox2.setSelectedIndex(-1);
       // jComboBox1.setSelectedItem("Member Recievable");
       //  jComboBox2.setSelectedIndex(-1);
        tfamount.setText(null);
//        model1.setRowCount(0);
//        jTable1.setModel(model1);
        radioCredit.setSelected(false);
        radioDebit.setSelected(false);
        total=0.0;
        jButton2.setEnabled(false);
        jComboBox2.setModel(new ComboBoxValModel());
         jTable1.setModel(new DefaultTableModel());
         jTextField1.setText(null);
          zerobalance.setSelected(false);
        smsCheckBox.setSelected(false);
        sendSmsButton.setVisible(false);
        smsCheckBox.setEnabled(false);
         radioDebit.setSelected(true);
    }

    public boolean deactivate() {
        return true;
    }

    public JComponent getComponent() {
        return this;
    }

    public void init(AppView app) throws BeanFactoryException {
        myapp=app;
        
      List<String> levels=new ArrayList<String>();
      levels.add("Main Head- C");
      levels.add("Breakdown- D");
        
        cmodel1=new ComboBoxValModel(levels);
        jComboBox1.setModel(cmodel1);
         jComboBox1.setSelectedIndex(-1);
         jComboBox2.setSelectedIndex(-1);
       // jComboBox2.setSelectedIndex(-1);
         jComboBox1.setModel(cmodel1);
        tfamount.setText(null);

        radioCredit.setSelected(false);
        radioDebit.setSelected(false);
        total=0.0;
        jButton2.setEnabled(false);
        jComboBox2.setModel(new ComboBoxValModel());
        jTable1.setModel(new DefaultTableModel());
        jTextField1.setText(null);
        smsCheckBox.setSelected(false);
        zerobalance.setSelected(false);
        sendSmsButton.setVisible(false);
        smsCheckBox.setEnabled(false);
        radioDebit.setSelected(true);
    }

    public Object getBean() {
        return this;
    }
    
    
    public List getLevel(){
        List levels=new ArrayList();
        try {
            levels= new StaticSentence(myapp.getSession()
                       ,"SELECT DISTINCT level_ FROM accountmaster where level_!='S' order by level_" ,null
                       ,SerializerReadString.INSTANCE).list();
        } catch (BasicException ex) {
            Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
        }
           
        
        return levels;
        
    }
    
    
    public List<String> getNames(String level){
       
        List<String> names=new ArrayList<String>();
        if(level!=null){
        try {
            names= new StaticSentence(myapp.getSession()
                          ,"SELECT name from accountmaster where level_=? order by name" ,new SerializerWriteBasic(new Datas[]{Datas.STRING})
                          ,SerializerReadString.INSTANCE).list(new Object[]{level});
        } catch (BasicException ex) {
            Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else{
            JOptionPane.showMessageDialog(null, "Level is not selected ", "Required value", JOptionPane.ERROR_MESSAGE);
        }
        return names;
    }
    
    public List<AccountMasterKey> getKey(String level){
        
        List<AccountMasterKey> lst=null;
          try {
            lst= new StaticSentence(myapp.getSession()
                          ,"SELECT id,name,searchkey,parent,level_ from accountmaster where level_=? order by name,searchkey" ,new SerializerWriteBasic(new Datas[]{Datas.STRING})
                          ,new SerializerReadClass(AccountMasterKey.class)).list(new Object[]{level});
        } catch (BasicException ex) {
            Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
        } 
        return lst;
    }
    
    public String getSearchKey(String name,String lvalue){
        String sk=null;
        try {
            sk= (String) new StaticSentence(myapp.getSession()
                             ,"select searchkey from accountmaster where name like BINARY ? and level_!='s' and level_=?" ,new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING})
                             ,SerializerReadString.INSTANCE).find(new Object[]{name,lvalue});
        } catch (BasicException ex) {
            Logger.getLogger(TrialBalanceNew.class.getName()).log(Level.SEVERE, null, ex);
        }
        return sk;
    }
    
   
    public  static class MemberRecList implements SerializableRead{
        
        String name;
        Double amount;
        
        public void setName(String name){
            this.name=name;
        }
        public String getName(){
            return name;
        }
        
         public void setAmount(Double amount){
            this.amount=amount;
        }
        public Double getAmount(){
            return amount;
        }

        public void readValues(DataRead dr) throws BasicException {
            
            name=dr.getString(1);
            amount=dr.getDouble(2);
        }

        
    }
    
    
     public  static class AccountMasterKey implements SerializableRead{
         
         String id;
         String name;
         String searchkey;
         String parent;
         String level;
         
         

        public void readValues(DataRead dr) throws BasicException {
            
            id=dr.getString(1);
            name=dr.getString(2);
            searchkey=dr.getString(3);
            parent=dr.getString(4);
            level=dr.getString(5);
            
            
        }
         public String toString(){
            return name;
    }
        
         public void setName(String name){
            this.name=name;
        }
        public String getName(){
            return name;
        }
         public void setId(String id){
            this.id=id;
        }
        public String getId(){
            return id;
        }
         public void setSearchkey(String searchkey){
            this.searchkey=searchkey;
        }
        public String getSearchkey(){
            return searchkey;
        }
         public void setParent(String parent){
            this.parent=parent;
        }
        public String getParent(){
            return parent;
        }
         public void setLevel(String level){
            this.level=level;
        }
        public String getLevel(){
            return level;
        }
      
         
     }
     
     
     
     
     
     
     
     
     
     
     //MEMBER RECEIVABLE LIST FOR SMS 
     
     public  static class MemberRecListSMS implements SerializableRead{
        
        String name;
        Double amount;
        String Searchkey;
        String Mobileno;
        
        
        public void setName(String name){
            this.name=name;
        }
        public String getName(){
            return name;
        }
        
         public void setAmount(Double amount){
            this.amount=amount;
        }
        public Double getAmount(){
            return amount;
        }
        
        
        public void setSearchkey(String Searchkey){
            this.Searchkey=Searchkey;
        }
        public String getSearchkey(){
            return Searchkey;
        }
        
        public void setMobileno(String Mobileno){
            this.Mobileno=Mobileno;
        }
        public String getMobileno(){
            return Mobileno;
        }
        

        public void readValues(DataRead dr) throws BasicException {
            
            name=dr.getString(1);
            amount=dr.getDouble(2);
            Searchkey = dr.getString(3);
            Mobileno = dr.getString(4);
                   
        }

        
    }
     
     public String roundTwoDecimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("####0.00");
        return twoDForm.format(d);
    }
      
}


