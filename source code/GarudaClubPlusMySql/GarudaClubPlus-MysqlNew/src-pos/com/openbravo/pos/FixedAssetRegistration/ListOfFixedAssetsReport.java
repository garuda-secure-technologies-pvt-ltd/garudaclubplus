/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.FixedAssetRegistration;

import com.openbravo.beans.JCalendarDialog;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import java.io.File;
import java.io.IOException;
import java.util.Calendar;
import com.openbravo.format.Formats;
import javax.swing.JOptionPane;
import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.loader.SerializerReadClass;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Window;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import com.openbravo.pos.Accounts.AccountMasterExt;
import com.openbravo.pos.FixedAssetRegistration.AmcNNonamcTableModel.AmcInfo;
import static com.openbravo.pos.FixedAssetRegistration.AmcNNonamcTableModel.NonamcInfo;
import com.openbravo.pos.clubmang.DataSourceProvider;
import com.openbravo.pos.clubmang.JasperReportNew;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.sf.jasperreports.engine.JasperPrint;
import javax.swing.table.TableCellRenderer;
import java.awt.Color;
import javax.swing.JComponent;
import java.awt.Component;
import java.util.Date;
import java.text.DecimalFormat;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import com.openbravo.pos.FixedAssetRegistration.PhysicalVerificationTableModel.PhysicalVerificationInfo;
import com.openbravo.pos.FixedAssetRegistration.WriteOffDetailsTableModel.WriteOffDetailsInfo;
import com.openbravo.pos.FixedAssetRegistration.RevaluationTableModel.RevaluationInfo;
import com.openbravo.pos.FixedAssetRegistration.MaintenanceTableModel.MaintenanceInfo;
import java.awt.Image;
import javax.swing.Icon;
import javax.swing.ImageIcon;
/**
 *
 * @author dev3
 */
public class ListOfFixedAssetsReport extends javax.swing.JPanel implements JPanelView, BeanFactoryApp {

    private AppView m_App;
    private static DataLogicFacilities dmang;
    private static ComboBoxValModel elementsModel;
    private static ComboBoxValModel mainheadsModel;
    private Date fromDate;
    private Date toDat;
    private Date asonDate;
    DecimalFormat decimalFormat = new DecimalFormat("#0.00");
    DecimalFormat df = new DecimalFormat("#%");
    private ComboBoxValModel assetListModel;
    private String header = null;
    private String perioddate;
    private String subsidiar = null;
    private String ReportHeader;
    private List<ListOfAllAssetsTableModel.AssetInfo> FA_info_List_all;
    private ListOfAllAssetsTableModel FA_Table_Model;
    private String doclink;
    private String amcDocLink;
    private String mainDocLink;
     private String revDocLink;
     private String woDocLink;
    private  Map reportparams1 = new HashMap();
    private Boolean barcodeVisibleFlag=false;
    
            /**
     * Creates new form ListOfFixedAssetsReport
     */
    public ListOfFixedAssetsReport() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        month_Rdo = new javax.swing.JRadioButton();
        period_Rdo = new javax.swing.JRadioButton();
        report_but = new javax.swing.JButton();
        viewList_but = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        frmDate = new javax.swing.JTextField();
        DateSelect = new javax.swing.JButton();
        DateSelect1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        all_radbut = new javax.swing.JRadioButton();
        subhead_radbut = new javax.swing.JRadioButton();
        subhead_panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        elements = new javax.swing.JComboBox();
        subsidiary_panel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        mainheads = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        allactinact_rad = new javax.swing.JRadioButton();
        actice_rad = new javax.swing.JRadioButton();
        wofa_rad = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        alphbet_rad = new javax.swing.JRadioButton();
        dateofpurchase_rad = new javax.swing.JRadioButton();
        viewfulldoc_but = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable(){public Component prepareRenderer(TableCellRenderer renderer,
            int rowIndex, int vColIndex) {
            Component c = super.prepareRenderer(renderer, rowIndex, vColIndex);
            if (c instanceof JComponent) {
                JComponent jc = (JComponent)c;
                jc.setToolTipText(String.valueOf(getValueAt(rowIndex, vColIndex)));

                if (rowIndex % 2 == 0 && !isCellSelected(rowIndex, vColIndex)) {
                    jc.setBackground(Color.lightGray);
                }
                else {
                    jc.setBackground(Color.white);
                }
                if(isCellSelected(rowIndex, vColIndex))
                jc.setBackground(Color.cyan);
            }
            return c;
        }};
        toDate_txt = new javax.swing.JTextField();
        part = new javax.swing.JRadioButton();
        combo_panel = new javax.swing.JPanel();
        assetcombo = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        back_but = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        name_txt = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        subhead_txt = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        subsidiary_txt = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        acchead_txt = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        standalone_txt = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        anotherasset_txt = new javax.swing.JLabel();
        label = new javax.swing.JLabel();
        vendor_txt = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        dateofpur_txt = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        totalcst_txt = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        dateofinss_txt = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        dateofcomm_txt = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        dateofuse_txt = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        dateofcapt_txt = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        rateofdepr_txt = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        wdvcost_txt = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        agency_txt = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        barcode_txt = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        Cor_txt = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cread_by = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cretd_date = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        verDate = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        verBy = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        verRemark = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        phyBarcode = new javax.swing.JLabel();
        assetImg = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        contractor = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        perticulars = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        startDate = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        endDate = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        rate = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        account = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        amount = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        amcRemark = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        reminderDate = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        approvedBy = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        approvedDate = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        serviceProvider = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        contactPerson = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        contactDet = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        remarks = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        dor_txt = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        revAmount = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        resnRev = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        revAccDet = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        mainDate = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        mainAmount = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        voucherDet = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        DrHeadAcc = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        dow = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        reasonWo = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        scrpVal = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        woVoucherDet = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        woInBy = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        woAppBy = new javax.swing.JLabel();
        amcDoc = new javax.swing.JButton();
        revDoc = new javax.swing.JButton();
        mainDoc = new javax.swing.JButton();
        woDoc = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        wdvDateLbl = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        makeLb = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        modelLb = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        wdvDateLb = new javax.swing.JLabel();
        printFaDetail = new javax.swing.JButton();
        jCheckBox2 = new javax.swing.JCheckBox();

        month_Rdo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        month_Rdo.setText("As On Date");
        month_Rdo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                month_RdoItemStateChanged(evt);
            }
        });
        month_Rdo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                month_RdoActionPerformed(evt);
            }
        });

        period_Rdo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        period_Rdo.setText("Period");
        period_Rdo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                period_RdoItemStateChanged(evt);
            }
        });

        report_but.setForeground(java.awt.Color.red);
        report_but.setText("Report");
        report_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report_butActionPerformed(evt);
            }
        });

        viewList_but.setForeground(java.awt.Color.red);
        viewList_but.setText("ViewList");
        viewList_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewList_butActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel3.setForeground(java.awt.Color.blue);
        jLabel3.setText("Select  Duration :");

        DateSelect.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        DateSelect.setText("fromDate");
        DateSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateSelectActionPerformed(evt);
            }
        });

        DateSelect1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        DateSelect1.setText("ToDate");
        DateSelect1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateSelect1ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel9.setForeground(java.awt.Color.blue);
        jLabel9.setText("Select Account :");

        all_radbut.setText("ALL");
        all_radbut.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                all_radbutItemStateChanged(evt);
            }
        });

        subhead_radbut.setText("Particular SubHead");
        subhead_radbut.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subhead_radbutItemStateChanged(evt);
            }
        });

        jLabel1.setText("SubHead");

        elements.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                elementsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout subhead_panelLayout = new javax.swing.GroupLayout(subhead_panel);
        subhead_panel.setLayout(subhead_panelLayout);
        subhead_panelLayout.setHorizontalGroup(
            subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subhead_panelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(elements, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        subhead_panelLayout.setVerticalGroup(
            subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subhead_panelLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(elements, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel2.setText("SubsidiaryHead");

        mainheads.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mainheadsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout subsidiary_panelLayout = new javax.swing.GroupLayout(subsidiary_panel);
        subsidiary_panel.setLayout(subsidiary_panelLayout);
        subsidiary_panelLayout.setHorizontalGroup(
            subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subsidiary_panelLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainheads, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        subsidiary_panelLayout.setVerticalGroup(
            subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subsidiary_panelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainheads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel7.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel7.setForeground(java.awt.Color.blue);
        jLabel7.setText("Select FA :");

        allactinact_rad.setText("ALL");

        actice_rad.setText("Active FA");

        wofa_rad.setText("WO FA");

        jLabel8.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel8.setForeground(java.awt.Color.blue);
        jLabel8.setText("Order By :");

        alphbet_rad.setText("Alphabetical Order");

        dateofpurchase_rad.setText("Date Of Purchase wise");

        viewfulldoc_but.setForeground(java.awt.Color.red);
        viewfulldoc_but.setText("View Full Document");
        viewfulldoc_but.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewfulldoc_butMouseClicked(evt);
            }
        });
        viewfulldoc_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewfulldoc_butActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable2);

        toDate_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toDate_txtActionPerformed(evt);
            }
        });

        part.setText("Particular Asset");
        part.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                partItemStateChanged(evt);
            }
        });

        assetcombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout combo_panelLayout = new javax.swing.GroupLayout(combo_panel);
        combo_panel.setLayout(combo_panelLayout);
        combo_panelLayout.setHorizontalGroup(
            combo_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, combo_panelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(assetcombo, 0, 165, Short.MAX_VALUE)
                .addContainerGap())
        );
        combo_panelLayout.setVerticalGroup(
            combo_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(assetcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(all_radbut)
                                .addGap(18, 18, 18)
                                .addComponent(subhead_radbut, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(month_Rdo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(period_Rdo, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(subhead_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(subsidiary_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(toDate_txt)
                                    .addComponent(frmDate, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(DateSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(DateSelect1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(allactinact_rad)
                                .addGap(12, 12, 12)
                                .addComponent(actice_rad)
                                .addGap(18, 18, 18)
                                .addComponent(wofa_rad)
                                .addGap(12, 12, 12)
                                .addComponent(part)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combo_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(alphbet_rad)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dateofpurchase_rad)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 202, Short.MAX_VALUE)
                                .addComponent(report_but, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(viewList_but, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(viewfulldoc_but)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(month_Rdo)
                    .addComponent(period_Rdo)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(frmDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DateSelect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DateSelect1)
                    .addComponent(toDate_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(all_radbut)
                    .addComponent(subhead_radbut)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(subhead_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subsidiary_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(allactinact_rad)
                            .addComponent(jLabel7)
                            .addComponent(actice_rad)
                            .addComponent(wofa_rad)
                            .addComponent(part))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 15, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(report_but)
                                    .addComponent(viewList_but))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(alphbet_rad)
                                    .addComponent(dateofpurchase_rad))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewfulldoc_but))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(combo_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jLabel4.setFont(new java.awt.Font("Ubuntu", 3, 18)); // NOI18N
        jLabel4.setForeground(java.awt.Color.red);
        jLabel4.setText("Fixed  Asset Details");

        jButton1.setForeground(java.awt.Color.red);
        jButton1.setText("View Document");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        back_but.setForeground(java.awt.Color.red);
        back_but.setText("Cancel");
        back_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_butActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel15.setText("Name                       ");

        name_txt.setText("jLabel5");

        jLabel21.setText("Subhead                ");

        subhead_txt.setText("jLabel6");

        jLabel22.setText("Subsidiary              ");

        subsidiary_txt.setText("jLabel10");

        jLabel23.setText("Account Head       ");

        acchead_txt.setText("jLabel11");

        jLabel29.setText("Standalone            ");

        standalone_txt.setText("jLabel12");

        jLabel30.setText("Linked Asset      ");

        anotherasset_txt.setText("jLabel13");

        label.setText("Vendor                   ");

        vendor_txt.setText("jLabel14");

        jLabel32.setText("Date Of Purchase ");

        dateofpur_txt.setText("jLabel16");

        jLabel33.setText("Total Cost ");

        totalcst_txt.setText("jLabel17");

        jLabel34.setText("Date Of Installation ");

        dateofinss_txt.setText("jLabel18");

        jLabel35.setText("Date Of Commissioning ");

        dateofcomm_txt.setText("jLabel19");

        jLabel36.setText("Date on which put to use ");

        dateofuse_txt.setText("jLabel20");

        jLabel37.setText("Date Of Capitalisation ");

        dateofcapt_txt.setText("jLabel24");

        jLabel38.setText("Rate Of Deprecation ");

        rateofdepr_txt.setText("jLabel25");

        jLabel39.setText("WDV as on date ");

        wdvcost_txt.setText("jLabel26");

        jLabel40.setText("Agency For Replacement ");

        agency_txt.setText("jLabel27");

        jLabel5.setText("Barcode");

        barcode_txt.setText("jLabel6");

        jLabel10.setText("Cost of Replacement");

        Cor_txt.setText("jLabel11");

        jLabel6.setText("Created By");

        cread_by.setText("jLabel11");

        jLabel12.setText("Created Date");

        cretd_date.setText("jLabel13");

        jLabel11.setForeground(new java.awt.Color(0, 0, 204));
        jLabel11.setText("Physical Verification Details:");

        jLabel13.setText("Verification Date:");

        verDate.setText("jLabel14");

        jLabel14.setText("Verified By:");

        verBy.setText("jLabel16");

        jLabel16.setText("Verify Remark:");

        verRemark.setText("jLabel17");

        jLabel17.setText("Barcode");

        phyBarcode.setText("jLabel18");

        assetImg.setText("jLabel18");

        jLabel19.setForeground(new java.awt.Color(0, 0, 204));
        jLabel19.setText("AMC  Details:");

        jLabel20.setText("Contractor:");

        contractor.setText("jLabel24");
        contractor.setMaximumSize(new java.awt.Dimension(0, 0));
        contractor.setMinimumSize(new java.awt.Dimension(0, 0));

        jLabel25.setText("Particulars:");

        perticulars.setText("jLabel26");

        jLabel24.setText("Start Date:");

        startDate.setText("jLabel26");

        jLabel26.setText("End Date:");

        endDate.setText("jLabel27");

        jLabel27.setText("Rate:");

        rate.setText("jLabel28");

        jLabel31.setText("Account:");

        account.setText("jLabel41");

        jLabel42.setText("Amount:");

        amount.setText("jLabel43");

        jLabel44.setText("Remark:");

        amcRemark.setText("jLabel45");

        jLabel46.setText("Reminder Date:");

        reminderDate.setText("jLabel47");

        jLabel48.setText("Document Attached:");

        jLabel49.setText("Approved By:");

        approvedBy.setText("jLabel50");

        jLabel51.setText("Approved Date:");

        approvedDate.setText("jLabel52");

        jLabel28.setForeground(new java.awt.Color(0, 0, 204));
        jLabel28.setText(" NonAMC Details:");

        jLabel41.setText("Name of Service Provider:");

        serviceProvider.setText("jLabel43");

        jLabel47.setText("Contact Person:");

        contactPerson.setText("jLabel50");

        jLabel52.setText("Contact Detals:");

        contactDet.setText("jLabel53");

        jLabel54.setText("Remarks:");

        remarks.setText("jLabel55");

        jLabel50.setForeground(new java.awt.Color(0, 51, 204));
        jLabel50.setText("Revaluation Details:");

        jLabel53.setText("Date of Revaluation:");

        dor_txt.setText("jLabel55");

        jLabel56.setText("Revaluation Amount:");

        revAmount.setText("jLabel57");

        jLabel58.setText("Reason For Revaluation:");

        resnRev.setText("jLabel59");

        jLabel60.setText("Revaluation Account Detail:");

        revAccDet.setText("jLabel61");

        jLabel55.setText("Revaluation Documents:");

        jLabel57.setForeground(new java.awt.Color(0, 0, 204));
        jLabel57.setText("Maintainance Details:");

        jLabel59.setText("Date:");

        mainDate.setText("jLabel61");

        jLabel61.setText("Amount:");

        mainAmount.setText("jLabel62");

        jLabel63.setText("Voucher Detal:");

        voucherDet.setText("jLabel64");

        jLabel65.setText("Scanned Copy :");

        jLabel67.setText("Dr to Head of Account:");

        DrHeadAcc.setText("jLabel68");

        jLabel62.setForeground(new java.awt.Color(0, 51, 204));
        jLabel62.setText("Write Off Details:");

        jLabel64.setText("Date of WO:");

        dow.setText("jLabel66");

        jLabel68.setText("Reason for WO:");

        reasonWo.setText("jLabel69");

        jLabel70.setText(" Wo Documents:");

        jLabel72.setText("Scrap/ Recoverd Value:");

        scrpVal.setText("jLabel73");

        jLabel74.setText("Voucher Details:");

        woVoucherDet.setText("jLabel75");

        jLabel76.setText("Wo Initiated By:");

        woInBy.setText("jLabel77");

        jLabel78.setText("WO Approved By:");

        woAppBy.setText("jLabel79");

        amcDoc.setText("View");
        amcDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amcDocActionPerformed(evt);
            }
        });

        revDoc.setText("View");
        revDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revDocActionPerformed(evt);
            }
        });

        mainDoc.setText("View");
        mainDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainDocActionPerformed(evt);
            }
        });

        woDoc.setText("View");
        woDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                woDocActionPerformed(evt);
            }
        });

        jLabel18.setText("WDV Date");

        wdvDateLbl.setText("jLabel43");

        jLabel43.setText("Make");

        makeLb.setText("jLabel45");

        jLabel45.setText("Model");

        modelLb.setText("jLabel66");

        jLabel66.setText("Begining of Financial Year for WDV");

        wdvDateLb.setText("jLabel69");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel30, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(44, 44, 44)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dateofpur_txt, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                    .addComponent(name_txt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(subhead_txt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(vendor_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(acchead_txt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                                    .addComponent(standalone_txt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(anotherasset_txt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(subsidiary_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(barcode_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cread_by, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cretd_date, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(totalcst_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(dateofinss_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(86, 86, 86))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(36, 36, 36)
                            .addComponent(dor_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(138, 138, 138))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(41, 41, 41)
                            .addComponent(phyBarcode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(101, 101, 101))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(verBy, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                                            .addComponent(jLabel47, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(serviceProvider, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                                            .addComponent(contactPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel56)
                                        .addGap(60, 60, 60)
                                        .addComponent(revAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(27, 27, 27))
                                    .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel27)
                                            .addComponent(jLabel49, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(approvedBy, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(rate)
                                                .addComponent(endDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(contractor, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                                                .addGap(33, 33, 33)
                                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(perticulars, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(revDoc))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel59, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(mainDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel57, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel61, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(mainAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel78, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(woAppBy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel74, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(woVoucherDet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel70, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(woDoc))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel62, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                                            .addComponent(jLabel64, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addComponent(dow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel67, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(DrHeadAcc, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(33, 33, 33)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(verDate, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(verRemark, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGap(101, 101, 101)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel34)
                            .addComponent(jLabel33)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(340, 340, 340)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel36)
                            .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel35)
                            .addComponent(jLabel38))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateofcomm_txt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateofuse_txt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateofcapt_txt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rateofdepr_txt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel39)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(agency_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(wdvcost_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(wdvDateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addComponent(Cor_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel76, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel72, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel68, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel65, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel63, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel51, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel48, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel44, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel46, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel52, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel54, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel58, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel60, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                                    .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(46, 46, 46)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(account, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                                        .addComponent(amount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(amcRemark, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(reminderDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(approvedDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(contactDet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(remarks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(scrpVal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                                        .addComponent(reasonWo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(voucherDet, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(resnRev, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(revAccDet, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(woInBy)
                                    .addComponent(amcDoc)
                                    .addComponent(mainDoc)))
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel42)
                            .addComponent(assetImg, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel45, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                                    .addComponent(jLabel43, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(86, 86, 86)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(makeLb, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(modelLb, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel66, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(wdvDateLb, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(name_txt)
                    .addComponent(jLabel43)
                    .addComponent(makeLb))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(subhead_txt)
                    .addComponent(jLabel45)
                    .addComponent(modelLb))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(subsidiary_txt)
                    .addComponent(jLabel35)
                    .addComponent(dateofcomm_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(acchead_txt)
                    .addComponent(jLabel36)
                    .addComponent(dateofuse_txt))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(standalone_txt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel37)
                    .addComponent(dateofcapt_txt))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(anotherasset_txt)
                    .addComponent(jLabel38)
                    .addComponent(rateofdepr_txt))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label)
                    .addComponent(vendor_txt)
                    .addComponent(jLabel39)
                    .addComponent(wdvcost_txt))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(barcode_txt)
                            .addComponent(jLabel40)
                            .addComponent(agency_txt)))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dateofpur_txt)
                        .addComponent(jLabel18)
                        .addComponent(wdvDateLbl)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cread_by)
                    .addComponent(jLabel10)
                    .addComponent(Cor_txt))
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(cretd_date)
                    .addComponent(jLabel66)
                    .addComponent(wdvDateLb))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel33)
                            .addComponent(totalcst_txt))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel34)
                            .addComponent(dateofinss_txt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(verBy))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(verDate, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(verRemark, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(phyBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(assetImg, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel19)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(contractor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31)
                    .addComponent(account))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(perticulars)
                    .addComponent(jLabel42)
                    .addComponent(amount))
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(startDate)
                    .addComponent(jLabel44)
                    .addComponent(amcRemark))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(endDate)
                    .addComponent(jLabel46)
                    .addComponent(reminderDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(rate)
                    .addComponent(jLabel48)
                    .addComponent(amcDoc))
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(approvedBy)
                    .addComponent(jLabel49)
                    .addComponent(jLabel51)
                    .addComponent(approvedDate))
                .addGap(18, 18, 18)
                .addComponent(jLabel28)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(serviceProvider)
                    .addComponent(jLabel52)
                    .addComponent(contactDet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(contactPerson)
                    .addComponent(jLabel54)
                    .addComponent(remarks))
                .addGap(18, 18, 18)
                .addComponent(jLabel50)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(dor_txt)
                    .addComponent(jLabel58)
                    .addComponent(resnRev))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel56)
                    .addComponent(revAmount)
                    .addComponent(jLabel60)
                    .addComponent(revAccDet))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel55)
                    .addComponent(revDoc))
                .addGap(18, 18, 18)
                .addComponent(jLabel57)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel59)
                    .addComponent(mainDate)
                    .addComponent(jLabel63)
                    .addComponent(voucherDet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel61)
                            .addComponent(mainAmount)
                            .addComponent(jLabel65))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel67)
                            .addComponent(DrHeadAcc))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel62))
                    .addComponent(mainDoc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel64)
                    .addComponent(dow)
                    .addComponent(jLabel68)
                    .addComponent(reasonWo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel70)
                    .addComponent(jLabel72)
                    .addComponent(scrpVal)
                    .addComponent(woDoc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel74)
                    .addComponent(woVoucherDet)
                    .addComponent(jLabel76)
                    .addComponent(woInBy))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel78)
                    .addComponent(woAppBy))
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(back_but, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(397, 397, 397))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(back_but))
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel2);

        printFaDetail.setText("Print");
        printFaDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printFaDetailActionPerformed(evt);
            }
        });

        jCheckBox2.setText("Click to print details with Barcode  ");
        jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox2ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 182, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addComponent(printFaDetail)
                .addGap(32, 32, 32))
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 527, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(printFaDetail)
                    .addComponent(jCheckBox2))
                .addGap(811, 811, 811))
        );
    }// </editor-fold>//GEN-END:initComponents
protected static Window getWindow(Component parent) {
        if (parent == null) {
            return new JFrame();
        } else if (parent instanceof Frame || parent instanceof Dialog) {
            return (Window) parent;
        } else {
            return getWindow(parent.getParent());
        }
    }

    private void month_RdoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_month_RdoItemStateChanged
        jTable2.setModel(new DefaultTableModel());
        DateSelect.setVisible(false);
        DateSelect1.setVisible(false);
        frmDate.setVisible(false);
        toDate_txt.setVisible(false);


    }//GEN-LAST:event_month_RdoItemStateChanged

    private void period_RdoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_period_RdoItemStateChanged
        jTable2.setModel(new DefaultTableModel());
        DateSelect.setVisible(true);
        DateSelect1.setVisible(true);
        frmDate.setVisible(true);
        toDate_txt.setVisible(true);
        frmDate.setText("");
        toDate_txt.setText("");

    }//GEN-LAST:event_period_RdoItemStateChanged

    private void report_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report_butActionPerformed
        String asset;
        if (elements.getSelectedItem() != null) {
            header = elements.getSelectedItem().toString();

        } else {

            header = "ALL";

        }
        if (assetcombo.getSelectedItem() != null) {
            asset = assetcombo.getSelectedItem().toString();

        } else {

            asset = "ALL";

        }

        try {
            fromDate = (Date) Formats.TIMESTAMP.parseValue(frmDate.getText());
        } catch (BasicException ex) {
            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {

            toDat = (Date) Formats.TIMESTAMP.parseValue(toDate_txt.getText());
        } catch (BasicException ex) {
            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
        }
        String dt = Formats.DATE.formatValue(new Date());

        if (month_Rdo.isSelected()) {
            perioddate = "period:" + new Date();

        } else {
            perioddate = "Period:" + fromDate + "" + " " + "to" + " " + "" + toDat;

        }
        Date date = new Date();

        if (month_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFa(m_App);
            } catch (BasicException ex) {
                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", "Fixed Assets Report");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajCls(m_App, header);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubCls(m_App, header, subsidiar);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }
        }

        if (month_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadpartFAFa(m_App, asset);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

            }
        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFAFabyMajCls(m_App, header, asset);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFAFabyMajClsSubCls(m_App, header, subsidiar, asset);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }
        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {

            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActive(m_App);
            } catch (BasicException ex) {
                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", "Fixed Assets Report");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActive(m_App, header);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActive(m_App, header, subsidiar);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWo(m_App);
            } catch (BasicException ex) {
                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", "Fixed Assets Report");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWo(m_App, header);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWo(m_App, header, subsidiar);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {

                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        }

        //by order of purchase date
        if (month_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFaorder(m_App);
            } catch (BasicException ex) {
                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", "Fixed Assets Report");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsorder(m_App, header);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsorder(m_App, header, subsidiar);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }
        }
        if (month_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFaorder(m_App, asset);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

            }
        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsorder(m_App, header, asset);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsSubClsorder(m_App, header, subsidiar, asset);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }
        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {

            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActiveorder(m_App);
            } catch (BasicException ex) {
                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", "Fixed Assets Report");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActiveorder(m_App, header);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActiveorder(m_App, header, subsidiar);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWoorder(m_App);
            } catch (BasicException ex) {
                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", "Fixed Assets Report");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWoorder(m_App, header);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWoorder(m_App, header, subsidiar);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        }

        //based on period 
        if (period_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFacrdt(m_App, fromDate, toDat);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClscrdt(m_App, header, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClscrdt(m_App, header, subsidiar, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }

        if (period_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFacrdt(m_App, fromDate, toDat, asset);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClscrdt(m_App, header, fromDate, toDat, asset);
                            } catch (BasicException ex) {
                                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                            data1.setDataSource(dsfc);
                            Map reportparams = new HashMap();
                            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                            String RPH = ReportHeader;
                            reportparams.put("ReportHeader", RPH);
                            reportparams.put("date", perioddate);
                            reportparams.put("TITLE", "Fixed Assets Report");
                            reportparams.put("SubHead", header);

                            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                        }
                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsSubClscrdt(m_App, header, subsidiar, fromDate, toDat, asset);
                            } catch (BasicException ex) {
                                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                            data1.setDataSource(dsfc);
                            Map reportparams = new HashMap();
                            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                            String RPH = ReportHeader;
                            reportparams.put("ReportHeader", RPH);
                            reportparams.put("date", perioddate);
                            reportparams.put("TITLE", "Fixed Assets Report");
                            reportparams.put("SubHead", header);

                            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActivecrdt(m_App, fromDate, toDat);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActivecrdt(m_App, header, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActivecrdt(m_App, header, subsidiar, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {

                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {

            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWocrdt(m_App, fromDate, toDat);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWocrdt(m_App, header, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWocrdt(m_App, header, subsidiar, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }

        //order by date of purchase
        if (period_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFaordercrdt(m_App, fromDate, toDat);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsordercrdt(m_App, header, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsordercrdt(m_App, header, subsidiar, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
        if (period_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFaordercrdt(m_App, fromDate, toDat, asset);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsordercrdt(m_App, header, fromDate, toDat, asset);
                            } catch (BasicException ex) {
                                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                            data1.setDataSource(dsfc);
                            Map reportparams = new HashMap();
                            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                            String RPH = ReportHeader;
                            reportparams.put("ReportHeader", RPH);
                            reportparams.put("date", perioddate);
                            reportparams.put("TITLE", "Fixed Assets Report");
                            reportparams.put("SubHead", header);

                            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                        }
                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsSubClsordercrdt(m_App, header, subsidiar, fromDate, toDat, asset);
                            } catch (BasicException ex) {
                                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                            data1.setDataSource(dsfc);
                            Map reportparams = new HashMap();
                            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                            String RPH = ReportHeader;
                            reportparams.put("ReportHeader", RPH);
                            reportparams.put("date", perioddate);
                            reportparams.put("TITLE", "Fixed Assets Report");
                            reportparams.put("SubHead", header);

                            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActiveordercrdt(m_App, fromDate, toDat);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActiveordercrdt(m_App, header, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActiveordercrdt(m_App, header, subsidiar, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {

            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWoordercrdt(m_App, fromDate, toDat);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWoordercrdt(m_App, header, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWoordercrdt(m_App, header, subsidiar, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }


    }//GEN-LAST:event_report_butActionPerformed

    private void month_RdoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_month_RdoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_month_RdoActionPerformed

    private void viewList_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewList_butActionPerformed
        jTable2.setVisible(true);

        String asset;
        if (elements.getSelectedItem() != null) {
            header = elements.getSelectedItem().toString();

        } else {

            header = "ALL";

        }
        if (assetcombo.getSelectedItem() != null) {
            asset = assetcombo.getSelectedItem().toString();

        } else {

            asset = "ALL";

        }

        try {
            if(frmDate.getText().trim().length()>0)
            fromDate = (Date) Formats.TIMESTAMP.parseValue(frmDate.getText());
        } catch (BasicException ex) {
            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            if(toDate_txt.getText().trim().length()>0)
            toDat = (Date) Formats.TIMESTAMP.parseValue(toDate_txt.getText());
        } catch (BasicException ex) {
            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
        }
        String dt = Formats.DATE.formatValue(new Date());

        if (month_Rdo.isSelected()) {
            perioddate = "period:" + dt;

        } else {
            perioddate = "Period:" + fromDate + "" + "to" + "" + toDat;

        }
        Date date = new Date();

        if (month_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFa(m_App);
                jTable2.setModel(FA_Table_Model.getTableModel());
                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            } catch (BasicException ex) {
                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajCls(m_App, header);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubCls(m_App, header, subsidiar);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        }

        if (month_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadpartFAFa(m_App, asset);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFAFabyMajCls(m_App, header, asset);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFAFabyMajClsSubCls(m_App, header, subsidiar, asset);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {

            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActive(m_App);
                jTable2.setModel(FA_Table_Model.getTableModel());
                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            } catch (BasicException ex) {
                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActive(m_App, header);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActive(m_App, header, subsidiar);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }

        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWo(m_App);
                jTable2.setModel(FA_Table_Model.getTableModel());
                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            } catch (BasicException ex) {
                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWo(m_App, header);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWo(m_App, header, subsidiar);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {

                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }

        }

        //by order of purchase date
        if (month_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFaorder(m_App);
                jTable2.setModel(FA_Table_Model.getTableModel());
                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            } catch (BasicException ex) {
                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsorder(m_App, header);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsorder(m_App, header, subsidiar);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        }
        if (month_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFaorder(m_App, asset);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsorder(m_App, header, asset);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsSubClsorder(m_App, header, subsidiar, asset);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {

            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActiveorder(m_App);
                jTable2.setModel(FA_Table_Model.getTableModel());
                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            } catch (BasicException ex) {
                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActiveorder(m_App, header);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActiveorder(m_App, header, subsidiar);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }

        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWoorder(m_App);
                jTable2.setModel(FA_Table_Model.getTableModel());
                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            } catch (BasicException ex) {
                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWoorder(m_App, header);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWoorder(m_App, header, subsidiar);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }

        }

        //based on period 
        if (period_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFacrdt(m_App, fromDate, toDat);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClscrdt(m_App, header, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClscrdt(m_App, header, subsidiar, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        }

        if (period_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFacrdt(m_App, fromDate, toDat, asset);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClscrdt(m_App, header, fromDate, toDat, asset);
                                jTable2.setModel(FA_Table_Model.getTableModel());
                                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                            } catch (BasicException ex) {
                                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                            jTable2.setModel(new DefaultTableModel());
                            viewfulldoc_but.setVisible(false);
                        }
                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsSubClscrdt(m_App, header, subsidiar, fromDate, toDat, asset);
                                jTable2.setModel(FA_Table_Model.getTableModel());
                                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                            } catch (BasicException ex) {
                                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                            jTable2.setModel(new DefaultTableModel());
                            viewfulldoc_but.setVisible(false);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActivecrdt(m_App, fromDate, toDat);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActivecrdt(m_App, header, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActivecrdt(m_App, header, subsidiar, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {

                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {

            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWocrdt(m_App, fromDate, toDat);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWocrdt(m_App, header, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWocrdt(m_App, header, subsidiar, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        }

        //order by date of purchase
        if (period_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFaordercrdt(m_App, fromDate, toDat);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsordercrdt(m_App, header, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsordercrdt(m_App, header, subsidiar, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        }
        if (period_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFaordercrdt(m_App, fromDate, toDat, asset);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsordercrdt(m_App, header, fromDate, toDat, asset);
                                jTable2.setModel(FA_Table_Model.getTableModel());
                                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                            } catch (BasicException ex) {
                                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                            jTable2.setModel(new DefaultTableModel());
                            viewfulldoc_but.setVisible(false);
                        }
                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsSubClsordercrdt(m_App, header, subsidiar, fromDate, toDat, asset);
                                jTable2.setModel(FA_Table_Model.getTableModel());
                                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                            } catch (BasicException ex) {
                                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                            jTable2.setModel(new DefaultTableModel());
                            viewfulldoc_but.setVisible(false);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActiveordercrdt(m_App, fromDate, toDat);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActiveordercrdt(m_App, header, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActiveordercrdt(m_App, header, subsidiar, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {

            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWoordercrdt(m_App, fromDate, toDat);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } catch (BasicException ex) {
                        Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWoordercrdt(m_App, header, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWoordercrdt(m_App, header, subsidiar, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } catch (BasicException ex) {
                            Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        }


    }//GEN-LAST:event_viewList_butActionPerformed

    private void DateSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateSelectActionPerformed

        Date date = new Date();
        try {
            date = (Date) Formats.TIMESTAMP.parseValue(frmDate.getText());
        } catch (BasicException e) {
            date = null;
        }

        try {
            date = JCalendarDialog.showCalendarTimeHours(this, date);
            if (date != null) {
                Calendar cal = Calendar.getInstance();
                cal.setTimeInMillis((date).getTime());

                frmDate.setText(Formats.TIMESTAMP.formatValue(cal.getTime()));
            }
        } catch (Exception e1) {
            e1.printStackTrace();
        }
    }//GEN-LAST:event_DateSelectActionPerformed

    private void DateSelect1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateSelect1ActionPerformed

        Date date = new Date();
        try {
            date = (Date) Formats.TIMESTAMP.parseValue(toDate_txt.getText());
        } catch (BasicException e) {
            date = null;
        }

        try {
            date = JCalendarDialog.showCalendarTimeHours(this, date);
            if (date != null) {
                Calendar cal = Calendar.getInstance();
                cal.setTimeInMillis((date).getTime());

                toDate_txt.setText(Formats.TIMESTAMP.formatValue(cal.getTime()));
            }
        } catch (Exception e1) {
            e1.printStackTrace();
        }
    }//GEN-LAST:event_DateSelect1ActionPerformed

    private void all_radbutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_all_radbutItemStateChanged
        if (all_radbut.isSelected()) {
            subhead_panel.setVisible(false);
            subsidiary_panel.setVisible(false);
            elements.setSelectedIndex(-1);
            mainheads.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_all_radbutItemStateChanged

    private void subhead_radbutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subhead_radbutItemStateChanged
        if (subhead_radbut.isSelected()) {

            subhead_panel.setVisible(true);
            subsidiary_panel.setVisible(true);

        } else {
            subhead_panel.setVisible(false);
            subsidiary_panel.setVisible(false);

        }
    }//GEN-LAST:event_subhead_radbutItemStateChanged

    private void elementsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_elementsItemStateChanged
        if (elements.getSelectedItem() == null) {
            mainheads.setSelectedIndex(-1);
            mainheads.setModel(new DefaultComboBoxModel());
        }
        if (elements.getSelectedIndex() != -1) {
            try {

                AccountMasterExt mele = (AccountMasterExt) elements.getSelectedItem();
                List<AccountMasterExt> acc = dmang.getaccountMainHeads(mele.getSerachkey());
                acc.add(0, null);
                mainheadsModel = new ComboBoxValModel(acc);
                mainheads.setModel(mainheadsModel);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_elementsItemStateChanged

    private void mainheadsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mainheadsItemStateChanged

    }//GEN-LAST:event_mainheadsItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            if (doclink != null) {
                doclink = doclink;
            } else {
                doclink = "";

            }
            File file1 = new File(doclink.replace("./", ""));;
            if (file1.exists() == true) {

                java.awt.Desktop.getDesktop().open(file1);
            } else {
                JOptionPane.showMessageDialog(this, "File  not Found", null, JOptionPane.OK_OPTION);

            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void viewfulldoc_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewfulldoc_butActionPerformed
        if (jTable2.getSelectedRow() != -1) {
            resetAssetAllDetails();
            int row = jTable2.getSelectedRow();
            
            ListOfAllAssetsTableModel.AssetInfo asset = FA_Table_Model.getFAList().get(row);
           
            jPanel2.setVisible(true);
            jPanel1.setVisible(false);
            String name = asset.getName();
            String majcls = asset.getMajcls();
            String subhead = asset.getSubHead();
            String acchead = asset.getAccHead();
            String standalone = asset.getstand_alone();
            String assetan = asset.getAsset();
            String vendor = asset.getVendor();
            Double totcost = asset.getcost();
            Double rateofdep = asset.getrod();
            Double cor = asset.getcor();
            Double wdv = asset.getwdv();
            String agency = asset.getAgency();
            Date dateofpur = asset.getPurchaseDate();
            Date dateofinst = asset.getInstDate();
            Date dateofcapt = asset.getCptDate();
            Date dateofcomm = asset.getCommDate();
            Date dateofuse = asset.getUseDate();
            String barcd = asset.getBarcode();
            String crdt_by = asset.getCreated_by();
            Date crdt_date = asset.getcreated_Date();
            makeLb.setText(asset.getMake());
            modelLb.setText(asset.getModel());
            wdvDateLb.setText(asset.getWdvDate().toString());
            ///////////////////////////////////////////////////////////////////////pratima
            if(assetPhysicalVerDetail(m_App,asset.getId()).size()>0){
            PhysicalVerificationTableModel.PhysicalVerificationInfo phyverInfo = assetPhysicalVerDetail(m_App,asset.getId()).get(0);
            
            verDate.setText(phyverInfo.getCreatedDate()); verDate.setVisible(true);
            reportparams1.put("pverDate",phyverInfo.getCreatedDate() );
           
            verBy.setText(phyverInfo.getCreatedBy());verBy.setVisible(true);
             reportparams1.put("pverBy",phyverInfo.getCreatedBy());
           
             verRemark.setText(phyverInfo.getremarks());verRemark.setVisible(true);
            reportparams1.put("pverRemark",phyverInfo.getremarks());
            
            phyBarcode.setText(phyverInfo.getBarcode());phyBarcode.setVisible(true);
            reportparams1.put("pBarcode",phyverInfo.getBarcode());
            
           assetImg.setIcon(ResizeImage(phyverInfo.getphotolink()));assetImg.setVisible(true); 
           reportparams1.put("pImage",getImage(phyverInfo.getphotolink()));
            }
            
            if(assetAmcandNonAmcDetail(m_App, asset.getId()).size()>0){
            AmcNNonamcTableModel.AmcInfo amcInfo=assetAmcandNonAmcDetail(m_App, asset.getId()).get(0);
            
            contractor.setText(amcInfo.getContrator());contractor.setVisible(true);
             reportparams1.put("amContractor",amcInfo.getContrator());
             
            account.setText(amcInfo.getaccount());account.setVisible(true);
             reportparams1.put("amAccount",amcInfo.getaccount());
             
            amount.setText(amcInfo.getAmount().toString());amount.setVisible(true);
             reportparams1.put("amAmount",amcInfo.getAmount().toString());
             
            perticulars.setText(amcInfo.getParticular());perticulars.setVisible(true);
             reportparams1.put("amParticular",amcInfo.getParticular());
             
            startDate.setText(amcInfo.getStartDate());startDate.setVisible(true);
             reportparams1.put("amSDate",amcInfo.getStartDate());
             
            amcRemark.setText(amcInfo.getRemark());amcRemark.setVisible(true);
             reportparams1.put("amRemark",amcInfo.getRemark());
             
            rate.setText(amcInfo.getRate().toString());rate.setVisible(true);
             reportparams1.put("amRate",amcInfo.getRate().toString());
             
            reminderDate.setText(amcInfo.getRenewalDate()); reminderDate.setVisible(true);
             reportparams1.put("amRenewalDate",amcInfo.getRenewalDate());
             
            approvedBy.setText(amcInfo.getApprovedBy());approvedBy.setVisible(true);
             reportparams1.put("amAppby",amcInfo.getApprovedBy());
             
            approvedDate.setText(amcInfo.getApprovedDate());approvedDate.setVisible(true);
             reportparams1.put("amAppdate",amcInfo.getApprovedDate());
             
            amcDocLink=amcInfo.getDocLink();
                  
            }
            
            
            if(assetNonAmcDetail(m_App, asset.getId()).size()>0){
            AmcNNonamcTableModel.NonamcInfo nonAmcInfo= assetNonAmcDetail(m_App, asset.getId()).get(0);
            serviceProvider.setText(nonAmcInfo.getvendor());serviceProvider.setVisible(true);
            reportparams1.put("namvendor",nonAmcInfo.getvendor());
            contactDet.setText(nonAmcInfo.getcontact_det()); contactDet.setVisible(true);
              reportparams1.put("namcontactdet",nonAmcInfo.getcontact_det());
            contactPerson.setText(nonAmcInfo.getcontact_per()); contactPerson.setVisible(true);
             reportparams1.put("namcontactper",nonAmcInfo.getcontact_per());
            remarks.setText(nonAmcInfo.getRemark()); remarks.setVisible(true);
             reportparams1.put("namremark",nonAmcInfo.getRemark());
            }   
         
            if(assetRevaluationDetail(m_App,asset.getId()).size()>0){
            RevaluationTableModel.RevaluationInfo revaluationInfo=assetRevaluationDetail(m_App,asset.getId()).get(0);
            revAmount.setText(revaluationInfo.getRevAmt().toString());revAmount.setVisible(true);
            reportparams1.put("revAmt",revaluationInfo.getRevAmt());
            dor_txt.setText(revaluationInfo.getCreatedDate().toString());dor_txt.setVisible(true);
                  reportparams1.put("revCreateddate",revaluationInfo.getCreatedDate().toString());
            resnRev.setText(revaluationInfo.getRevRes());resnRev.setVisible(true);
                  reportparams1.put("revRes",revaluationInfo.getRevRes());
            revAccDet.setText(revaluationInfo.getRevActDet());revAccDet.setVisible(true);
                  reportparams1.put("revActDet",revaluationInfo.getRevActDet());
            revDocLink=revaluationInfo.getdoc_link();
            }
            
            if(assetMaintainanceDetail(m_App,asset.getId()).size()>0){
            MaintenanceTableModel.MaintenanceInfo maintainanceInfo= assetMaintainanceDetail(m_App,asset.getId()).get(0);
            mainDate.setText(maintainanceInfo.getDate()); mainDate.setVisible(true);
            reportparams1.put("mainDate",maintainanceInfo.getDate());
            mainAmount.setText(maintainanceInfo.getAmount().toString());  mainAmount.setVisible(true);
            reportparams1.put("mainAmount",maintainanceInfo.getAmount().toString()); 
            voucherDet.setText(maintainanceInfo.getVoucherDetail()); voucherDet.setVisible(true);
            reportparams1.put("mainVoucher",maintainanceInfo.getVoucherDetail()); 
            DrHeadAcc.setText(maintainanceInfo.getAccountHead());
             reportparams1.put("mainAcc",maintainanceInfo.getAccountHead());
                mainDocLink=maintainanceInfo.getScannedCopy();
            }
//            
            if(assetWriteoffDetail(m_App,asset.getId()).size()>0){
            WriteOffDetailsTableModel.WriteOffDetailsInfo woDetail= assetWriteoffDetail(m_App,asset.getId()).get(0);
            woAppBy.setText(woDetail.getApprovedBy());woAppBy.setVisible(true);
             reportparams1.put("woAppBy",woDetail.getApprovedBy());
            dow.setText(woDetail.getDateOfWo());dow.setVisible(true);
             reportparams1.put("woDate",woDetail.getDateOfWo().toString());
            reasonWo.setText(woDetail.getWoRes()); reasonWo.setVisible(true);
             reportparams1.put("woRes",woDetail.getWoRes());
            scrpVal.setText(woDetail.getSCRAP_OR_REC_VAL());scrpVal.setVisible(true);
            reportparams1.put("woScrapOrRec",woDetail.getSCRAP_OR_REC_VAL());
            woInBy.setText(woDetail.getInitiatedBy());woInBy.setVisible(true);
             reportparams1.put("woinitiatedby",woDetail.getInitiatedBy());
            woDocLink=woDetail.getdoc_link();
            }
//            


            ///////////////////////////////////////////////////////////////////////////////
            doclink = asset.getScadoc();
            try {
                if (doclink != null) {
                    doclink = doclink;
                } else {
                    doclink = "";

                }
                File file1 = new File(doclink.replace("./", ""));;
                if (file1.exists() == true) {

                    jButton1.setVisible(true);
                } else {

                    jButton1.setVisible(false);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (name != null) {
                name_txt.setText(":" + " " + name + "");
            } else {
                name_txt.setText(":" + "");
            }
            if (crdt_by != null) {
                cread_by.setText(":" + " " + crdt_by + "");
            } else {
                cread_by.setText(":" + "");
            }
            if (barcd != null) {
                barcode_txt.setText(":" + " " + barcd + "");
            } else {
                barcode_txt.setText(":" + "");
            }

            if (majcls != null) {
                subhead_txt.setText(":" + " " + majcls + "");
            } else {
                subhead_txt.setText(":" + "");
            }

            if (subhead != null) {
                subsidiary_txt.setText(":" + " " + subhead + "");
            } else {
                subsidiary_txt.setText(":" + "");
            }
            if (acchead != null) {
                acchead_txt.setText(":" + " " + acchead + "");
            } else {
                acchead_txt.setText(":" + "");
            }

            if (standalone != null) {
                standalone_txt.setText(":" + " " + standalone + "");
            } else {
                standalone_txt.setText(":" + "");
            }

            if (assetan != null) {
                anotherasset_txt.setText(":" + " " + assetan + "");
            } else {
                anotherasset_txt.setText(":" + "");
            }

            if (vendor != null) {
                vendor_txt.setText(":" + " " + vendor + "");
            } else {
                vendor_txt.setText(":" + "");
            }

            if (totcost != null) {
                totalcst_txt.setText(":" + " " + decimalFormat.format(totcost) + "");
            } else {
                totalcst_txt.setText(":" + "");
            }

            if (rateofdep != null) {
                String r = decimalFormat.format(rateofdep);

                rateofdepr_txt.setText(":" + " " + r + "%" + "");
            } else {
                rateofdepr_txt.setText(":" + "");
            }
            if (cor != null) {
                Cor_txt.setText(":" + " " + decimalFormat.format(cor) + "");
            } else {
                Cor_txt.setText(":" + "");
            }

            if (wdv != null) {
                wdvcost_txt.setText(":" + " " + decimalFormat.format(wdv) + "");
            } else {
                wdvcost_txt.setText(":" + "");
            }

            if (dateofcapt != null) {
                dateofcapt_txt.setText(":" + " " + Formats.TIMESTAMP.formatValue(dateofcapt) + "");
            } else {
                dateofcapt_txt.setText(":" + "");
            }
            if (crdt_date != null) {
                cretd_date.setText(":" + " " + Formats.TIMESTAMP.formatValue(crdt_date) + "");
            } else {
                cretd_date.setText(":" + "");
            }
            if (dateofuse != null) {
                dateofuse_txt.setText(":" + " " + Formats.TIMESTAMP.formatValue(dateofuse) + "");
            } else {
                dateofuse_txt.setText(":" + "");
            }

            if (dateofinst != null) {
                dateofinss_txt.setText(":" + " " + Formats.TIMESTAMP.formatValue(dateofinst) + "");
            } else {
                dateofinss_txt.setText(":" + "");
            }

            if (dateofcomm != null) {
                dateofcomm_txt.setText(":" + " " + Formats.TIMESTAMP.formatValue(dateofcomm) + "");
            } else {
                dateofcomm_txt.setText(":" + "");
            }

            if (dateofpur != null) {
                dateofpur_txt.setText(":" + " " + Formats.TIMESTAMP.formatValue(dateofpur) + "");
            } else {
                dateofpur_txt.setText(":" + "");
            }

            if (agency != null) {
                agency_txt.setText(":" + " " + agency + "");
            } else {
                agency_txt.setText(":" + "");
            }

        }
    }//GEN-LAST:event_viewfulldoc_butActionPerformed

    private void back_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_butActionPerformed
        jPanel1.setVisible(true);
        jPanel2.setVisible(false);
    }//GEN-LAST:event_back_butActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        if (jTable2.getSelectedRow() != -1) {
            viewfulldoc_but.setVisible(true);
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void toDate_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toDate_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toDate_txtActionPerformed

    private void partItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_partItemStateChanged
        if (part.isSelected()) {
            combo_panel.setVisible(true);
        } else {
            combo_panel.setVisible(false);
            assetcombo.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_partItemStateChanged

    private void viewfulldoc_butMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewfulldoc_butMouseClicked
        if (jTable2.getSelectedRow() != -1) {
            
            viewfulldoc_but.setVisible(true);
            
        } else {
            JOptionPane.showMessageDialog(this, "select table row ", null, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_viewfulldoc_butMouseClicked

    private void amcDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amcDocActionPerformed
        // TODO add your handling code here:
          try {
            
            File file1 = new File(amcDocLink.replace("./", ""));;
            if (file1.exists() == true) {

                java.awt.Desktop.getDesktop().open(file1);
            } else {
                JOptionPane.showMessageDialog(this, "File not Found", null, JOptionPane.OK_OPTION);

            }
        } catch (IOException e) {
            e.printStackTrace();
            Logger.getLogger(FixedAsset2.class.getName()).log(Level.SEVERE, null, e);

        }
        
    }//GEN-LAST:event_amcDocActionPerformed

    private void revDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revDocActionPerformed
        // TODO add your handling code here:
         try {
            
            File file1 = new File(revDocLink.replace("./", ""));;
            if (file1.exists() == true) {

                java.awt.Desktop.getDesktop().open(file1);
            } else {
                JOptionPane.showMessageDialog(this, "File not Found", null, JOptionPane.OK_OPTION);

            }
        } catch (IOException e) {
            e.printStackTrace();
            Logger.getLogger(FixedAsset2.class.getName()).log(Level.SEVERE, null, e);

        }
    }//GEN-LAST:event_revDocActionPerformed

    private void mainDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainDocActionPerformed
        // TODO add your handling code here:
         try {
            
            File file1 = new File(mainDocLink.replace("./", ""));;
            if (file1.exists() == true) {

                java.awt.Desktop.getDesktop().open(file1);
            } else {
                JOptionPane.showMessageDialog(this, "File not Found", null, JOptionPane.OK_OPTION);

            }
        } catch (IOException e) {
            e.printStackTrace();
            Logger.getLogger(FixedAsset2.class.getName()).log(Level.SEVERE, null, e);

        }
    }//GEN-LAST:event_mainDocActionPerformed

    private void woDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_woDocActionPerformed
        // TODO add your handling code here:
         try {
            
            File file1 = new File(woDocLink.replace("./", ""));;
            if (file1.exists() == true) {

                java.awt.Desktop.getDesktop().open(file1);
            } else {
                JOptionPane.showMessageDialog(this, "File not Found", null, JOptionPane.OK_OPTION);

            }
        } catch (IOException e) {
            e.printStackTrace();
            Logger.getLogger(FixedAsset2.class.getName()).log(Level.SEVERE, null, e);

        }
    }//GEN-LAST:event_woDocActionPerformed

    private void printFaDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printFaDetailActionPerformed
        // TODO add your handling code here:
         if (jTable2.getSelectedRow() != -1) {
            resetAssetAllDetails();
            int row = jTable2.getSelectedRow();
            
            ListOfAllAssetsTableModel.AssetInfo asset = FA_Table_Model.getFAList().get(row);
            
         FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActive(m_App);
                
            } catch (BasicException ex) {
                Logger.getLogger(ListOfFixedAssetsReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
            for(int i=0;i<FA_info_List_all.size();i++){
            if(!FA_info_List_all.get(i).getId().equals(asset.getId()))
            {  
                FA_info_List_all.remove(i);
                i--;
            }
            }
            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams1.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams1.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams1.put("ReportHeader", RPH);
            reportparams1.put("date", perioddate);
            reportparams1.put("TITLE", "Fixed Assets Report");
            reportparams1.put("SubHead", header);
            reportparams1.put("imgFlag",barcodeVisibleFlag);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/AllDetailFAReport.jrxml", reportparams1, false, data1, true, null);

        }
        
    }//GEN-LAST:event_printFaDetailActionPerformed

    private void jCheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox2ItemStateChanged
        // TODO add your handling code here:
        if(jCheckBox2.isSelected()){
        barcodeVisibleFlag=true;
        }
         if(!jCheckBox2.isSelected()){
          barcodeVisibleFlag=false;
         }
    }//GEN-LAST:event_jCheckBox2ItemStateChanged
    private class ItemsListModel extends AbstractListModel {

        private java.util.List items;

        public ItemsListModel(java.util.List items) {
            this.items = items;
        }

        public int getSize() {
            return items.size();
        }

        public Object getElementAt(int i) {
            return items.get(i);
        }
    }

    @Override
    public String getTitle() {
        return AppLocal.getIntString("List Of Fixed Assets");
    }

    @Override
    public void activate() throws BasicException {

        loaddata();
        ButtonGrp();
        jTable2.setVisible(false);

    }

    @Override
    public boolean deactivate() {
        return true;
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public void init(AppView app) throws BeanFactoryException {
        m_App = app;
        dmang = (DataLogicFacilities) m_App.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");

    }

    @Override
    public Object getBean() {
        return this;
    }

    public void loaddata() throws BasicException {
        all_radbut.setSelected(true);
        month_Rdo.setSelected(true);
        allactinact_rad.setSelected(true);
        alphbet_rad.setSelected(true);
        jPanel2.setVisible(false);
        jPanel1.setVisible(true);
        frmDate.setText(" ");
        toDate_txt.setText(" ");
        viewfulldoc_but.setVisible(false);
        elementsModel = new ComboBoxValModel(dmang.getaccountElements());
        elements.setModel(elementsModel);
        assetListModel = new ComboBoxValModel(getAssetList());
        assetcombo.setModel(assetListModel);
        combo_panel.setVisible(false);
    }

    public List getAssetList() throws BasicException {
        List<Object> assetList = new ArrayList<Object>();
        assetList = (List<Object>) new StaticSentence(m_App.getSession(), "select name from fa_master where active=true order by name ", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).list();

        return assetList;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Cor_txt;
    private javax.swing.JButton DateSelect;
    private javax.swing.JButton DateSelect1;
    private javax.swing.JLabel DrHeadAcc;
    private javax.swing.JLabel acchead_txt;
    private javax.swing.JLabel account;
    private javax.swing.JRadioButton actice_rad;
    private javax.swing.JLabel agency_txt;
    private javax.swing.JRadioButton all_radbut;
    private javax.swing.JRadioButton allactinact_rad;
    private javax.swing.JRadioButton alphbet_rad;
    private javax.swing.JButton amcDoc;
    private javax.swing.JLabel amcRemark;
    private javax.swing.JLabel amount;
    private javax.swing.JLabel anotherasset_txt;
    private javax.swing.JLabel approvedBy;
    private javax.swing.JLabel approvedDate;
    private javax.swing.JLabel assetImg;
    private javax.swing.JComboBox assetcombo;
    private javax.swing.JButton back_but;
    private javax.swing.JLabel barcode_txt;
    private javax.swing.JPanel combo_panel;
    private javax.swing.JLabel contactDet;
    private javax.swing.JLabel contactPerson;
    private javax.swing.JLabel contractor;
    private javax.swing.JLabel cread_by;
    private javax.swing.JLabel cretd_date;
    private javax.swing.JLabel dateofcapt_txt;
    private javax.swing.JLabel dateofcomm_txt;
    private javax.swing.JLabel dateofinss_txt;
    private javax.swing.JLabel dateofpur_txt;
    private javax.swing.JRadioButton dateofpurchase_rad;
    private javax.swing.JLabel dateofuse_txt;
    private javax.swing.JLabel dor_txt;
    private javax.swing.JLabel dow;
    private javax.swing.JComboBox elements;
    private javax.swing.JLabel endDate;
    private javax.swing.JTextField frmDate;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel label;
    private javax.swing.JLabel mainAmount;
    private javax.swing.JLabel mainDate;
    private javax.swing.JButton mainDoc;
    private javax.swing.JComboBox mainheads;
    private javax.swing.JLabel makeLb;
    private javax.swing.JLabel modelLb;
    private javax.swing.JRadioButton month_Rdo;
    private javax.swing.JLabel name_txt;
    private javax.swing.JRadioButton part;
    private javax.swing.JRadioButton period_Rdo;
    private javax.swing.JLabel perticulars;
    private javax.swing.JLabel phyBarcode;
    private javax.swing.JButton printFaDetail;
    private javax.swing.JLabel rate;
    private javax.swing.JLabel rateofdepr_txt;
    private javax.swing.JLabel reasonWo;
    private javax.swing.JLabel remarks;
    private javax.swing.JLabel reminderDate;
    private javax.swing.JButton report_but;
    private javax.swing.JLabel resnRev;
    private javax.swing.JLabel revAccDet;
    private javax.swing.JLabel revAmount;
    private javax.swing.JButton revDoc;
    private javax.swing.JLabel scrpVal;
    private javax.swing.JLabel serviceProvider;
    private javax.swing.JLabel standalone_txt;
    private javax.swing.JLabel startDate;
    private javax.swing.JPanel subhead_panel;
    private javax.swing.JRadioButton subhead_radbut;
    private javax.swing.JLabel subhead_txt;
    private javax.swing.JPanel subsidiary_panel;
    private javax.swing.JLabel subsidiary_txt;
    private javax.swing.JTextField toDate_txt;
    private javax.swing.JLabel totalcst_txt;
    private javax.swing.JLabel vendor_txt;
    private javax.swing.JLabel verBy;
    private javax.swing.JLabel verDate;
    private javax.swing.JLabel verRemark;
    private javax.swing.JButton viewList_but;
    private javax.swing.JButton viewfulldoc_but;
    private javax.swing.JLabel voucherDet;
    private javax.swing.JLabel wdvDateLb;
    private javax.swing.JLabel wdvDateLbl;
    private javax.swing.JLabel wdvcost_txt;
    private javax.swing.JLabel woAppBy;
    private javax.swing.JButton woDoc;
    private javax.swing.JLabel woInBy;
    private javax.swing.JLabel woVoucherDet;
    private javax.swing.JRadioButton wofa_rad;
    // End of variables declaration//GEN-END:variables

    public void ButtonGrp() {

        ButtonGroup bg1 = new ButtonGroup();
        bg1.add(month_Rdo);
        bg1.add(period_Rdo);

        ButtonGroup bg2 = new ButtonGroup();
        bg2.add(allactinact_rad);
        bg2.add(actice_rad);
        bg2.add(wofa_rad);
        bg2.add(part);

        ButtonGroup bg3 = new ButtonGroup();
        bg3.add(all_radbut);
        bg3.add(subhead_radbut);

        ButtonGroup bg4 = new ButtonGroup();
        bg4.add(alphbet_rad);
        bg4.add(dateofpurchase_rad);

    }
     ///////////////////////////////////////////////////////////by pratima
        public static List<PhysicalVerificationInfo>  assetPhysicalVerDetail(AppView m_App,String faid){
       // PhysicalVerificationTableModel phyVerInfo = new PhysicalVerificationTableModel(); 
        List<PhysicalVerificationInfo> data2 = new ArrayList<PhysicalVerificationInfo>();
        try{
        data2= new StaticSentence(m_App.getSession(), "select id,ver_date,ver_by,barcode_uid,photo,ver_remarks,created_by,created_date,location,active from fa_physicalverification where  fa_id=? and active=1 order by ver_by ", SerializerWriteString.INSTANCE, new SerializerReadClass(PhysicalVerificationTableModel.PhysicalVerificationInfo.class)).list(faid); 
        }catch(Exception ex){
        ex.printStackTrace();
        }
        if(data2!=null)
         return data2;        
         else return new ArrayList<PhysicalVerificationInfo>();
    }
        public static List<AmcNNonamcTableModel.AmcInfo> assetAmcandNonAmcDetail(AppView m_App,String faid){
         List<AmcInfo> data2= new ArrayList<AmcInfo>();
            try{
           data2 = new StaticSentence(m_App.getSession(), "select v.name,a.particular,a.start_date,a.period,a.end_date,a.rate,a.account,a.amount,a.remark,a.reminder_date,a.doc_link,a.initiator,a.initiated_date,a.id,a.active,approved_by,a.approved_date from fa_amc a,vendor v  where a.active=true and  v.id=a.contractor and  a.fa_id=?  ", SerializerWriteString.INSTANCE, new SerializerReadClass(AmcNNonamcTableModel.AmcInfo.class)).list(faid);
            } catch(Exception ex){
            ex.printStackTrace();
                  }
            if(data2!=null)
            return data2;
            else return new ArrayList<AmcInfo>();
            }
          public static List<RevaluationTableModel.RevaluationInfo> assetRevaluationDetail(AppView m_App,String faid){
          List<RevaluationInfo> data2= new ArrayList<RevaluationInfo>();
          try{   
          data2 = new StaticSentence(m_App.getSession(), "select id,date_of_revaluation,revalued_amount,reason_rev,rev_acc_det,rev_doc_link,created_by,created_date from fa_revaluation where active=true and fa_id=? ", SerializerWriteString.INSTANCE, new SerializerReadClass(RevaluationTableModel.RevaluationInfo.class)).list(faid);
         } catch(Exception ex){
            ex.printStackTrace();
                  }
          if(data2!=null)
          return data2;
          else return new ArrayList<RevaluationInfo>();
          }
        public static List<WriteOffDetailsTableModel.WriteOffDetailsInfo> assetWriteoffDetail(AppView m_App,String faid){
            List<WriteOffDetailsInfo> data2=new ArrayList<WriteOffDetailsInfo>();
            try{
            data2 = new StaticSentence(m_App.getSession(), "select  id,date_of_wo,reason_of_wo,wo_initiated_by,wo_approved_by,wo_doc_links,scrap_or_rec_val,voucher_details,created_by,created_date from fa_write_off_details where active=true and faid=? ", SerializerWriteString.INSTANCE, new SerializerReadClass(WriteOffDetailsTableModel.WriteOffDetailsInfo.class)).list(faid);
         } catch(Exception ex){
            ex.printStackTrace();
                  }
            if (data2!=null)
            return data2;   
            else return new ArrayList<WriteOffDetailsInfo>();
        }
        
        public static List<AmcNNonamcTableModel.NonamcInfo> assetNonAmcDetail(AppView m_App,String faid){
        List<NonamcInfo> data=new ArrayList<NonamcInfo>();
          try{  
            data = new StaticSentence(m_App.getSession(), "select v.name,n.remarks,n.contact_person,n.contact_details,n.created_by,n.created_date,n.id,n.active from fa_nonamc n,vendor v where n.active=true and v.id=n.vendor_name and n.fa_id=?  ", SerializerWriteString.INSTANCE, new SerializerReadClass(AmcNNonamcTableModel.NonamcInfo.class)).list(faid);
           } catch(Exception ex){
            ex.printStackTrace();
                  }
          if(data!=null)
            return data;
          else return new ArrayList<NonamcInfo>();
        }
   
        public static List<MaintenanceTableModel.MaintenanceInfo> assetMaintainanceDetail(AppView m_App,String faid){
        List<MaintenanceInfo> data2=new ArrayList<MaintenanceInfo>();
       try{
        data2 = new StaticSentence(m_App.getSession(), "select  m.id,m.date,m.amount,a.name,m.vocher_details,m.scanned_copy,m.created_by,m.created_date from fa_maintenance m,accountmaster a where a.id=m.account_head and m.active=true and m.fa_id=?",
                     SerializerWriteString.INSTANCE, new SerializerReadClass(MaintenanceTableModel.MaintenanceInfo.class)).list(faid);
        } catch(Exception ex){
            ex.printStackTrace();
                  }
       if(data2!=null)
       return data2;
       else return new ArrayList<MaintenanceInfo>();
        }
        
        public void resetAssetAllDetails(){
         verDate.setText(null);
         verDate.setVisible(false);
            verBy.setText(null);
            verBy.setVisible(false);
            verRemark.setText(null);
            verRemark.setVisible(false);
            phyBarcode.setText(null);
            phyBarcode.setVisible(false);
            assetImg.setText(null);assetImg.setVisible(false);
          
            contractor.setText(null);
            contractor.setVisible(false);
            account.setText(null);
            account.setVisible(false);
            amount.setText(null);
            amount.setVisible(false);
            perticulars.setText(null);
                    perticulars.setVisible(false);
            startDate.setText(null);
            startDate.setVisible(false);
            amcRemark.setText(null);
            amcRemark.setVisible(false);
            rate.setText(null);
            rate.setVisible(false);
            reminderDate.setText(null);
            reminderDate.setVisible(false);
            approvedBy.setText(null);
            approvedBy.setVisible(false);
            approvedDate.setText(null);
            approvedDate.setVisible(false);
            

//            serviceProvider.setText(null);
                serviceProvider.setVisible(false);
//            contactDet.setText(null);
         contactDet.setVisible(false);
//            contactPerson.setText(null);
                 contactPerson.setVisible(false);
//            remarks.setText(null);
                   remarks.setVisible(false);      
//            
//            
            
            revAmount.setText(null);
            revAmount.setVisible(false);
            dor_txt.setText(null);
            dor_txt.setVisible(false);
            resnRev.setText(null);resnRev.setVisible(false);
            revAccDet.setText(null);revAccDet.setVisible(false);
            
            
            mainDate.setText(null);mainDate.setVisible(false);
            mainAmount.setText(null);mainAmount.setVisible(false);
            voucherDet.setText(null);voucherDet.setVisible(false);
//            //scannedCpy

            woAppBy.setText(null);woAppBy.setVisible(false);
            dow.setText(null);dow.setVisible(false);
            reasonWo.setText(null);reasonWo.setVisible(false);
            scrpVal.setText(null);scrpVal.setVisible(false);
            
            woInBy.setText(null);woInBy.setVisible(false);
//            
            makeLb.setText(null);makeLb.setVisible(false);
            modelLb.setText(null);modelLb.setVisible(false);
            wdvDateLb.setText(null);wdvDateLb.setVisible(false);
        
        }
        private Icon ResizeImage(String filename) {

        ImageIcon MyImage = new ImageIcon(filename);
        Image img = MyImage.getImage();
        Image newimg = img.getScaledInstance(assetImg.getWidth(), assetImg.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newimg);
        return image;
      
    }
         private Image getImage(String filename) {

        ImageIcon MyImage = new ImageIcon(filename);
        Image img = MyImage.getImage();
        Image newimg = img.getScaledInstance(100,75, Image.SCALE_SMOOTH);
        //        ImageIcon image = new ImageIcon(newimg);
    //        return image;

            return newimg;
      
    }
         
    ///////////////////////////////////////////////////////////////////
}
