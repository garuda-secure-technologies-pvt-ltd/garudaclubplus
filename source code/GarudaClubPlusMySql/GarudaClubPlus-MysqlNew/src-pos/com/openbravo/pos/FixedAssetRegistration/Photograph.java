/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.openbravo.pos.FixedAssetRegistration;

import com.openbravo.basic.BasicException;
import com.openbravo.beans.JCalendarDialog;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.gui.MessageInf;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.LocalRes;
import com.openbravo.data.loader.PreparedSentence;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerReadInteger;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.data.loader.Transaction;
import com.openbravo.data.user.DirtyManager;
import com.openbravo.format.Formats;
import com.openbravo.pos.Library.BookMaster;
import com.openbravo.pos.clubmang.KIOSKSettings;
import com.openbravo.pos.forms.AppConfig;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import com.openbravo.pos.knowYourMember.MemberForm;
import com.openbravo.pos.util.AltEncrypter;
import com.openbravo.pos.util.DirectoryEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JFrame;
import java.util.Calendar;
import javax.imageio.ImageIO;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import java.net.URL; 
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author dev3
 */
public class Photograph extends javax.swing.JPanel implements JPanelView,BeanFactoryApp {
 private AppView m_App;
    JFileChooser chooser;
   String choosertitle;
   File srcLogo = null;
   File srcLogo1 = null;

    /**
     * Creates new form Photograph
     */
    public Photograph() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        photopanel = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        simphoto = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        photodate_txt = new javax.swing.JTextField();
        photodate = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        remarks_txt = new javax.swing.JTextArea();
        add_button = new javax.swing.JButton();

        jLabel19.setText("Photograph");

        simphoto.setText("Select photo");
        simphoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simphotoActionPerformed(evt);
            }
        });

        jLabel20.setText("Date Of Photograph");

        photodate_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                photodate_txtActionPerformed(evt);
            }
        });

        photodate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tortoise Respositry/source code/GarudaClubPlusMySql/GarudaClubPlus-MysqlNew/src-beans/com/openbravo/images/date.png"))); // NOI18N
        photodate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                photodateActionPerformed(evt);
            }
        });

        jLabel21.setText("Remarks");

        remarks_txt.setColumns(20);
        remarks_txt.setRows(5);
        jScrollPane2.setViewportView(remarks_txt);

        add_button.setText("Add");
        add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout photopanelLayout = new javax.swing.GroupLayout(photopanel);
        photopanel.setLayout(photopanelLayout);
        photopanelLayout.setHorizontalGroup(
            photopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(photopanelLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(photopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(photopanelLayout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110)
                        .addComponent(simphoto, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(photopanelLayout.createSequentialGroup()
                        .addGroup(photopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(102, 102, 102)
                        .addGroup(photopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(photopanelLayout.createSequentialGroup()
                                .addComponent(photodate_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(photodate, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(107, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, photopanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(add_button, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
        );
        photopanelLayout.setVerticalGroup(
            photopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(photopanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(photopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(simphoto, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(photopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(photopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(photodate_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(photodate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(photopanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(photopanelLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(photopanelLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(add_button, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(photopanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(photopanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void simphotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simphotoActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new Photograph.ExtensionsFilter(LocalRes.getIntString("label.imagefiles"), "png", "gif", "jpg", "jpeg", "bmp"));
        //  System.out.println(LocalRes.getIntString("label.imagefiles"));
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                //  URL urlToImage = this.getClass().getResource("/home/dev3/GarudaClubPlus/MemberPhotos/");
                File sourceFile1 = fileChooser.getSelectedFile();
                srcLogo = sourceFile1;
                BufferedImage in = ImageIO.read(sourceFile1);
                BufferedImage newImage = new BufferedImage(in.getWidth(), in.getHeight(), BufferedImage.TYPE_INT_ARGB);
                ImageIcon ii = new ImageIcon(in);
               
                simphoto.setIcon(ii);
            } catch (IOException ex) {
                Logger.getLogger(Photograph.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_simphotoActionPerformed

    private void photodate_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_photodate_txtActionPerformed

    }//GEN-LAST:event_photodate_txtActionPerformed

    private void photodateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_photodateActionPerformed
        Date d;
        try {
            d = (Date) Formats.TIMESTAMP.parseValue(photodate_txt.getText());
        } catch (BasicException e) {
            d = null;
        }
        d = JCalendarDialog.showCalendarTimeHours(this, d);
        if (d != null) {
            // date=getDate(date);
            photodate_txt.setText(Formats.TIMESTAMP.formatValue(d));
        }
    }//GEN-LAST:event_photodateActionPerformed

    private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_buttonActionPerformed
        String filename = null;
          String filename1 = null;
      
          try{
          
          
          if(photodate_txt.getText()!=null){
          if(remarks_txt.getText().length()>0){
            Date photo = new Date();
            // Date verdatephoto = new Date();       
                    Date effectivedate = new Date();
                    Calendar cal = Calendar.getInstance();
                    cal.setTimeInMillis(photo.getTime());
                   
                    cal.set(Calendar.HOUR_OF_DAY, 00);
                    cal.set(Calendar.MINUTE, 00);
                    cal.set(Calendar.SECOND, 00);
                    cal.set(Calendar.MILLISECOND, 00);
                    photo.setTime(cal.getTimeInMillis());
                     photo = (Date) Formats.TIMESTAMP.parseValue(photodate_txt.getText());
                   //  verdatephoto.setTime(cal.getTimeInMillis());
                     //verdatephoto = (Date) Formats.TIMESTAMP.parseValue(verdate_txt.getText());
                     
                       if(srcLogo!=null)
                    {
                        filename = srcLogo+srcLogo.getAbsoluteFile().getName();
                        
                    }
                       if(srcLogo1!=null)
                    {
                        filename1 = srcLogo1+srcLogo1.getAbsoluteFile().getName();
                       
                    }
             
             Object[] param=new Object[]{UUID.randomUUID().toString(),remarks_txt.getText(),photo,filename};
             new PreparedSentence(m_App.getSession()
             , "INSERT INTO fa_photograph (ID,REMARK,DATE,PHOTO_LINK) VALUES (?,?,?,?)"
             , new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.TIMESTAMP,Datas.STRING})).exec(param);
          JOptionPane.showMessageDialog(this, "photo data inserted Successfully..!", "Success", JOptionPane.INFORMATION_MESSAGE);
          
          
          }
          
          }else{
          JOptionPane.showMessageDialog(this, "Please ensure that  photo date_txt is not empty", null, JOptionPane.OK_OPTION); 
         
          
          
          }
          
         
          
          }catch(NullPointerException e){
          
        e.printStackTrace();
      }
      catch(Exception e){
       e.printStackTrace();
      }
  
    }//GEN-LAST:event_add_buttonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_button;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton photodate;
    private javax.swing.JTextField photodate_txt;
    private javax.swing.JPanel photopanel;
    private javax.swing.JTextArea remarks_txt;
    private javax.swing.JButton simphoto;
    // End of variables declaration//GEN-END:variables
 @Override
    public String getTitle() {
        return "Fixed Asset Register";
    }

    @Override
    public void activate() throws BasicException {
      
                 
        loaddata();
         
    }

    @Override
    public boolean deactivate() {
        return true;
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public void init(AppView app) throws BeanFactoryException {
        m_App = app;
    }

    @Override
    public Object getBean() {
        return this;
    }

    public void reset() {
        
        simphoto.setIcon(null);
        photodate_txt.setText(null);
        remarks_txt.setText(null);
        
    }

   

    public void loaddata() throws BasicException {

        
    }

 private static class ExtensionsFilter extends FileFilter {
        
        private String message;
        private String[] extensions;
        
        public ExtensionsFilter(String message, String... extensions) {
            this.message = message;
            this.extensions = extensions;            
        }
        
        public boolean accept(java.io.File f) {
            if (f.isDirectory()) {
                return true;
            } else {
                String sFileName = f.getName();
                int ipos = sFileName.lastIndexOf('.');
                if (ipos >= 0) {
                    String sExt = sFileName.substring(ipos + 1);
                    for(String s : extensions) {
                        if (s.equalsIgnoreCase(sExt)) {
                            return true;
                        }
                    }
                }                        
                return false;
            }   
        }
        
        public String getDescription() {
            return message;
        }      
    }
    
}
