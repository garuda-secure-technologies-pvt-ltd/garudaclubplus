/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.FixedAssetRegistration;

import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.PreparedSentence;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.pos.Library.LibDataLogicFacilitiesCreate;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Window;
import java.util.Date;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JFrame;
import com.openbravo.pos.Accounts.AccountMasterExt;
import com.openbravo.pos.clubmang.DataSourceProvider;
import com.openbravo.pos.clubmang.JasperReportNew;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JasperPrint;

/**
 *
 * @author dev3
 */
public class AssetImageJarStart extends javax.swing.JPanel implements JPanelView, BeanFactoryApp {

    private AppView m_App;
    private static DataLogicFacilities dmang;
    private LibDataLogicFacilitiesCreate dlfac;
    private String name;
  
      int j=0;
     int k=1;

    /**
     * Creates new form AssetBarcodeGenerator
     */
    public AssetImageJarStart() {
        initComponents();
        startLabel.setVisible(true);
        jButton1.setVisible(true);
        jButton2.setVisible(false);
        StopLabel.setVisible(false);
        startInfoLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        startLabel = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        startInfoLabel = new javax.swing.JLabel();
        StopLabel = new javax.swing.JLabel();

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        startLabel.setText("Do you want to start Fixed Asset Verification ?");

        jButton2.setText("Stop");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        startInfoLabel.setText("Already Started Fixed Asset Verification. ");

        StopLabel.setText("Do you want to stop Fixed Asset Verification ?");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(StopLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jButton1))))
                .addContainerGap(322, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startLabel)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(startInfoLabel)
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StopLabel)
                    .addComponent(jButton2))
                .addContainerGap(244, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
          
            jButton1.setVisible(false);
             startLabel.setVisible(false);
            StopLabel.setVisible(true);
            jButton2.setVisible(true);
            startInfoLabel.setVisible(true);
            
//---------------------------------------------------------------------------------------------





 
 new Thread (new Runnable() {
    @Override
    public void run() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
      try {
       int filesize=6022386; // filesize temporary hardcoded
int bytesRead;
int current = 0;
int i=0;
String  msg_received,msg_received1 ;
ServerSocket servsock = new ServerSocket(8281);
long start = System.currentTimeMillis();
long end = start + 15*1000; // 60 seconds * 1000 ms/sec
int k=0;
 int m=1; 
       while (true) {
   
    
   
    System.out.println("Waiting...");
    Socket sock = servsock.accept();
    System.out.println("Accepted connection : " + sock);
    
    DataInputStream DIS1 = new DataInputStream(sock.getInputStream());
    msg_received1 = DIS1.readUTF();
    if(msg_received1.equals("send to database")){
        
        DataInputStream DIS = new DataInputStream(sock.getInputStream());
        msg_received = DIS.readUTF();
        byte [] mybytearray  = new byte [filesize];
        InputStream is = sock.getInputStream();
        String projectPath=new File(".").getAbsolutePath().toString();
        projectPath= projectPath.substring(0, projectPath.length()-1);
        try{
       Object[] PhotoSrcobj = (Object[]) new StaticSentence(m_App.getSession(), "SELECT VALUE FROM generaltable where NAME = 'AssetPhotos'  ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find();
                    name=(PhotoSrcobj[0]).toString();
         } catch (BasicException ex) {
             Logger.getLogger(AssetImageJarStart.class.getName()).log(Level.SEVERE, null, ex);
         }
        FileOutputStream fos = new FileOutputStream(projectPath+ name+"\\"+msg_received+".jpg");
      // System.out.print("send to database"+projectPath+ name+"\\"+msg_received+".jpg");
        
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        bytesRead = is.read(mybytearray,0,mybytearray.length);
        current = bytesRead;
        
        // thanks to A. CÃ¡diz for the bug fix
        do {
            bytesRead =
                    is.read(mybytearray, current, (mybytearray.length-current));
            if(bytesRead >= 0) current += bytesRead;
        } while(bytesRead > -1);
        
        bos.write(mybytearray, 0 , current);
        bos.flush();
        bos.close();
       
        sock.close();
    }
    
    else if(msg_received1.equals("receive from database")){
        
        // String msg_received=null;
        FileInputStream fis = null;
        BufferedInputStream bis = null;
        OutputStream os = null;
        // ServerSocket servsock = null;
        String FILE_TO_SEND =null;
        
        DataInputStream DIS = new DataInputStream(sock.getInputStream());
        msg_received = DIS.readUTF();
        //FILE_TO_SEND = "E:/test/"+msg_received+".jpg";
        String projectPath1=new File(".").getAbsolutePath().toString();
        projectPath1= projectPath1.substring(0, projectPath1.length()-1);
        projectPath1.replace('\\', '/');
       // System.out.println("projectPath1"+projectPath1);
         try{
       Object[] PhotoSrcobj1 = (Object[]) new StaticSentence(m_App.getSession(), "SELECT VALUE FROM generaltable where NAME = 'AssetPhotos'  ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find();
                    name=(PhotoSrcobj1[0]).toString();
         } catch (BasicException ex) {
             Logger.getLogger(AssetImageJarStart.class.getName()).log(Level.SEVERE, null, ex);
         }
        FILE_TO_SEND =  projectPath1+name+"/"+msg_received+".jpg";
        // System.out.println("receive from database"+projectPath1+name+"/"+msg_received+".jpg");
            System.out.println(""+msg_received);
        
        
        try {
            //String FILE_TO_SEND = null;
            
            // send file
            File myFile = new File (FILE_TO_SEND);
            System.out.println("ggg");
            byte [] mybytearray  = new byte [(int)myFile.length()];
            fis = new FileInputStream(myFile);
            bis = new BufferedInputStream(fis);
            System.out.println("bis.read(mybytearray,0,mybytearray.length)"+bis.read(mybytearray,0,mybytearray.length));
            
            bis.read(mybytearray,0,mybytearray.length);
            os = sock.getOutputStream();
            System.out.println("Sending " + FILE_TO_SEND + "(" + mybytearray.length + " bytes)");
            os.write(mybytearray,0,mybytearray.length);
            os.flush();
            System.out.println("Done.");
        }catch(IOException e){
        
        }
        finally {
            if (bis != null) bis.close();
            if (os != null) os.close();
            if (sock!=null) sock.close();
        }
        
    }else if(msg_received1.equals("quit")){
         jButton2.setVisible(false);
         StopLabel.setVisible(false);
         startInfoLabel.setVisible(false);
            startLabel.setVisible(true);
            jButton1.setVisible(true);
           
      // exit(0);
    sock.close();
    servsock.close();
          break;
   
    
            } 

}//while-ends
        } catch (IOException ex) {
             Logger.getLogger(AssetImageJarStart.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//run ends
}).start();

        
        
         
         
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         jButton2.setVisible(false);
         StopLabel.setVisible(false);
         startInfoLabel.setVisible(false);
            startLabel.setVisible(true);
            jButton1.setVisible(true);
            
        
       new Thread (new Runnable() {
    @Override
    public void run() { 
      final int senderPort = 8281;
        Socket connection;
        try {
            
           InetAddress IP=InetAddress.getLocalHost();//by pratima
                String hostAddress = IP.getHostAddress();//by pratima
           //  String hostAddress = "192.168.1.145";//commented by pratima
             InetAddress address = null;
             
             address = InetAddress.getByName(hostAddress);
             connection = new Socket(address, senderPort);
             DataOutputStream DOS1 = new DataOutputStream(connection.getOutputStream());
             DOS1.writeUTF("quit");
             
             connection.close();
             // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
         } catch (UnknownHostException ex) {
             Logger.getLogger(AssetImageJarStart.class.getName()).log(Level.SEVERE, null, ex);
         } catch (IOException ex) {
             Logger.getLogger(AssetImageJarStart.class.getName()).log(Level.SEVERE, null, ex);
         }
    
    
    }//run ends
    }).start();
    }//GEN-LAST:event_jButton2ActionPerformed
     protected static Window getWindow(Component parent) {
        if (parent == null) {
            return new JFrame();
        } else if (parent instanceof Frame || parent instanceof Dialog) {
            return (Window) parent;
        } else {
            return getWindow(parent.getParent());
        }
    }
   

    @Override
    public String getTitle() {
        return AppLocal.getIntString("Start");
    }

    @Override
    public void activate() throws BasicException {

        loaddata();
        

    }

    @Override
    public boolean deactivate() {
        return true;
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public void init(AppView app) throws BeanFactoryException {
        m_App = app;
        dmang = (DataLogicFacilities) m_App.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");

    }

    @Override
    public Object getBean() {
        return this;
    }

    public void loaddata() throws BasicException {
        
    }

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel StopLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel startInfoLabel;
    private javax.swing.JLabel startLabel;
    // End of variables declaration//GEN-END:variables


}
