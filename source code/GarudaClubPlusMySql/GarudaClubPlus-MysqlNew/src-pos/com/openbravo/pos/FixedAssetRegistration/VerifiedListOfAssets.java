/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.FixedAssetRegistration;

import com.openbravo.beans.JCalendarDialog;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.format.Formats;
import java.io.File;
import java.io.IOException;
import java.util.Calendar;
import javax.swing.JOptionPane;
import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.pos.Library.LibDataLogicFacilitiesCreate;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Window;
import java.util.Date;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import com.openbravo.pos.Accounts.AccountMasterExt;
import com.openbravo.pos.clubmang.DataSourceProvider;
import com.openbravo.pos.clubmang.JasperReportNew;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.sf.jasperreports.engine.JasperPrint;
import javax.swing.table.TableCellRenderer;
import java.awt.Color;
import javax.swing.JComponent;
import java.awt.Component;
import java.text.DecimalFormat;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dev3
 */
public class VerifiedListOfAssets extends javax.swing.JPanel implements JPanelView, BeanFactoryApp {

    private AppView m_App;
    private static DataLogicFacilities dmang;
    private static ComboBoxValModel elementsModel;
    private static ComboBoxValModel mainheadsModel;
    private Date fromDate;
    private Date toDat;
    private Date asonDate;
    private LibDataLogicFacilitiesCreate dlfac;
    private ComboBoxValModel assetListModel;
    private String header = null;
    private String perioddate;
    private String subsidiar = null;
    DecimalFormat decimalFormat = new DecimalFormat("#0.00");
    DecimalFormat df = new DecimalFormat("#.00%");
    private String ReportHeader;
    private List<ListOfAllAssetsTableModel.AssetInfo> FA_info_List_all;
    private ListOfAllAssetsTableModel FA_Table_Model;
    private String doclink;

    /**
     * Creates new form VerifiedListOfAssets
     */
    public VerifiedListOfAssets() {
        initComponents();

    }

    protected static Window getWindow(Component parent) {
        if (parent == null) {
            return new JFrame();
        } else if (parent instanceof Frame || parent instanceof Dialog) {
            return (Window) parent;
        } else {
            return getWindow(parent.getParent());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        report_but = new javax.swing.JButton();
        viewList_but = new javax.swing.JButton();
        viewfulldoc_but = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable(){public Component prepareRenderer(TableCellRenderer renderer,
            int rowIndex, int vColIndex) {
            Component c = super.prepareRenderer(renderer, rowIndex, vColIndex);
            if (c instanceof JComponent) {
                JComponent jc = (JComponent)c;
                jc.setToolTipText(String.valueOf(getValueAt(rowIndex, vColIndex)));

                if (rowIndex % 2 == 0 && !isCellSelected(rowIndex, vColIndex)) {
                    jc.setBackground(Color.lightGray);
                }
                else {
                    jc.setBackground(Color.white);
                }
                if(isCellSelected(rowIndex, vColIndex))
                jc.setBackground(Color.cyan);
            }
            return c;
        }};
        jLabel3 = new javax.swing.JLabel();
        month_Rdo = new javax.swing.JRadioButton();
        period_Rdo = new javax.swing.JRadioButton();
        frmDate = new javax.swing.JTextField();
        toDate_txt = new javax.swing.JTextField();
        DateSelect = new javax.swing.JButton();
        DateSelect1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        all_radbut = new javax.swing.JRadioButton();
        subhead_radbut = new javax.swing.JRadioButton();
        subsidiary_panel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        mainheads = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        allactinact_rad = new javax.swing.JRadioButton();
        actice_rad = new javax.swing.JRadioButton();
        wofa_rad = new javax.swing.JRadioButton();
        part = new javax.swing.JRadioButton();
        combo_panel = new javax.swing.JPanel();
        assetcombo = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        alphbet_rad = new javax.swing.JRadioButton();
        dateofpurchase_rad = new javax.swing.JRadioButton();
        subhead_panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        elements = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        back_but3 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        name_txt3 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        subhead_txt3 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        subsidiary_txt3 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        acchead_txt3 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        standalone_txt3 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        anotherasset_txt3 = new javax.swing.JLabel();
        label3 = new javax.swing.JLabel();
        vendor_txt3 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        dateofpur_txt3 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        totalcst_txt3 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        dateofinss_txt3 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        dateofcomm_txt3 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        dateofuse_txt3 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        dateofcapt_txt3 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        rateofdepr_txt3 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        wdvcost_txt3 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        agency_txt3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        barcde_txt = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Cor_txt = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        credtd_by = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        crdtd_date = new javax.swing.JLabel();

        report_but.setForeground(java.awt.Color.red);
        report_but.setText("Report");
        report_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report_butActionPerformed(evt);
            }
        });

        viewList_but.setForeground(java.awt.Color.red);
        viewList_but.setText("View List");
        viewList_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewList_butActionPerformed(evt);
            }
        });

        viewfulldoc_but.setForeground(java.awt.Color.red);
        viewfulldoc_but.setText("View Full Document");
        viewfulldoc_but.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewfulldoc_butMouseClicked(evt);
            }
        });
        viewfulldoc_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewfulldoc_butActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable2);

        jLabel3.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel3.setForeground(java.awt.Color.blue);
        jLabel3.setText("Select  Duration :");

        month_Rdo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        month_Rdo.setText("As On Date");
        month_Rdo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                month_RdoItemStateChanged(evt);
            }
        });
        month_Rdo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                month_RdoActionPerformed(evt);
            }
        });

        period_Rdo.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        period_Rdo.setText("Period");
        period_Rdo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                period_RdoItemStateChanged(evt);
            }
        });

        toDate_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toDate_txtActionPerformed(evt);
            }
        });

        DateSelect.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        DateSelect.setText("fromDate");
        DateSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateSelectActionPerformed(evt);
            }
        });

        DateSelect1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        DateSelect1.setText("ToDate");
        DateSelect1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateSelect1ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel9.setForeground(java.awt.Color.blue);
        jLabel9.setText("Select Account :");

        all_radbut.setText("ALL");
        all_radbut.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                all_radbutItemStateChanged(evt);
            }
        });
        all_radbut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                all_radbutActionPerformed(evt);
            }
        });

        subhead_radbut.setText("Particular SubHead");
        subhead_radbut.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subhead_radbutItemStateChanged(evt);
            }
        });

        jLabel2.setText("SubsidiaryHead");

        mainheads.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mainheadsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout subsidiary_panelLayout = new javax.swing.GroupLayout(subsidiary_panel);
        subsidiary_panel.setLayout(subsidiary_panelLayout);
        subsidiary_panelLayout.setHorizontalGroup(
            subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subsidiary_panelLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(mainheads, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        subsidiary_panelLayout.setVerticalGroup(
            subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subsidiary_panelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainheads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel7.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel7.setForeground(java.awt.Color.blue);
        jLabel7.setText("Select FA :");

        allactinact_rad.setText("ALL");

        actice_rad.setText("Active FA");

        wofa_rad.setText("WO FA");

        part.setText("Particular Asset");
        part.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                partItemStateChanged(evt);
            }
        });

        assetcombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout combo_panelLayout = new javax.swing.GroupLayout(combo_panel);
        combo_panel.setLayout(combo_panelLayout);
        combo_panelLayout.setHorizontalGroup(
            combo_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(combo_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(assetcombo, 0, 177, Short.MAX_VALUE))
        );
        combo_panelLayout.setVerticalGroup(
            combo_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(assetcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel8.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel8.setForeground(java.awt.Color.blue);
        jLabel8.setText("Order By :");

        alphbet_rad.setText("Alphabetical Order");

        dateofpurchase_rad.setText("Date Of Purchase wise");

        jLabel1.setText("SubHead");

        elements.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                elementsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout subhead_panelLayout = new javax.swing.GroupLayout(subhead_panel);
        subhead_panel.setLayout(subhead_panelLayout);
        subhead_panelLayout.setHorizontalGroup(
            subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subhead_panelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(elements, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        subhead_panelLayout.setVerticalGroup(
            subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subhead_panelLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(elements, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(viewfulldoc_but, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(40, 40, 40)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 982, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(98, 98, 98)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel8)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGap(106, 106, 106)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(report_but, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(viewList_but, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(9, 9, 9))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(78, 78, 78)
                                                    .addComponent(frmDate, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(toDate_txt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(DateSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(DateSelect1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(36, 36, 36)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(all_radbut, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(subhead_radbut, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(month_Rdo, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(period_Rdo, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(subhead_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(subsidiary_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                            .addComponent(allactinact_rad, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                            .addComponent(actice_rad)
                                                            .addGap(18, 18, 18)
                                                            .addComponent(wofa_rad)
                                                            .addGap(18, 18, 18)
                                                            .addComponent(part))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                            .addComponent(alphbet_rad, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                            .addComponent(dateofpurchase_rad)))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(combo_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGap(0, 0, Short.MAX_VALUE))))))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(month_Rdo)
                    .addComponent(period_Rdo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(frmDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DateSelect))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toDate_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DateSelect1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(all_radbut)
                            .addComponent(subhead_radbut))
                        .addGap(4, 4, 4)
                        .addComponent(subhead_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(subsidiary_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(actice_rad)
                        .addComponent(wofa_rad)
                        .addComponent(part)
                        .addComponent(allactinact_rad)
                        .addComponent(jLabel7))
                    .addComponent(combo_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(report_but)
                        .addComponent(viewList_but))
                    .addComponent(jLabel8)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(alphbet_rad)
                        .addComponent(dateofpurchase_rad)))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(viewfulldoc_but)
                .addGap(0, 0, 0))
        );

        jLabel10.setFont(new java.awt.Font("Ubuntu", 3, 18)); // NOI18N
        jLabel10.setForeground(java.awt.Color.red);
        jLabel10.setText("Verified  Asset Details");

        jButton4.setForeground(java.awt.Color.red);
        jButton4.setText("View Document");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        back_but3.setForeground(java.awt.Color.red);
        back_but3.setText("Cancel");
        back_but3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_but3ActionPerformed(evt);
            }
        });

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel18.setText("Name ");

        name_txt3.setText("jLabel5");

        jLabel63.setText("Subhead ");

        subhead_txt3.setText("jLabel6");

        jLabel64.setText("Subsidiary ");

        subsidiary_txt3.setText("jLabel10");

        jLabel65.setText("Account Head ");

        acchead_txt3.setText("jLabel11");

        jLabel66.setText("Standalone ");

        standalone_txt3.setText("jLabel12");

        jLabel67.setText("Linked Asset ");

        anotherasset_txt3.setText("jLabel13");

        label3.setText("Vendor ");

        vendor_txt3.setText("jLabel14");

        jLabel68.setText("Date Of Purchase ");

        dateofpur_txt3.setText("jLabel16");

        jLabel69.setText("Total Cost ");

        totalcst_txt3.setText("jLabel17");

        jLabel70.setText("Date Of Installation ");

        dateofinss_txt3.setText("jLabel18");

        jLabel71.setText("Date Of Commissioning ");

        dateofcomm_txt3.setText("jLabel19");

        jLabel72.setText("Date on which put to use ");

        dateofuse_txt3.setText("jLabel20");

        jLabel73.setText("Date Of Capitalisation ");

        dateofcapt_txt3.setText("jLabel24");

        jLabel74.setText("Rate Of Deprecation ");

        rateofdepr_txt3.setText("jLabel25");

        jLabel75.setText("WDV as on date ");

        wdvcost_txt3.setText("jLabel26");

        jLabel76.setText("Agency For Replacement ");

        agency_txt3.setText("jLabel27");

        jLabel4.setText("Barcode");

        barcde_txt.setText("jLabel5");

        jLabel5.setText("Cost of Replacement");

        Cor_txt.setText("jLabel6");

        jLabel6.setText("Created by");

        credtd_by.setText("jLabel11");

        jLabel12.setText("Created Date");

        crdtd_date.setText("jLabel13");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel63, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
                                .addGap(33, 33, 33)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(name_txt3, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                    .addComponent(subhead_txt3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(94, 94, 94))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(barcde_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel67, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel64, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel66, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel65, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(standalone_txt3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                                    .addComponent(anotherasset_txt3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(acchead_txt3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(subsidiary_txt3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(credtd_by, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dateofpur_txt3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(vendor_txt3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))))
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel75)
                            .addComponent(jLabel76)
                            .addComponent(jLabel74)
                            .addComponent(jLabel5)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(agency_txt3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                            .addComponent(Cor_txt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(crdtd_date, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(wdvcost_txt3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel73, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel71)
                            .addComponent(jLabel70)
                            .addComponent(jLabel69)
                            .addComponent(jLabel72, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(dateofcapt_txt3, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(rateofdepr_txt3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(dateofuse_txt3, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(dateofcomm_txt3, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                                .addComponent(dateofinss_txt3, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(totalcst_txt3, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(name_txt3)
                    .addComponent(jLabel69)
                    .addComponent(totalcst_txt3))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel63)
                    .addComponent(subhead_txt3)
                    .addComponent(jLabel70)
                    .addComponent(dateofinss_txt3))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel64)
                    .addComponent(subsidiary_txt3)
                    .addComponent(jLabel71)
                    .addComponent(dateofcomm_txt3))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel65)
                        .addComponent(acchead_txt3)
                        .addComponent(jLabel72))
                    .addComponent(dateofuse_txt3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel66)
                    .addComponent(standalone_txt3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel73)
                    .addComponent(dateofcapt_txt3))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel67)
                    .addComponent(anotherasset_txt3)
                    .addComponent(jLabel74)
                    .addComponent(rateofdepr_txt3))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label3)
                    .addComponent(vendor_txt3)
                    .addComponent(jLabel75)
                    .addComponent(wdvcost_txt3))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel68)
                    .addComponent(dateofpur_txt3)
                    .addComponent(jLabel76)
                    .addComponent(agency_txt3))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(barcde_txt)
                    .addComponent(jLabel5)
                    .addComponent(Cor_txt))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(credtd_by)
                    .addComponent(jLabel12)
                    .addComponent(crdtd_date))
                .addGap(0, 3, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(324, 324, 324))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(back_but3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back_but3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void report_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report_butActionPerformed
        String asset;
        if (elements.getSelectedItem() != null) {
            header = elements.getSelectedItem().toString();

        } else {

            header = "ALL";

        }
        if (assetcombo.getSelectedItem() != null) {
            asset = assetcombo.getSelectedItem().toString();

        } else {

            asset = "ALL";

        }

        try {
            fromDate = (Date) Formats.TIMESTAMP.parseValue(frmDate.getText());
        } catch (BasicException ex) {
            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {

            toDat = (Date) Formats.TIMESTAMP.parseValue(toDate_txt.getText());
        } catch (BasicException ex) {
            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
        }
        String dt = Formats.DATE.formatValue(new Date());

        if (month_Rdo.isSelected()) {
            perioddate = "period:" + new Date();

        } else {
            perioddate = "Period:" + fromDate + "" + " " + "to" + " " + "" + toDat;

        }
        Date date = new Date();

        if (month_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFaforVer(m_App);
            } catch (BasicException ex) {
                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", "Verified Assets Report");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsforVer(m_App, header);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsforVer(m_App, header, subsidiar);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }
        }

        if (month_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFAFaforVer(m_App, asset);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

            }
        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFAFabyMajClsforVer(m_App, header, asset);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFAFabyMajClsSubClsforVer(m_App, header, subsidiar, asset);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }
        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {

            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActiveforVer(m_App);
            } catch (BasicException ex) {
                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", "Fixed Assets Report");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActiveforVer(m_App, header);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActiveforVer(m_App, header, subsidiar);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWoforVer(m_App);
            } catch (BasicException ex) {
                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", "Fixed Assets Report");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWoforVer(m_App, header);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWoforVer(m_App, header, subsidiar);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {

                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        }

        //by order of purchase date
        if (month_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFaorderforVer(m_App);
            } catch (BasicException ex) {
                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", "Fixed Assets Report");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsorderforVer(m_App, header);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsorderforVer(m_App, header, subsidiar);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }
        }
        if (month_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFaorderforVer(m_App, asset);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

            }
        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsorderforVer(m_App, header, asset);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsSubClsorderforVer(m_App, header, subsidiar, asset);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }
        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {

            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActiveorderforVer(m_App);
            } catch (BasicException ex) {
                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", "Fixed Assets Report");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActiveorderforVer(m_App, header);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActiveorderforVer(m_App, header, subsidiar);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWoorderforVer(m_App);
            } catch (BasicException ex) {
                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", "Fixed Assets Report");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWoorderforVer(m_App, header);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWoorderforVer(m_App, header, subsidiar);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", "Fixed Assets Report");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        }

        //based on period 
        if (period_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFacrdtforVer(m_App, fromDate, toDat);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClscrdtforVer(m_App, header, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClscrdtforVer(m_App, header, subsidiar, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }

        if (period_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFacrdtforVer(m_App, fromDate, toDat, asset);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClscrdtforVer(m_App, header, fromDate, toDat, asset);
                            } catch (BasicException ex) {
                                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                            data1.setDataSource(dsfc);
                            Map reportparams = new HashMap();
                            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                            String RPH = ReportHeader;
                            reportparams.put("ReportHeader", RPH);
                            reportparams.put("date", perioddate);
                            reportparams.put("TITLE", "Fixed Assets Report");
                            reportparams.put("SubHead", header);

                            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                        }
                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsSubClscrdtforVer(m_App, header, subsidiar, fromDate, toDat, asset);
                            } catch (BasicException ex) {
                                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                            data1.setDataSource(dsfc);
                            Map reportparams = new HashMap();
                            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                            String RPH = ReportHeader;
                            reportparams.put("ReportHeader", RPH);
                            reportparams.put("date", perioddate);
                            reportparams.put("TITLE", "Fixed Assets Report");
                            reportparams.put("SubHead", header);

                            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActivecrdtforVer(m_App, fromDate, toDat);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActivecrdtforVer(m_App, header, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActivecrdtforVer(m_App, header, subsidiar, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {

                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {

            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWocrdtforVer(m_App, fromDate, toDat);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWocrdtforVer(m_App, header, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWocrdtforVer(m_App, header, subsidiar, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }

        //order by date of purchase
        if (period_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFaordercrdtforVer(m_App, fromDate, toDat);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsordercrdtforVer(m_App, header, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsordercrdtforVer(m_App, header, subsidiar, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
        if (period_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFaordercrdtforVer(m_App, fromDate, toDat, asset);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsordercrdtforVer(m_App, header, fromDate, toDat, asset);
                            } catch (BasicException ex) {
                                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                            data1.setDataSource(dsfc);
                            Map reportparams = new HashMap();
                            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                            String RPH = ReportHeader;
                            reportparams.put("ReportHeader", RPH);
                            reportparams.put("date", perioddate);
                            reportparams.put("TITLE", "Fixed Assets Report");
                            reportparams.put("SubHead", header);

                            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                        }
                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsSubClsordercrdtforVer(m_App, header, subsidiar, fromDate, toDat, asset);
                            } catch (BasicException ex) {
                                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                            DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                            DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                            data1.setDataSource(dsfc);
                            Map reportparams = new HashMap();
                            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                            String RPH = ReportHeader;
                            reportparams.put("ReportHeader", RPH);
                            reportparams.put("date", perioddate);
                            reportparams.put("TITLE", "Fixed Assets Report");
                            reportparams.put("SubHead", header);

                            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActiveordercrdtforVer(m_App, fromDate, toDat);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActiveordercrdtforVer(m_App, header, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActiveordercrdtforVer(m_App, header, subsidiar, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {

            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWoordercrdtforVer(m_App, fromDate, toDat);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                    DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", "Fixed Assets Report");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWoordercrdtforVer(m_App, header, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWoordercrdtforVer(m_App, header, subsidiar, fromDate, toDat);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        DataSourceProvider data1 = new DataSourceProvider(FA_info_List_all);
                        DataSourceForListOfFADetail dsfc = new DataSourceForListOfFADetail(FA_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", perioddate);
                        reportparams.put("TITLE", "Fixed Assets Report");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfFAReport.jrxml", reportparams, false, data1, true, null);

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }


    }//GEN-LAST:event_report_butActionPerformed

    private void viewList_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewList_butActionPerformed
        jTable2.setVisible(true);
        String asset;
        if (elements.getSelectedItem() != null) {
            header = elements.getSelectedItem().toString();

        } else {

            header = "ALL";

        }
        if (assetcombo.getSelectedItem() != null) {
            asset = assetcombo.getSelectedItem().toString();

        } else {

            asset = "ALL";

        }

        try {
            fromDate = (Date) Formats.TIMESTAMP.parseValue(frmDate.getText());
        } catch (BasicException ex) {
            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {

            toDat = (Date) Formats.TIMESTAMP.parseValue(toDate_txt.getText());
        } catch (BasicException ex) {
            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
        }
        String dt = Formats.DATE.formatValue(new Date());

        if (month_Rdo.isSelected()) {
            perioddate = "period:" + dt;

        } else {
            perioddate = "Period:" + fromDate + "" + "to" + "" + toDat;

        }
        Date date = new Date();

        if (month_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFaforVer(m_App);
                jTable2.setModel(FA_Table_Model.getTableModel());
                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            } catch (BasicException ex) {
                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsforVer(m_App, header);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsforVer(m_App, header, subsidiar);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);

            }
        }

        if (month_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFAFaforVer(m_App, asset);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFAFabyMajClsforVer(m_App, header, asset);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFAFabyMajClsSubClsforVer(m_App, header, subsidiar, asset);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {

            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActiveforVer(m_App);
                jTable2.setModel(FA_Table_Model.getTableModel());
                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            } catch (BasicException ex) {
                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActiveforVer(m_App, header);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActiveforVer(m_App, header, subsidiar);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }

        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWoforVer(m_App);
                jTable2.setModel(FA_Table_Model.getTableModel());
                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            } catch (BasicException ex) {
                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWoforVer(m_App, header);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWoforVer(m_App, header, subsidiar);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                jTable2.setModel(new DefaultTableModel());
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                viewfulldoc_but.setVisible(false);
            }

        }

        //by order of purchase date
        if (month_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFaorderforVer(m_App);
                jTable2.setModel(FA_Table_Model.getTableModel());
                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            } catch (BasicException ex) {
                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsorderforVer(m_App, header);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsorderforVer(m_App, header, subsidiar);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        }
        if (month_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFaorderforVer(m_App, asset);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsorderforVer(m_App, header, asset);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsSubClsorderforVer(m_App, header, subsidiar, asset);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {

            FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActiveorderforVer(m_App);
                jTable2.setModel(FA_Table_Model.getTableModel());
                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            } catch (BasicException ex) {
                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActiveorderforVer(m_App, header);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActiveorderforVer(m_App, header, subsidiar);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }

        } else if (month_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {

            try {
                FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWoorderforVer(m_App);
                jTable2.setModel(FA_Table_Model.getTableModel());
                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            } catch (BasicException ex) {
                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
            }
            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

        } else if (month_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWoorderforVer(m_App, header);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                try {
                    FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWoorderforVer(m_App, header, subsidiar);
                    jTable2.setModel(FA_Table_Model.getTableModel());
                    jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                } catch (BasicException ex) {
                    Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }

        }

        //based on period 
        if (period_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFacrdtforVer(m_App, fromDate, toDat);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                        jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClscrdtforVer(m_App, header, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClscrdtforVer(m_App, header, subsidiar, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        }

        if (period_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFacrdtforVer(m_App, fromDate, toDat, asset);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                            jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClscrdtforVer(m_App, header, fromDate, toDat, asset);
                                jTable2.setModel(FA_Table_Model.getTableModel());
                                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                            } catch (BasicException ex) {
                                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                            jTable2.setModel(new DefaultTableModel());
                            viewfulldoc_but.setVisible(false);
                        }
                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsSubClscrdtforVer(m_App, header, subsidiar, fromDate, toDat, asset);
                                jTable2.setModel(FA_Table_Model.getTableModel());
                                jTable2.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                            } catch (BasicException ex) {
                                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                            jTable2.setModel(new DefaultTableModel());
                            viewfulldoc_but.setVisible(false);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActivecrdtforVer(m_App, fromDate, toDat);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActivecrdtforVer(m_App, header, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActivecrdtforVer(m_App, header, subsidiar, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {

                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {

            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWocrdtforVer(m_App, fromDate, toDat);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && alphbet_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWocrdtforVer(m_App, header, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWocrdtforVer(m_App, header, subsidiar, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        }

        //order by date of purchase
        if (period_Rdo.isSelected() && all_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFaordercrdtforVer(m_App, fromDate, toDat);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && allactinact_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsordercrdtforVer(m_App, header, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsordercrdtforVer(m_App, header, subsidiar, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        }
        if (period_Rdo.isSelected() && all_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {
                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFaordercrdtforVer(m_App, fromDate, toDat, asset);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && part.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsordercrdtforVer(m_App, header, fromDate, toDat, asset);
                                jTable2.setModel(FA_Table_Model.getTableModel());
                            } catch (BasicException ex) {
                                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                            jTable2.setModel(new DefaultTableModel());
                            viewfulldoc_but.setVisible(false);
                        }
                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                        if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                            try {
                                FA_Table_Model = ListOfAllAssetsTableModel.LoadforPartFabyMajClsSubClsordercrdtforVer(m_App, header, subsidiar, fromDate, toDat, asset);
                                jTable2.setModel(FA_Table_Model.getTableModel());
                            } catch (BasicException ex) {
                                Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                        } else {
                            JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                            jTable2.setModel(new DefaultTableModel());
                            viewfulldoc_but.setVisible(false);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();
                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyActiveordercrdtforVer(m_App, fromDate, toDat);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && actice_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyActiveordercrdtforVer(m_App, header, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsbyActiveordercrdtforVer(m_App, header, subsidiar, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && all_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {

            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    try {
                        FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyWoordercrdtforVer(m_App, fromDate, toDat);
                        jTable2.setModel(FA_Table_Model.getTableModel());
                    } catch (BasicException ex) {
                        Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        } else if (period_Rdo.isSelected() && subhead_radbut.isSelected() && wofa_rad.isSelected() && dateofpurchase_rad.isSelected()) {
            if (frmDate.getText() != null && frmDate.getText().toString().length() > 0) {
                if (toDate_txt.getText() != null && toDate_txt.getText().toString().length() > 0) {

                    if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsbyWoordercrdtforVer(m_App, header, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        FA_info_List_all = new ArrayList<ListOfAllAssetsTableModel.AssetInfo>();

                        try {
                            FA_Table_Model = ListOfAllAssetsTableModel.LoadAllFabyMajClsSubClsByWoordercrdtforVer(m_App, header, subsidiar, fromDate, toDat);
                            jTable2.setModel(FA_Table_Model.getTableModel());
                        } catch (BasicException ex) {
                            Logger.getLogger(VerifiedListOfAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<ListOfAllAssetsTableModel.AssetInfo>) FA_Table_Model.getFAList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                        jTable2.setModel(new DefaultTableModel());
                        viewfulldoc_but.setVisible(false);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                    jTable2.setModel(new DefaultTableModel());
                    viewfulldoc_but.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Date First ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
                jTable2.setModel(new DefaultTableModel());
                viewfulldoc_but.setVisible(false);
            }
        }


    }//GEN-LAST:event_viewList_butActionPerformed

    private void viewfulldoc_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewfulldoc_butActionPerformed
        if (jTable2.getSelectedRow() != -1) {

            int row = jTable2.getSelectedRow();
            
            ListOfAllAssetsTableModel.AssetInfo asset = FA_Table_Model.getFAList().get(row);
            jPanel8.setVisible(true);
            jPanel1.setVisible(false);
            
            String name = asset.getName();
            String majcls = asset.getMajcls();
            String subhead = asset.getSubHead();
            String acchead = asset.getAccHead();
            String standalone = asset.getstand_alone();
            String assetan = asset.getAsset();
            String vendor = asset.getVendor();
            Double totcost = asset.getcost();
            Double rateofdep = asset.getrod();
            Double cor = asset.getcor();
            Double wdv = asset.getwdv();
            String agency = asset.getAgency();
            Date dateofpur = asset.getPurchaseDate();
            Date dateofinst = asset.getInstDate();
            Date dateofcapt = asset.getCptDate();
            Date dateofcomm = asset.getCommDate();
            Date dateofuse = asset.getUseDate();
            String barcode = asset.getBarcode();
            String crea_by = asset.getCreated_by();
            Date crtd_date = asset.getcreated_Date();
            doclink = asset.getScadoc();
            try {
                if (doclink != null) {
                    doclink = doclink;
                } else {
                    doclink = "";

                }
                File file1 = new File(doclink.replace("./", ""));;
                if (file1.exists() == true) {

                    jButton4.setVisible(true);
                } else {

                    jButton4.setVisible(false);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (name != null) {
                name_txt3.setText(":" + " " + name + "");
            } else {
                name_txt3.setText(":" + "");
            }
            if (crea_by != null) {
                credtd_by.setText(":" + " " + crea_by + "");
            } else {
                credtd_by.setText(":" + "");
            }

            if (barcode != null) {
                barcde_txt.setText(":" + " " + barcode + "");
            } else {
                barcde_txt.setText(":" + "");
            }
            if (majcls != null) {
                subhead_txt3.setText(":" + " " + majcls + "");
            } else {
                subhead_txt3.setText(":" + "");
            }

            if (subhead != null) {
                subsidiary_txt3.setText(":" + " " + subhead + "");
            } else {
                subsidiary_txt3.setText(":" + "");
            }
            if (acchead != null) {
                acchead_txt3.setText(":" + " " + acchead + "");
            } else {
                acchead_txt3.setText(":" + "");
            }

            if (standalone != null) {
                standalone_txt3.setText(":" + " " + standalone + "");
            } else {
                standalone_txt3.setText(":" + "");
            }

            if (assetan != null) {
                anotherasset_txt3.setText(":" + " " + assetan + "");
            } else {
                anotherasset_txt3.setText(":" + "");
            }

            if (vendor != null) {
                vendor_txt3.setText(":" + " " + vendor + "");
            } else {
                vendor_txt3.setText(":" + "");
            }

            if (totcost != null) {
                totalcst_txt3.setText(":" + " " + decimalFormat.format(totcost) + "");
            } else {
                totalcst_txt3.setText(":" + "");
            }
            if (cor != null) {
                Cor_txt.setText(":" + " " + decimalFormat.format(cor) + "");
            } else {
                Cor_txt.setText(":" + "");
            }

            if (rateofdep != null) {
                String r = decimalFormat.format(rateofdep);

                rateofdepr_txt3.setText(":" + " " + r + "%" + "");
            } else {
                rateofdepr_txt3.setText(":" + "");
            }

            if (wdv != null) {
                wdvcost_txt3.setText(":" + " " + decimalFormat.format(wdv) + "");
            } else {
                wdvcost_txt3.setText(":" + "");
            }

            if (dateofcapt != null) {
                dateofcapt_txt3.setText(":" + " " + Formats.TIMESTAMP.formatValue(dateofcapt) + "");
            } else {
                dateofcapt_txt3.setText(":" + "");
            }
            if (crtd_date != null) {
                crdtd_date.setText(":" + " " + Formats.TIMESTAMP.formatValue(crtd_date) + "");
            } else {
                crdtd_date.setText(":" + "");
            }
            if (dateofuse != null) {
                dateofuse_txt3.setText(":" + " " + Formats.TIMESTAMP.formatValue(dateofuse) + "");
            } else {
                dateofuse_txt3.setText(":" + "");
            }

            if (dateofinst != null) {
                dateofinss_txt3.setText(":" + " " + Formats.TIMESTAMP.formatValue(dateofinst) + "");
            } else {
                dateofinss_txt3.setText(":" + "");
            }

            if (dateofcomm != null) {
                dateofcomm_txt3.setText(":" + " " + Formats.TIMESTAMP.formatValue(dateofcomm) + "");
            } else {
                dateofcomm_txt3.setText(":" + "");
            }

            if (dateofpur != null) {
                dateofpur_txt3.setText(":" + " " + Formats.TIMESTAMP.formatValue(dateofpur) + "");
            } else {
                dateofpur_txt3.setText(":" + "");
            }

            if (agency != null) {
                agency_txt3.setText(":" + " " + agency + "");
            } else {
                agency_txt3.setText(":" + "");
            }

        }
    }//GEN-LAST:event_viewfulldoc_butActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        if (jTable2.getSelectedRow() != -1) {
            viewfulldoc_but.setVisible(true);
        } else {
            viewfulldoc_but.setVisible(false);

        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            if (doclink != null) {
                doclink = doclink;
            } else {
                doclink = "";

            }
            File file1 = new File(doclink.replace("./", ""));;
            if (file1.exists() == true) {

                java.awt.Desktop.getDesktop().open(file1);
            } else {
                JOptionPane.showMessageDialog(this, "File not Found", null, JOptionPane.OK_OPTION);

            }
        } catch (IOException e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void back_but3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_but3ActionPerformed
        jPanel1.setVisible(true);
        jPanel8.setVisible(false);
    }//GEN-LAST:event_back_but3ActionPerformed

    private void month_RdoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_month_RdoItemStateChanged
        jTable2.setModel(new DefaultTableModel());
        DateSelect.setVisible(false);
        DateSelect1.setVisible(false);
        frmDate.setVisible(false);
        toDate_txt.setVisible(false);


    }//GEN-LAST:event_month_RdoItemStateChanged

    private void month_RdoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_month_RdoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_month_RdoActionPerformed

    private void period_RdoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_period_RdoItemStateChanged
        jTable2.setModel(new DefaultTableModel());
        DateSelect.setVisible(true);
        DateSelect1.setVisible(true);
        frmDate.setVisible(true);
        toDate_txt.setVisible(true);
        frmDate.setText("");
        toDate_txt.setText("");
    }//GEN-LAST:event_period_RdoItemStateChanged

    private void toDate_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toDate_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toDate_txtActionPerformed

    private void DateSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateSelectActionPerformed

        Date date = new Date();
        try {
            date = (Date) Formats.TIMESTAMP.parseValue(frmDate.getText());
        } catch (BasicException e) {
            date = null;
        }

        try {
            date = JCalendarDialog.showCalendarTimeHours(this, date);
            if (date != null) {
                Calendar cal = Calendar.getInstance();
                cal.setTimeInMillis((date).getTime());

                frmDate.setText(Formats.TIMESTAMP.formatValue(cal.getTime()));
            }
        } catch (Exception e1) {
            e1.printStackTrace();
        }
    }//GEN-LAST:event_DateSelectActionPerformed

    private void DateSelect1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateSelect1ActionPerformed
        Date date = new Date();
        try {
            date = (Date) Formats.TIMESTAMP.parseValue(toDate_txt.getText());
        } catch (BasicException e) {
            date = null;
        }

        try {
            date = JCalendarDialog.showCalendarTimeHours(this, date);
            if (date != null) {
                Calendar cal = Calendar.getInstance();
                cal.setTimeInMillis((date).getTime());

                toDate_txt.setText(Formats.TIMESTAMP.formatValue(cal.getTime()));
            }
        } catch (Exception e1) {
            e1.printStackTrace();
        }

    }//GEN-LAST:event_DateSelect1ActionPerformed

    private void all_radbutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_all_radbutItemStateChanged
        if (all_radbut.isSelected()) {
            subhead_panel.setVisible(false);
            subsidiary_panel.setVisible(false);
            elements.setSelectedIndex(-1);
            mainheads.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_all_radbutItemStateChanged

    private void subhead_radbutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subhead_radbutItemStateChanged
        if (subhead_radbut.isSelected()) {

            subhead_panel.setVisible(true);
            subsidiary_panel.setVisible(true);

        } else {
            subhead_panel.setVisible(false);
            subsidiary_panel.setVisible(false);

        }
    }//GEN-LAST:event_subhead_radbutItemStateChanged

    private void elementsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_elementsItemStateChanged
        if (elements.getSelectedItem() == null) {
            mainheads.setSelectedIndex(-1);
            mainheads.setModel(new DefaultComboBoxModel());
        }
        if (elements.getSelectedIndex() != -1) {
            try {

                AccountMasterExt mele = (AccountMasterExt) elements.getSelectedItem();
                List<AccountMasterExt> acc = dmang.getaccountMainHeads(mele.getSerachkey());
                acc.add(0, null);
                mainheadsModel = new ComboBoxValModel(acc);
                mainheads.setModel(mainheadsModel);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_elementsItemStateChanged

    private void mainheadsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mainheadsItemStateChanged

    }//GEN-LAST:event_mainheadsItemStateChanged

    private void partItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_partItemStateChanged
        if (part.isSelected()) {
            combo_panel.setVisible(true);
        } else {
            combo_panel.setVisible(false);
            assetcombo.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_partItemStateChanged

    private void viewfulldoc_butMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewfulldoc_butMouseClicked
        if (jTable2.getSelectedRow() != -1) {

            viewfulldoc_but.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(this, "select table row ", null, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_viewfulldoc_butMouseClicked

    private void all_radbutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_all_radbutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_all_radbutActionPerformed

    private class ItemsListModel extends AbstractListModel {

        private java.util.List items;

        public ItemsListModel(java.util.List items) {
            this.items = items;
        }

        public int getSize() {
            return items.size();
        }

        public Object getElementAt(int i) {
            return items.get(i);
        }
    }

    @Override
    public String getTitle() {
        return AppLocal.getIntString("List Of Verified Assets");
    }

    @Override
    public void activate() throws BasicException {

        loaddata();
        ButtonGrp();

    }

    @Override
    public boolean deactivate() {
        return true;
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public void init(AppView app) throws BeanFactoryException {
        m_App = app;
        dmang = (DataLogicFacilities) m_App.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");

    }

    @Override
    public Object getBean() {
        return this;
    }

    public void loaddata() throws BasicException {
        jPanel8.setVisible(false);
        jPanel1.setVisible(true);
        all_radbut.setSelected(true);
        viewfulldoc_but.setVisible(false);
        allactinact_rad.setSelected(true);
        alphbet_rad.setSelected(true);
        frmDate.setText(" ");
        toDate_txt.setText(" ");
        jTable2.setVisible(false);
        elementsModel = new ComboBoxValModel(dmang.getaccountElements());
        elements.setModel(elementsModel);
        assetListModel = new ComboBoxValModel(getAssetList());
        assetcombo.setModel(assetListModel);
        combo_panel.setVisible(false);
        DateSelect.setVisible(false);
        DateSelect1.setVisible(false);
        frmDate.setVisible(false);
        toDate_txt.setVisible(false);
        month_Rdo.setSelected(true);
    }

    public List getAssetList() throws BasicException {
        List<Object> assetList = new ArrayList<Object>();
        assetList = (List<Object>) new StaticSentence(m_App.getSession(), "select name from fa_master where active=true order by name ", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).list();

        return assetList;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Cor_txt;
    private javax.swing.JButton DateSelect;
    private javax.swing.JButton DateSelect1;
    private javax.swing.JLabel acchead_txt3;
    private javax.swing.JRadioButton actice_rad;
    private javax.swing.JLabel agency_txt3;
    private javax.swing.JRadioButton all_radbut;
    private javax.swing.JRadioButton allactinact_rad;
    private javax.swing.JRadioButton alphbet_rad;
    private javax.swing.JLabel anotherasset_txt3;
    private javax.swing.JComboBox assetcombo;
    private javax.swing.JButton back_but3;
    private javax.swing.JLabel barcde_txt;
    private javax.swing.JPanel combo_panel;
    private javax.swing.JLabel crdtd_date;
    private javax.swing.JLabel credtd_by;
    private javax.swing.JLabel dateofcapt_txt3;
    private javax.swing.JLabel dateofcomm_txt3;
    private javax.swing.JLabel dateofinss_txt3;
    private javax.swing.JLabel dateofpur_txt3;
    private javax.swing.JRadioButton dateofpurchase_rad;
    private javax.swing.JLabel dateofuse_txt3;
    private javax.swing.JComboBox elements;
    private javax.swing.JTextField frmDate;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel label3;
    private javax.swing.JComboBox mainheads;
    private javax.swing.JRadioButton month_Rdo;
    private javax.swing.JLabel name_txt3;
    private javax.swing.JRadioButton part;
    private javax.swing.JRadioButton period_Rdo;
    private javax.swing.JLabel rateofdepr_txt3;
    private javax.swing.JButton report_but;
    private javax.swing.JLabel standalone_txt3;
    private javax.swing.JPanel subhead_panel;
    private javax.swing.JRadioButton subhead_radbut;
    private javax.swing.JLabel subhead_txt3;
    private javax.swing.JPanel subsidiary_panel;
    private javax.swing.JLabel subsidiary_txt3;
    private javax.swing.JTextField toDate_txt;
    private javax.swing.JLabel totalcst_txt3;
    private javax.swing.JLabel vendor_txt3;
    private javax.swing.JButton viewList_but;
    private javax.swing.JButton viewfulldoc_but;
    private javax.swing.JLabel wdvcost_txt3;
    private javax.swing.JRadioButton wofa_rad;
    // End of variables declaration//GEN-END:variables
 public void ButtonGrp() {

        ButtonGroup bg1 = new ButtonGroup();
        bg1.add(month_Rdo);
        bg1.add(period_Rdo);

        ButtonGroup bg2 = new ButtonGroup();
        bg2.add(allactinact_rad);
        bg2.add(actice_rad);
        bg2.add(wofa_rad);
        bg2.add(part);

        ButtonGroup bg3 = new ButtonGroup();
        bg3.add(all_radbut);
        bg3.add(subhead_radbut);

        ButtonGroup bg4 = new ButtonGroup();
        bg4.add(alphbet_rad);
        bg4.add(dateofpurchase_rad);

    }
}
