/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.FixedAssetRegistration;

import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.pos.Library.LibDataLogicFacilitiesCreate;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Window;
import java.util.Date;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JFrame;
import com.openbravo.pos.Accounts.AccountMasterExt;
import com.openbravo.pos.clubmang.DataSourceProvider;
import com.openbravo.pos.clubmang.JasperReportNew;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import net.sf.jasperreports.engine.JasperPrint;
import com.openbravo.pos.FixedAssetRegistration.FALocationsTableModel;

/**
 *
 * @author dev3
 */
public class AssetBarcodeDataSheet extends javax.swing.JPanel implements JPanelView, BeanFactoryApp {

    private AppView m_App;
    private static DataLogicFacilities dmang;
    private static ComboBoxValModel elementsModel;
    private static ComboBoxValModel mainheadsModel;
    private Date fromDate;
    private Date toDat;
    private Date asonDate;
    private LibDataLogicFacilitiesCreate dlfac;
    private String header = null;
    private String perioddate;
    private String subsidiar = null;
    private String ReportHeader;
    private List<BarcodeTableModel.AssetInfo> FA_info_List_all;
     private List<BarcodeTableModel.AssetInfo> FA_info_List_allToPrint;
    private BarcodeTableModel FA_Table_Model;
    private static ComboBoxValModel assetmodel;
    private List<String> AssetList = new ArrayList<String>();
    private List<FALocationsTableModel.FALocationsInfo> locationList;
    private FALocationsTableModel locationTableModel;
    private static ComboBoxValModel locationModel;
    /**
     * Creates new form AssetBarcodeGenerator
     */
    public AssetBarcodeDataSheet() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        assetcombo_box = new javax.swing.JComboBox();
        all_radbut = new javax.swing.JRadioButton();
        Particular_radbut = new javax.swing.JRadioButton();
        subhead_panel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        elements = new javax.swing.JComboBox();
        subsidiary_panel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        mainheads = new javax.swing.JComboBox();
        allFa_radbut = new javax.swing.JRadioButton();
        activefa_radbut = new javax.swing.JRadioButton();
        wofa_radbut = new javax.swing.JRadioButton();
        alpha_radbut = new javax.swing.JRadioButton();
        dateofamc_radbut = new javax.swing.JRadioButton();
        renewal_radbut = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jComboBoxLoc = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();

        jLabel1.setText("Asset");

        all_radbut.setText("ALL");
        all_radbut.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                all_radbutItemStateChanged(evt);
            }
        });

        Particular_radbut.setText("Particular Subhead");
        Particular_radbut.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Particular_radbutItemStateChanged(evt);
            }
        });

        jLabel2.setText("SubHead");

        elements.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                elementsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout subhead_panelLayout = new javax.swing.GroupLayout(subhead_panel);
        subhead_panel.setLayout(subhead_panelLayout);
        subhead_panelLayout.setHorizontalGroup(
            subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subhead_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(elements, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );
        subhead_panelLayout.setVerticalGroup(
            subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(elements, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel2))
        );

        jLabel3.setText("Subsidiary");

        mainheads.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mainheadsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout subsidiary_panelLayout = new javax.swing.GroupLayout(subsidiary_panel);
        subsidiary_panel.setLayout(subsidiary_panelLayout);
        subsidiary_panelLayout.setHorizontalGroup(
            subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subsidiary_panelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainheads, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        subsidiary_panelLayout.setVerticalGroup(
            subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel3)
                .addComponent(mainheads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        allFa_radbut.setText(" ALL FA");

        activefa_radbut.setText("Active FA");

        wofa_radbut.setText("WO FA");

        alpha_radbut.setText("Alphabetical Order");

        dateofamc_radbut.setText("Date Of AMC");

        renewal_radbut.setText("Renewal Date");

        jButton1.setForeground(java.awt.Color.red);
        jButton1.setText("View List");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel5.setForeground(java.awt.Color.blue);
        jLabel5.setText("Select Particular Asset:");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel6.setForeground(java.awt.Color.blue);
        jLabel6.setText("Select Account:");

        jLabel7.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel7.setForeground(java.awt.Color.blue);
        jLabel7.setText("Select FA:");

        jLabel8.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel8.setForeground(java.awt.Color.blue);
        jLabel8.setText("Order By:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sr.No.", "Name", "Location", "Barcode", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Print ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel9.setForeground(java.awt.Color.blue);
        jLabel9.setText("Select Location");

        jCheckBox1.setText("Selet All");
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(all_radbut, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(assetcombo_box, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(349, 349, 349))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(Particular_radbut)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addComponent(subhead_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(subsidiary_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))
                                .addGap(31, 31, 31)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(allFa_radbut)
                                        .addGap(45, 45, 45)
                                        .addComponent(activefa_radbut)
                                        .addGap(18, 18, 18)
                                        .addComponent(wofa_radbut))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jComboBoxLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(alpha_radbut)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(dateofamc_radbut)))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(renewal_radbut))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox1)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(assetcombo_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(all_radbut)
                    .addComponent(Particular_radbut)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subhead_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subsidiary_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(allFa_radbut)
                        .addComponent(jLabel7))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(wofa_radbut)
                        .addComponent(activefa_radbut)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(alpha_radbut)
                        .addComponent(dateofamc_radbut)
                        .addComponent(renewal_radbut))
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jComboBoxLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 723, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
     protected static Window getWindow(Component parent) {
        if (parent == null) {
            return new JFrame();
        } else if (parent instanceof Frame || parent instanceof Dialog) {
            return (Window) parent;
        } else {
            return getWindow(parent.getParent());
        }
    }

    private void all_radbutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_all_radbutItemStateChanged
        if (all_radbut.isSelected()) {
            subhead_panel.setVisible(false);
            subsidiary_panel.setVisible(false);
            elements.setSelectedIndex(-1);
            mainheads.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_all_radbutItemStateChanged

    private void Particular_radbutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Particular_radbutItemStateChanged
        if (Particular_radbut.isSelected()) {
            subhead_panel.setVisible(true);
            subsidiary_panel.setVisible(true);

        } else {
            subhead_panel.setVisible(false);
            subsidiary_panel.setVisible(false);

        }
    }//GEN-LAST:event_Particular_radbutItemStateChanged

    private void elementsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_elementsItemStateChanged
        if (elements.getSelectedItem() == null) {
            mainheads.setSelectedIndex(-1);
            mainheads.setModel(new DefaultComboBoxModel());
        }
        if (elements.getSelectedIndex() != -1) {
            try {

                AccountMasterExt mele = (AccountMasterExt) elements.getSelectedItem();
                mainheadsModel = new ComboBoxValModel(dmang.getaccountMainHeads1(mele.getSerachkey()));
                mainheads.setModel(mainheadsModel);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_elementsItemStateChanged

    private void mainheadsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mainheadsItemStateChanged

    }//GEN-LAST:event_mainheadsItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      jCheckBox1.setSelected(false);
        String header = null;
        String assetnamw = null;
        if (elements.getSelectedIndex() != -1) {
            header = elements.getSelectedItem().toString();

        } else {
            header = "ALL";
        }
        if (assetcombo_box.getSelectedIndex() != -1) {
            assetnamw = assetcombo_box.getSelectedItem().toString();

        } else {
            assetnamw = "ALL";
        }
        if (assetcombo_box.getSelectedIndex() != -1 && assetcombo_box.getSelectedItem() != null) {
            
            if (assetcombo_box.getSelectedItem().toString() != "ALL") {
                if (all_radbut.isSelected() && allFa_radbut.isSelected()) {
                    FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            FA_Table_Model = BarcodeTableModel.LoadAllFa(m_App, 0, assetnamw);

                        } else if (renewal_radbut.isSelected()) {
                            FA_Table_Model = BarcodeTableModel.LoadAllFa(m_App, 1, assetnamw);
                        } else {
                            FA_Table_Model = BarcodeTableModel.LoadAllFa(m_App, 2, assetnamw);
                        }
                    } catch (BasicException ex) {
                        Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    
                } else if (all_radbut.isSelected() && activefa_radbut.isSelected()) {
                    FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            FA_Table_Model = BarcodeTableModel.LoadAllFabyActive(m_App, 0, assetnamw);

                        } else if (renewal_radbut.isSelected()) {
                            FA_Table_Model = BarcodeTableModel.LoadAllFabyActive(m_App, 1, assetnamw);
                        } else {
                            FA_Table_Model = BarcodeTableModel.LoadAllFabyActive(m_App, 2, assetnamw);
                        }
                    } catch (BasicException ex) {
                        Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else if (all_radbut.isSelected() && wofa_radbut.isSelected()) {
                    FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            FA_Table_Model = BarcodeTableModel.LoadAllFabyWo(m_App, 0, assetnamw);

                        } else if (renewal_radbut.isSelected()) {
                            FA_Table_Model = BarcodeTableModel.LoadAllFabyWo(m_App, 1, assetnamw);
                        } else {
                            FA_Table_Model = BarcodeTableModel.LoadAllFabyWo(m_App, 2, assetnamw);
                        }
                    } catch (BasicException ex) {
                        Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();

                } else if (Particular_radbut.isSelected() && allFa_radbut.isSelected()) {
                    if (elements.getSelectedIndex() != -1 && elements.getSelectedItem() != null && mainheads.getSelectedIndex() == -1) {
                        header = elements.getSelectedItem().toString();

                        try {
                            FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                            if (alpha_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajCls(m_App, header, 0, assetnamw);

                            } else if (renewal_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajCls(m_App, header, 1, assetnamw);
                            } else {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajCls(m_App, header, 2, assetnamw);
                            }
                        } catch (BasicException ex) {
                            Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                       

                    } else if (elements.getSelectedIndex() != -1 && elements.getSelectedItem() != null && mainheads.getSelectedIndex() != -1) {

                        header = elements.getSelectedItem().toString();
                        String subhead = mainheads.getSelectedItem().toString();
                        try {
                            FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                            if (alpha_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubCls(m_App, header, subhead, 0, assetnamw);

                            } else if (renewal_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubCls(m_App, header, subhead, 1, assetnamw);
                            } else {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubCls(m_App, header, subhead, 2, assetnamw);
                            }
                        } catch (BasicException ex) {
                            Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                    
                    } else {

                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }

                } else if (Particular_radbut.isSelected() && activefa_radbut.isSelected()) {
                    if (elements.getSelectedIndex() != -1 && elements.getSelectedItem() != null && mainheads.getSelectedIndex() == -1) {
                        header = elements.getSelectedItem().toString();

                        try {
                            FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                            if (alpha_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsbyActive(m_App, header, 0, assetnamw);

                            } else if (renewal_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsbyActive(m_App, header, 1, assetnamw);
                            } else {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsbyActive(m_App, header, 2, assetnamw);
                            }
                        } catch (BasicException ex) {
                            Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                      
                    } else if (elements.getSelectedIndex() != -1 && elements.getSelectedItem() != null && mainheads.getSelectedIndex() != -1) {

                        header = elements.getSelectedItem().toString();
                        String subhead = mainheads.getSelectedItem().toString();
                        try {
                            FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                            if (alpha_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsbyActive(m_App, header, subhead, 0, assetnamw);

                            } else if (renewal_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsbyActive(m_App, header, subhead, 1, assetnamw);
                            } else {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsbyActive(m_App, header, subhead, 2, assetnamw);
                            }
                        } catch (BasicException ex) {
                            Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                          
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }
                } else if (Particular_radbut.isSelected() && wofa_radbut.isSelected()) {
                    if (elements.getSelectedIndex() != -1 && elements.getSelectedItem() != null && mainheads.getSelectedIndex() == -1) {
                        header = elements.getSelectedItem().toString();

                        try {
                            FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                            if (alpha_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsbyWo(m_App, header, 0, assetnamw);

                            } else if (renewal_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsbyWo(m_App, header, 1, assetnamw);
                            } else {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsbyWo(m_App, header, 2, assetnamw);
                            }
                        } catch (BasicException ex) {
                            Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                      
                    } else if (elements.getSelectedIndex() != -1 && elements.getSelectedItem() != null && mainheads.getSelectedIndex() != -1) {

                        header = elements.getSelectedItem().toString();
                        String subhead = mainheads.getSelectedItem().toString();
                        try {
                            FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                            if (alpha_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsByWo(m_App, header, subhead, 0, assetnamw);

                            } else if (renewal_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsByWo(m_App, header, subhead, 1, assetnamw);
                            } else {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsByWo(m_App, header, subhead, 2, assetnamw);
                            }
                        } catch (BasicException ex) {
                            Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                        
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }
                }
            } else if (assetcombo_box.getSelectedItem().toString().equals("ALL")) {
                if (all_radbut.isSelected() && allFa_radbut.isSelected()) {
                    FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            FA_Table_Model = BarcodeTableModel.LoadAllFaforALL(m_App, 0);

                        } else if (renewal_radbut.isSelected()) {
                            FA_Table_Model = BarcodeTableModel.LoadAllFaforALL(m_App, 1);
                        } else {
                            FA_Table_Model = BarcodeTableModel.LoadAllFaforALL(m_App, 2);
                        }
                    } catch (BasicException ex) {
                        Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                  
                } else if (all_radbut.isSelected() && activefa_radbut.isSelected()) {
                    FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            FA_Table_Model = BarcodeTableModel.LoadAllFabyActiveForALL(m_App, 0);

                        } else if (renewal_radbut.isSelected()) {
                            FA_Table_Model = BarcodeTableModel.LoadAllFabyActiveForALL(m_App, 1);
                        } else {
                            FA_Table_Model = BarcodeTableModel.LoadAllFabyActiveForALL(m_App, 2);
                        }
                    } catch (BasicException ex) {
                        Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                   jTable1.setModel(FA_Table_Model.getTableModel1());
                } else if (all_radbut.isSelected() && wofa_radbut.isSelected()) {
                    FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            FA_Table_Model = BarcodeTableModel.LoadAllFabyWoForALL(m_App, 0);

                        } else if (renewal_radbut.isSelected()) {
                            FA_Table_Model = BarcodeTableModel.LoadAllFabyWoForALL(m_App, 1);
                        } else {
                            FA_Table_Model = BarcodeTableModel.LoadAllFabyWoForALL(m_App, 2);
                        }
                    } catch (BasicException ex) {
                        Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                
                } else if (Particular_radbut.isSelected() && allFa_radbut.isSelected()) {
                    if (elements.getSelectedIndex() != -1 && elements.getSelectedItem() != null && mainheads.getSelectedIndex() == -1) {
                        header = elements.getSelectedItem().toString();

                        try {
                            FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                            if (alpha_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsForALL(m_App, header, 0);

                            } else if (renewal_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsForALL(m_App, header, 1);
                            } else {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsForALL(m_App, header, 2);
                            }
                        } catch (BasicException ex) {
                            Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                      
                    } else if (elements.getSelectedIndex() != -1 && elements.getSelectedItem() != null && mainheads.getSelectedIndex() != -1) {

                        header = elements.getSelectedItem().toString();
                        String subhead = mainheads.getSelectedItem().toString();
                        try {
                            FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                            if (alpha_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsForALL(m_App, header, subhead, 0);

                            } else if (renewal_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsForALL(m_App, header, subhead, 1);
                            } else {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsForALL(m_App, header, subhead, 2);
                            }
                        } catch (BasicException ex) {
                            Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                   
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }
                } else if (Particular_radbut.isSelected() && activefa_radbut.isSelected()) {
                    if (elements.getSelectedIndex() != -1 && elements.getSelectedItem() != null && mainheads.getSelectedIndex() == -1) {
                        header = elements.getSelectedItem().toString();

                        try {
                            FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                            if (alpha_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsbyActiveForALL(m_App, header, 0);

                            } else if (renewal_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsbyActiveForALL(m_App, header, 1);
                            } else {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsbyActiveForALL(m_App, header, 2);
                            }
                        } catch (BasicException ex) {
                            Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                      
                    } else if (elements.getSelectedIndex() != -1 && elements.getSelectedItem() != null && mainheads.getSelectedIndex() != -1) {

                        header = elements.getSelectedItem().toString();
                        String subhead = mainheads.getSelectedItem().toString();
                        try {
                            FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                            if (alpha_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsbyActiveForALL(m_App, header, subhead, 0);

                            } else if (renewal_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsbyActiveForALL(m_App, header, subhead, 1);
                            } else {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsbyActiveForALL(m_App, header, subhead, 2);
                            }
                        } catch (BasicException ex) {
                            Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                       
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }
                } else if (Particular_radbut.isSelected() && wofa_radbut.isSelected()) {
                    if (elements.getSelectedIndex() != -1 && elements.getSelectedItem() != null && mainheads.getSelectedIndex() == -1) {
                        header = elements.getSelectedItem().toString();

                        try {
                            FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                            if (alpha_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsbyWoForALL(m_App, header, 0);

                            } else if (renewal_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsbyWoForALL(m_App, header, 1);
                            } else {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsbyWoForALL(m_App, header, 2);
                            }
                        } catch (BasicException ex) {
                            Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                      
                    } else if (elements.getSelectedIndex() != -1 && elements.getSelectedItem() != null && mainheads.getSelectedIndex() != -1) {

                        header = elements.getSelectedItem().toString();
                        String subhead = mainheads.getSelectedItem().toString();
                        try {
                            FA_info_List_all = new ArrayList<BarcodeTableModel.AssetInfo>();

                            if (alpha_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsByWoForALL(m_App, header, subhead, 0);

                            } else if (renewal_radbut.isSelected()) {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsByWoForALL(m_App, header, subhead, 1);
                            } else {
                                FA_Table_Model = BarcodeTableModel.LoadAllFabyMajClsSubClsByWoForALL(m_App, header, subhead, 2);
                            }
                        } catch (BasicException ex) {
                            Logger.getLogger(AssetBarcodeDataSheet.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        FA_info_List_all = (List<BarcodeTableModel.AssetInfo>) FA_Table_Model.getFAList();
                       
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                    }
                }
            } else {

                JOptionPane.showMessageDialog(this, "Please select asset", null, JOptionPane.OK_OPTION);

            }
           
            
        }else {

                JOptionPane.showMessageDialog(this, "Please select asset", null, JOptionPane.OK_OPTION);

            }
        
 if(jComboBoxLoc.getSelectedIndex()!=-1){
                String loc= locationList.get(jComboBoxLoc.getSelectedIndex()).getName();
            for(int i=0;i<FA_info_List_all.size();i++){
             if(!FA_info_List_all.get(i).getLocation().equals(loc)){
             FA_info_List_all.remove(i);
             i--;
             }
            }
            }
            
            jTable1.setModel(FA_Table_Model.getTableModel1());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         FA_info_List_allToPrint= FA_info_List_all;
          for(int i=0;i<FA_info_List_allToPrint.size();i++){
         if(!FA_info_List_allToPrint.get(i).getStatus())
         {
             FA_info_List_allToPrint.remove(i);
             i--;
         }}
        printReport();
        jCheckBox1.setSelected(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        // TODO add your handling code here:
        if(jCheckBox1.isSelected()){
        for(int i=0;i<FA_Table_Model.getTableModel1().getRowCount();i++){
        FA_Table_Model.getTableModel1().setValueAt(true,i, 4);
        }
        }
        if(!jCheckBox1.isSelected()){
        for(int i=0;i<FA_Table_Model.getTableModel1().getRowCount();i++){
        FA_Table_Model.getTableModel1().setValueAt(false,i, 4);
        }
         
        }
        jTable1.setModel(FA_Table_Model.getTableModel1());
    }//GEN-LAST:event_jCheckBox1ItemStateChanged
    private class ItemsListModel extends AbstractListModel {

        private java.util.List items;

        public ItemsListModel(java.util.List items) {
            this.items = items;
        }

        public int getSize() {
            return items.size();
        }

        public Object getElementAt(int i) {
            return items.get(i);
        }
    }

    @Override
    public String getTitle() {
        return AppLocal.getIntString("Barcode Generator");
    }

    @Override
    public void activate() throws BasicException {

        loaddata();
        ButtonGrp();

    }

    @Override
    public boolean deactivate() {
        return true;
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public void init(AppView app) throws BeanFactoryException {
        m_App = app;
        dmang = (DataLogicFacilities) m_App.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");

    }

    @Override
    public Object getBean() {
        return this;
    }

    public void loaddata() throws BasicException {
        all_radbut.setSelected(true);

        allFa_radbut.setSelected(true);
        alpha_radbut.setSelected(true);
        elementsModel = new ComboBoxValModel(dmang.getaccountElements());
        elements.setModel(elementsModel);

        AssetList = getassetList(m_App);
        assetmodel = new ComboBoxValModel(AssetList);
        AssetList.add(0, "ALL");
        assetcombo_box.setModel(assetmodel);
        locationTableModel=  locationTableModel.GetFALocationsTableModel(m_App);
        locationList=locationTableModel.getList();
        locationList.add(0, null);
        locationModel=new ComboBoxValModel(locationList);
        jComboBoxLoc.setModel(locationModel);
        jComboBoxLoc.setSelectedIndex(-1);
        jCheckBox1.setSelected(false);
    }

    public void ButtonGrp() {

        ButtonGroup bg2 = new ButtonGroup();
        bg2.add(allFa_radbut);
        bg2.add(activefa_radbut);
        bg2.add(wofa_radbut);

        ButtonGroup bg3 = new ButtonGroup();
        bg3.add(all_radbut);
        bg3.add(Particular_radbut);

       
        ButtonGroup bg4 = new ButtonGroup();
        bg4.add(alpha_radbut);
        bg4.add(dateofamc_radbut);
        bg4.add(renewal_radbut);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Particular_radbut;
    private javax.swing.JRadioButton activefa_radbut;
    private javax.swing.JRadioButton allFa_radbut;
    private javax.swing.JRadioButton all_radbut;
    private javax.swing.JRadioButton alpha_radbut;
    private javax.swing.JComboBox assetcombo_box;
    private javax.swing.JRadioButton dateofamc_radbut;
    private javax.swing.JComboBox elements;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBoxLoc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox mainheads;
    private javax.swing.JRadioButton renewal_radbut;
    private javax.swing.JPanel subhead_panel;
    private javax.swing.JPanel subsidiary_panel;
    private javax.swing.JRadioButton wofa_radbut;
    // End of variables declaration//GEN-END:variables
public List getassetList(AppView m_App) throws BasicException {
        List<Object> assetList = new ArrayList<Object>();
        assetList = (List<Object>) new StaticSentence(m_App.getSession(), "select name from fa_master where active=true order by name ", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).list();

        return assetList;
    }
public void printReport(){
                        String assetnamw = assetcombo_box.getSelectedItem().toString();
                        DataSourceProvider data1 = new DataSourceProvider( FA_info_List_allToPrint);
                        DataSourceForBarcodeGenrator dsfc = new DataSourceForBarcodeGenrator( FA_info_List_allToPrint);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", new Date());
                        reportparams.put("TITLE", "Asset labels");
                        reportparams.put("Name", assetnamw);
                        reportparams.put("Header", header);
                        
                            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/AssetBarcodeDataSheet1.jrxml", reportparams, false, data1, true, null);
                        FA_info_List_allToPrint= FA_info_List_all;
                        
                        for(int i=0;i<FA_Table_Model.getTableModel1().getRowCount();i++){
        FA_Table_Model.getTableModel1().setValueAt(false,i, 4);
        }
                          jTable1.setModel(FA_Table_Model.getTableModel1());
}

}
