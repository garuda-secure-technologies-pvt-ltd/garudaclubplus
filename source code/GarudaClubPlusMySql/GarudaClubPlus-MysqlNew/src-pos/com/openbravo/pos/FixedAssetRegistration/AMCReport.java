/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.FixedAssetRegistration;

import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.format.Formats;
import com.openbravo.pos.Library.LibDataLogicFacilitiesCreate;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Window;
import java.util.Date;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import com.openbravo.pos.Accounts.AccountMasterExt;
import com.openbravo.pos.clubmang.DataSourceProvider;
import com.openbravo.pos.clubmang.JasperReportNew;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.sf.jasperreports.engine.JasperPrint;
import javax.swing.table.TableCellRenderer;
import java.awt.Color;
import javax.swing.JComponent;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dev3
 */
public class AMCReport extends javax.swing.JPanel implements JPanelView, BeanFactoryApp {

    private AppView m_App;
    private static DataLogicFacilities dmang;
    private static ComboBoxValModel elementsModel;
    private static ComboBoxValModel mainheadsModel;
    private ComboBoxValModel assetListModel;
    private Date fromDate;
    private Date toDat;
    private Date asonDate;
    private LibDataLogicFacilitiesCreate dlfac;
    private String header = null;
    private String perioddate;
    private String subsidiar = null;
    DecimalFormat decimalFormat = new DecimalFormat("#0.00");
    DecimalFormat df = new DecimalFormat("#.00%");
    private String ReportHeader;
    private List<ListOfAMCTable_model.AMCInfo> AMC_info_List_all;

    private ListOfAMCTable_model AMC_Table_Model;
    File documentfile;
    File file = null;
    String filename;
    File selectedFile;
    String doc_link;

    /**
     * Creates new form AMCReport
     */
    public AMCReport() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        all_radbut = new javax.swing.JRadioButton();
        subhead_radbut = new javax.swing.JRadioButton();
        subhead_panel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        elements = new javax.swing.JComboBox();
        subsidiary_panel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        mainheads = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        allFa_radbut = new javax.swing.JRadioButton();
        activefa_radbut = new javax.swing.JRadioButton();
        wofa_radbut = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        allamc_rad_but = new javax.swing.JRadioButton();
        activeamc_radbut = new javax.swing.JRadioButton();
        lastamc_radbut = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        alpha_radbut = new javax.swing.JRadioButton();
        dateofamc_radbut = new javax.swing.JRadioButton();
        renewal_radbut = new javax.swing.JRadioButton();
        report_but = new javax.swing.JButton();
        viewList_but = new javax.swing.JButton();
        complete_rep = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(){public Component prepareRenderer(TableCellRenderer renderer,
            int rowIndex, int vColIndex) {
            Component c = super.prepareRenderer(renderer, rowIndex, vColIndex);
            if (c instanceof JComponent) {
                JComponent jc = (JComponent)c;
                jc.setToolTipText(String.valueOf(getValueAt(rowIndex, vColIndex)));

                if (rowIndex % 2 == 0 && !isCellSelected(rowIndex, vColIndex)) {
                    jc.setBackground(Color.lightGray);
                }
                else {
                    jc.setBackground(Color.white);
                }
                if(isCellSelected(rowIndex, vColIndex))
                jc.setBackground(Color.cyan);
            }
            return c;
        }};
        part = new javax.swing.JRadioButton();
        combo_panel = new javax.swing.JPanel();
        assetcombo = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        back_but2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        contractor = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        particular = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        Startdate = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        period = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        enddate = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        rate = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        account = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        amount = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        remark = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        renewaldate = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        apprby = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        appdate = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        crdt_by = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        crdtd_date = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        assetlabel = new javax.swing.JLabel();

        jLabel9.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel9.setForeground(java.awt.Color.blue);
        jLabel9.setText("Select Account:");

        all_radbut.setText("ALL");
        all_radbut.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                all_radbutItemStateChanged(evt);
            }
        });

        subhead_radbut.setText("Particular SubHead");
        subhead_radbut.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                subhead_radbutItemStateChanged(evt);
            }
        });
        subhead_radbut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subhead_radbutActionPerformed(evt);
            }
        });

        jLabel10.setText("SubHead");

        elements.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                elementsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout subhead_panelLayout = new javax.swing.GroupLayout(subhead_panel);
        subhead_panel.setLayout(subhead_panelLayout);
        subhead_panelLayout.setHorizontalGroup(
            subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subhead_panelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(elements, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        subhead_panelLayout.setVerticalGroup(
            subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subhead_panelLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(elements, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel11.setText("SubsidiaryHead");

        mainheads.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mainheadsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout subsidiary_panelLayout = new javax.swing.GroupLayout(subsidiary_panel);
        subsidiary_panel.setLayout(subsidiary_panelLayout);
        subsidiary_panelLayout.setHorizontalGroup(
            subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subsidiary_panelLayout.createSequentialGroup()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainheads, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        subsidiary_panelLayout.setVerticalGroup(
            subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subsidiary_panelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mainheads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jLabel6.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel6.setForeground(java.awt.Color.blue);
        jLabel6.setText("Select FA:");

        allFa_radbut.setText(" ALL FA");

        activefa_radbut.setText("Active FA");

        wofa_radbut.setText("WO FA");

        jLabel7.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel7.setForeground(java.awt.Color.blue);
        jLabel7.setText("Select AMC:");

        allamc_rad_but.setText("ALL AMC");
        allamc_rad_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allamc_rad_butActionPerformed(evt);
            }
        });

        activeamc_radbut.setText("Active AMC");

        lastamc_radbut.setText("Last AMC");

        jLabel8.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel8.setForeground(java.awt.Color.blue);
        jLabel8.setText("Order By:");

        alpha_radbut.setText("Alphabetical Order");

        dateofamc_radbut.setText("Date Of AMC");

        renewal_radbut.setText("Renewal Date");

        report_but.setForeground(java.awt.Color.red);
        report_but.setText("Report");
        report_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report_butActionPerformed(evt);
            }
        });

        viewList_but.setForeground(java.awt.Color.red);
        viewList_but.setText("ViewList");
        viewList_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewList_butActionPerformed(evt);
            }
        });

        complete_rep.setForeground(java.awt.Color.red);
        complete_rep.setText("View Complete Document");
        complete_rep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                complete_repMouseClicked(evt);
            }
        });
        complete_rep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                complete_repActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        part.setText("Particular Asset");
        part.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                partItemStateChanged(evt);
            }
        });

        assetcombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout combo_panelLayout = new javax.swing.GroupLayout(combo_panel);
        combo_panel.setLayout(combo_panelLayout);
        combo_panelLayout.setHorizontalGroup(
            combo_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, combo_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(assetcombo, 0, 165, Short.MAX_VALUE)
                .addContainerGap())
        );
        combo_panelLayout.setVerticalGroup(
            combo_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(assetcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(subhead_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subsidiary_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(278, 278, 278))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(complete_rep)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 862, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addGap(48, 48, 48)
                            .addComponent(all_radbut)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(subhead_radbut, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(27, 27, 27)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel7)
                                .addComponent(jLabel6)
                                .addComponent(jLabel8))
                            .addGap(45, 45, 45)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(alpha_radbut, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(dateofamc_radbut)
                                    .addGap(18, 18, 18)
                                    .addComponent(renewal_radbut)
                                    .addGap(58, 58, 58)
                                    .addComponent(report_but, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(viewList_but, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(allFa_radbut, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(activefa_radbut)
                                    .addGap(18, 18, 18)
                                    .addComponent(wofa_radbut)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(part)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(combo_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(allamc_rad_but, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(activeamc_radbut)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lastamc_radbut))))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(all_radbut)
                    .addComponent(subhead_radbut))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(subsidiary_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subhead_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(allFa_radbut)
                        .addComponent(activefa_radbut)
                        .addComponent(wofa_radbut)
                        .addComponent(part))
                    .addComponent(combo_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(activeamc_radbut)
                        .addComponent(allamc_rad_but)
                        .addComponent(lastamc_radbut)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(alpha_radbut)
                        .addComponent(dateofamc_radbut)
                        .addComponent(renewal_radbut)
                        .addComponent(report_but)
                        .addComponent(viewList_but))
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(complete_rep)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        back_but2.setForeground(java.awt.Color.red);
        back_but2.setText("Cancel");
        back_but2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_but2ActionPerformed(evt);
            }
        });

        jButton3.setForeground(java.awt.Color.red);
        jButton3.setText("View Document");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel36.setText("Contractor");

        contractor.setText("jLabel19");

        jLabel37.setText("Particular ");

        particular.setText("jLabel20");

        jLabel38.setText("StartDate ");

        Startdate.setText("jLabel21");

        jLabel39.setText("Period ");

        period.setText("jLabel22");

        jLabel40.setText("EndDate ");

        enddate.setText("jLabel23");

        jLabel41.setText("Rate ");

        rate.setText("jLabel24");

        jLabel42.setText("Account ");

        account.setText("jLabel25");

        jLabel43.setText("Amount ");

        amount.setText("jLabel26");

        jLabel44.setText("Remark ");

        remark.setText("jLabel27");

        jLabel45.setText("Renewal Date ");

        renewaldate.setText("jLabel28");

        jLabel46.setText("Approved By ");

        apprby.setText("jLabel29");

        jLabel47.setText("Approved Date ");

        appdate.setText("jLabel30");

        jLabel1.setText("Created By");

        crdt_by.setText("jLabel2");

        jLabel3.setText("Created Date");

        crdtd_date.setText("jLabel4");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(crdt_by, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40)
                            .addComponent(jLabel41)
                            .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel38)
                            .addComponent(jLabel37))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(particular, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Startdate, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(enddate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                                .addComponent(period, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(rate, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel36)
                        .addGap(18, 18, 18)
                        .addComponent(contractor, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel46)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel47, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel45)
                    .addComponent(jLabel44)
                    .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(account, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                    .addComponent(amount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(remark, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(renewaldate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(apprby, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(appdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(crdtd_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(31, 31, 31))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(contractor)
                    .addComponent(jLabel42)
                    .addComponent(account))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(particular)
                    .addComponent(jLabel43)
                    .addComponent(amount))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(Startdate)
                    .addComponent(jLabel44)
                    .addComponent(remark))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(period)
                    .addComponent(jLabel45)
                    .addComponent(renewaldate))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(enddate)
                    .addComponent(jLabel46)
                    .addComponent(apprby))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(rate)
                    .addComponent(jLabel47)
                    .addComponent(appdate))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(crdt_by)
                        .addComponent(crdtd_date))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel17.setFont(new java.awt.Font("Ubuntu", 3, 18)); // NOI18N
        jLabel17.setForeground(java.awt.Color.red);
        jLabel17.setText("AMC DETAILS FOR ASSET:");

        assetlabel.setFont(new java.awt.Font("Ubuntu", 3, 18)); // NOI18N
        assetlabel.setForeground(java.awt.Color.blue);
        assetlabel.setText("jLabel19");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assetlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(back_but2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(assetlabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(back_but2)
                    .addComponent(jButton3))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void all_radbutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_all_radbutItemStateChanged
        if (all_radbut.isSelected()) {
            subhead_panel.setVisible(false);
            subsidiary_panel.setVisible(false);
            elements.setSelectedIndex(-1);
            mainheads.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_all_radbutItemStateChanged

    private void subhead_radbutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_subhead_radbutItemStateChanged
        if (subhead_radbut.isSelected()) {

            subhead_panel.setVisible(true);
            subsidiary_panel.setVisible(true);

        } else {
            subhead_panel.setVisible(false);
            subsidiary_panel.setVisible(false);

        }
    }//GEN-LAST:event_subhead_radbutItemStateChanged

    private void subhead_radbutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subhead_radbutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subhead_radbutActionPerformed

    private void elementsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_elementsItemStateChanged
        if (elements.getSelectedItem() == null) {
            mainheads.setSelectedIndex(-1);
            mainheads.setModel(new DefaultComboBoxModel());
        }
        if (elements.getSelectedIndex() != -1) {
            try {

                AccountMasterExt mele = (AccountMasterExt) elements.getSelectedItem();
                List<AccountMasterExt> acc = dmang.getaccountMainHeads(mele.getSerachkey());
                acc.add(0, null);
                mainheadsModel = new ComboBoxValModel(acc);
                mainheads.setModel(mainheadsModel);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_elementsItemStateChanged

    private void mainheadsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mainheadsItemStateChanged

    }//GEN-LAST:event_mainheadsItemStateChanged

    private void allamc_rad_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allamc_rad_butActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allamc_rad_butActionPerformed

    private void report_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report_butActionPerformed
        String asset;
         String perioddate;
         perioddate= ""+new Date();
        if (elements.getSelectedItem() != null) {
            header = elements.getSelectedItem().toString();

        } else {

            header = "ALL";

        }
        if (assetcombo.getSelectedItem() != null) {
            asset = assetcombo.getSelectedItem().toString();

        } else {

            asset = "ALL";

        }

        if (all_radbut.isSelected() && allFa_radbut.isSelected() && allamc_rad_but.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {
                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllAMC(m_App, 0);
                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllAMC(m_App, 1);
                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllAMC(m_App, 2);
                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
            DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
            DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date",perioddate);
            reportparams.put("TITLE", " AMC REPORT");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

        } else if (all_radbut.isSelected() && part.isSelected() && allamc_rad_but.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMC(m_App, 0, asset);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMC(m_App, 1, asset);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMC(m_App, 2, asset);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);
            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

            }
        } else if (all_radbut.isSelected() && activefa_radbut.isSelected() && allamc_rad_but.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {
                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMC(m_App, 0);
                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMC(m_App, 1);
                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMC(m_App, 2);
                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
            DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
            DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", " AMC REPORT");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

        } else if (all_radbut.isSelected() && wofa_radbut.isSelected() && allamc_rad_but.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {
                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMC(m_App, 0);
                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMC(m_App, 1);
                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMC(m_App, 2);
                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
            DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
            DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", " AMC REPORT");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

        } else if (all_radbut.isSelected() && allFa_radbut.isSelected() && activeamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {
                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActive(m_App, 0);
                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActive(m_App, 1);
                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActive(m_App, 2);
                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
            DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
            DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", " AMC REPORT");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

        } else if (all_radbut.isSelected() && part.isSelected() && activeamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                try {

                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMCActive(m_App, 0, asset);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMCActive(m_App, 1, asset);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMCActive(m_App, 2, asset);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);
            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

            }
        } else if (all_radbut.isSelected() && allFa_radbut.isSelected() && lastamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {
                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMC(m_App, 0);
                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMC(m_App, 1);
                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMC(m_App, 2);
                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
            DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
            DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", " AMC REPORT");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

        } else if (all_radbut.isSelected() && part.isSelected() && lastamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                try {

                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMC(m_App, 0, asset);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMC(m_App, 1, asset);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMC(m_App, 2, asset);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);
            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

            }
        } else if (all_radbut.isSelected() && activefa_radbut.isSelected() && activeamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {

                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActive(m_App, 0);
                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActive(m_App, 1);
                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActive(m_App, 2);
                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
            DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
            DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", " AMC REPORT");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

        } else if (all_radbut.isSelected() && activefa_radbut.isSelected() && lastamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {

                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLast(m_App, 0);
                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLast(m_App, 1);
                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLast(m_App, 2);
                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
            DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
            DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", " AMC REPORT");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

        } else if (all_radbut.isSelected() && wofa_radbut.isSelected() && activeamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {

                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActive(m_App, 0);
                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActive(m_App, 1);
                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActive(m_App, 2);
                }
            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
            DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
            DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", " AMC REPORT");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

        } else if (all_radbut.isSelected() && wofa_radbut.isSelected() && lastamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {

                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLast(m_App, 0);
                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLast(m_App, 1);
                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLast(m_App, 2);
                }
            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
            DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
            DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
            data1.setDataSource(dsfc);
            Map reportparams = new HashMap();
            reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
            reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
            String RPH = ReportHeader;
            reportparams.put("ReportHeader", RPH);
            reportparams.put("date", perioddate);
            reportparams.put("TITLE", " AMC REPORT");
            reportparams.put("SubHead", header);

            JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

        } else if (subhead_radbut.isSelected() && allFa_radbut.isSelected() && allamc_rad_but.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (subhead_radbut.isSelected() && part.isSelected() && allamc_rad_but.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {

                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPArtFAAMCbymaj(m_App, header, 0, asset);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPArtFAAMCbymaj(m_App, header, 1, asset);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPArtFAAMCbymaj(m_App, header, 2, asset);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", " AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {

                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCbymajnSub(m_App, header, subsidiar, 0, asset);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCbymajnSub(m_App, header, subsidiar, 1, asset);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCbymajnSub(m_App, header, subsidiar, 2, asset);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", " AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (subhead_radbut.isSelected() && activefa_radbut.isSelected() && allamc_rad_but.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (subhead_radbut.isSelected() && wofa_radbut.isSelected() && allamc_rad_but.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (subhead_radbut.isSelected() && allFa_radbut.isSelected() && activeamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActivemajcls(m_App, header, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActivemajcls(m_App, header, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActivemajcls(m_App, header, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActivemajclssubcls(m_App, header, subsidiar, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActivemajclssubcls(m_App, header, subsidiar, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActivemajclssubcls(m_App, header, subsidiar, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (subhead_radbut.isSelected() && part.isSelected() && activeamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {

                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCActivemajcls(m_App, header, 0, asset);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCActivemajcls(m_App, header, 1, asset);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCActivemajcls(m_App, header, 2, asset);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", " AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCActivemajclssubcls(m_App, header, subsidiar, 0, asset);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCActivemajclssubcls(m_App, header, subsidiar, 1, asset);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCActivemajclssubcls(m_App, header, subsidiar, 2, asset);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", " AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (subhead_radbut.isSelected() && allFa_radbut.isSelected() && lastamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMCmajcls(m_App, header, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMCmajcls(m_App, header, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMCmajcls(m_App, header, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMCmajclssubcls(m_App, header, subsidiar, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMCmajclssubcls(m_App, header, subsidiar, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMCmajclssubcls(m_App, header, subsidiar, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (subhead_radbut.isSelected() && part.isSelected() && lastamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                    try {

                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMCmajcls(m_App, header, 0, asset);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMCmajcls(m_App, header, 0, asset);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMCmajcls(m_App, header, 0, asset);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", " AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {

                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMCmajclssubcls(m_App, header, subsidiar, 0, asset);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMCmajclssubcls(m_App, header, subsidiar, 0, asset);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMCmajclssubcls(m_App, header, subsidiar, 0, asset);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", " AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (subhead_radbut.isSelected() && activefa_radbut.isSelected() && activeamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActivemajcls(m_App, header, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActivemajcls(m_App, header, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActivemajcls(m_App, header, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActivemajclssubcls(m_App, header, subsidiar, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActivemajclssubcls(m_App, header, subsidiar, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActivemajclssubcls(m_App, header, subsidiar, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (subhead_radbut.isSelected() && activefa_radbut.isSelected() && lastamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLastmajcls(m_App, header, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLastmajcls(m_App, header, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLastmajcls(m_App, header, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLastmajclssubcls(m_App, header, subsidiar, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLastmajclssubcls(m_App, header, subsidiar, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLastmajclssubcls(m_App, header, subsidiar, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (subhead_radbut.isSelected() && wofa_radbut.isSelected() && activeamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActivemajcls(m_App, header, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActivemajcls(m_App, header, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActivemajcls(m_App, header, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActivemajclssubcls(m_App, header, subsidiar, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActivemajclssubcls(m_App, header, subsidiar, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActivemajclssubcls(m_App, header, subsidiar, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        } else if (subhead_radbut.isSelected() && wofa_radbut.isSelected() && lastamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLastmajcls(m_App, header, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLastmajcls(m_App, header, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLastmajcls(m_App, header, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLastmajclssubcls(m_App, header, subsidiar, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLastmajclssubcls(m_App, header, subsidiar, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLastmajclssubcls(m_App, header, subsidiar, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

            }

        }


    }//GEN-LAST:event_report_butActionPerformed

    private void viewList_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewList_butActionPerformed
        jTable1.setVisible(true);
        String asset;
        if (elements.getSelectedItem() != null) {
            header = elements.getSelectedItem().toString();

        } else {

            header = "ALL";

        }
        if (assetcombo.getSelectedItem() != null) {
            asset = assetcombo.getSelectedItem().toString();

        } else {

            asset = "ALL";

        }

        if (all_radbut.isSelected() && allFa_radbut.isSelected() && allamc_rad_but.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {
                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllAMC(m_App, 0);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllAMC(m_App, 1);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllAMC(m_App, 2);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

        }
        if (all_radbut.isSelected() && part.isSelected() && allamc_rad_but.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMC(m_App, 0, asset);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMC(m_App, 1, asset);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMC(m_App, 2, asset);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }
        }
        if (all_radbut.isSelected() && activefa_radbut.isSelected() && allamc_rad_but.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {
                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMC(m_App, 0);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMC(m_App, 1);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMC(m_App, 2);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

        }
        if (all_radbut.isSelected() && wofa_radbut.isSelected() && allamc_rad_but.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {
                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMC(m_App, 0);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMC(m_App, 1);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMC(m_App, 2);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

        }

        if (all_radbut.isSelected() && allFa_radbut.isSelected() && activeamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {
                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActive(m_App, 0);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActive(m_App, 1);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActive(m_App, 2);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

        }
        if (all_radbut.isSelected() && part.isSelected() && activeamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                try {

                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMCActive(m_App, 0, asset);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMCActive(m_App, 1, asset);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMCActive(m_App, 2, asset);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }
        }
        if (all_radbut.isSelected() && allFa_radbut.isSelected() && lastamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {
                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMC(m_App, 0);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMC(m_App, 1);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMC(m_App, 2);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

        }
        if (all_radbut.isSelected() && part.isSelected() && lastamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
            if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                try {

                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMC(m_App, 0, asset);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMC(m_App, 1, asset);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMC(m_App, 2, asset);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
            } else {
                JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }
        }

        if (all_radbut.isSelected() && activefa_radbut.isSelected() && activeamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {

                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActive(m_App, 0);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActive(m_App, 1);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActive(m_App, 2);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

        }

        if (all_radbut.isSelected() && activefa_radbut.isSelected() && lastamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {

                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLast(m_App, 0);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLast(m_App, 1);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLast(m_App, 2);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                }

            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

        }
        if (all_radbut.isSelected() && wofa_radbut.isSelected() && activeamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {

                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActive(m_App, 0);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActive(m_App, 1);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActive(m_App, 2);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                }
            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

        }
        if (all_radbut.isSelected() && wofa_radbut.isSelected() && lastamc_radbut.isSelected()) {
            AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

            try {

                if (alpha_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLast(m_App, 0);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else if (renewal_radbut.isSelected()) {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLast(m_App, 1);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                } else {
                    AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLast(m_App, 2);
                    jTable1.setModel(AMC_Table_Model.getTableModel());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                }
            } catch (BasicException ex) {
                Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
            }
            AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

        }

        if (subhead_radbut.isSelected() && allFa_radbut.isSelected() && allamc_rad_but.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }

        }
        if (subhead_radbut.isSelected() && part.isSelected() && allamc_rad_but.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {

                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPArtFAAMCbymaj(m_App, header, 0, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPArtFAAMCbymaj(m_App, header, 1, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPArtFAAMCbymaj(m_App, header, 2, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {

                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCbymajnSub(m_App, header, subsidiar, 0, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCbymajnSub(m_App, header, subsidiar, 1, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCbymajnSub(m_App, header, subsidiar, 2, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }

        }
        if (subhead_radbut.isSelected() && activefa_radbut.isSelected() && allamc_rad_but.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }

        }
        if (subhead_radbut.isSelected() && wofa_radbut.isSelected() && allamc_rad_but.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }

        }

        if (subhead_radbut.isSelected() && allFa_radbut.isSelected() && activeamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActivemajcls(m_App, header, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActivemajcls(m_App, header, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActivemajcls(m_App, header, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActivemajclssubcls(m_App, header, subsidiar, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActivemajclssubcls(m_App, header, subsidiar, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCActivemajclssubcls(m_App, header, subsidiar, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }

        }
        if (subhead_radbut.isSelected() && part.isSelected() && activeamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {

                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCActivemajcls(m_App, header, 0, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCActivemajcls(m_App, header, 1, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCActivemajcls(m_App, header, 2, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCActivemajclssubcls(m_App, header, subsidiar, 0, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCActivemajclssubcls(m_App, header, subsidiar, 1, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCActivemajclssubcls(m_App, header, subsidiar, 2, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }

        }

        if (subhead_radbut.isSelected() && allFa_radbut.isSelected() && lastamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMCmajcls(m_App, header, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMCmajcls(m_App, header, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMCmajcls(m_App, header, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMCmajclssubcls(m_App, header, subsidiar, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMCmajclssubcls(m_App, header, subsidiar, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllLastAMCmajclssubcls(m_App, header, subsidiar, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }

        }
        if (subhead_radbut.isSelected() && part.isSelected() && lastamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {
                    try {

                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMCmajcls(m_App, header, 0, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMCmajcls(m_App, header, 0, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMCmajcls(m_App, header, 0, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }
            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                if (assetcombo.getSelectedIndex() != -1 && assetcombo.getSelectedItem() != null) {

                    try {

                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMCmajclssubcls(m_App, header, subsidiar, 0, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMCmajclssubcls(m_App, header, subsidiar, 0, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforPartFALastAMCmajclssubcls(m_App, header, subsidiar, 0, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }

        }

        if (subhead_radbut.isSelected() && activefa_radbut.isSelected() && activeamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActivemajcls(m_App, header, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActivemajcls(m_App, header, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActivemajcls(m_App, header, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActivemajclssubcls(m_App, header, subsidiar, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActivemajclssubcls(m_App, header, subsidiar, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCActivemajclssubcls(m_App, header, subsidiar, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }

        }

        if (subhead_radbut.isSelected() && activefa_radbut.isSelected() && lastamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLastmajcls(m_App, header, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLastmajcls(m_App, header, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLastmajcls(m_App, header, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLastmajclssubcls(m_App, header, subsidiar, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLastmajclssubcls(m_App, header, subsidiar, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCLastmajclssubcls(m_App, header, subsidiar, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }

        }
        if (subhead_radbut.isSelected() && wofa_radbut.isSelected() && activeamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActivemajcls(m_App, header, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActivemajcls(m_App, header, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActivemajcls(m_App, header, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActivemajclssubcls(m_App, header, subsidiar, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActivemajclssubcls(m_App, header, subsidiar, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCActivemajclssubcls(m_App, header, subsidiar, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }

        }
        if (subhead_radbut.isSelected() && wofa_radbut.isSelected() && lastamc_radbut.isSelected()) {
            if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                header = elements.getSelectedItem().toString();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLastmajcls(m_App, header, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLastmajcls(m_App, header, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLastmajcls(m_App, header, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                header = elements.getSelectedItem().toString();
                subsidiar = mainheads.getSelectedItem().toString();

                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLastmajclssubcls(m_App, header, subsidiar, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLastmajclssubcls(m_App, header, subsidiar, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCLastmajclssubcls(m_App, header, subsidiar, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(AMCReport.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else {
                JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                jTable1.setModel(new DefaultTableModel());
                complete_rep.setVisible(false);
            }

        }


    }//GEN-LAST:event_viewList_butActionPerformed

    private void complete_repActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_complete_repActionPerformed
        if (jTable1.getSelectedRow() != -1) {

            int row = jTable1.getSelectedRow();
            
            ListOfAMCTable_model.AMCInfo amc = AMC_Table_Model.getAMCList().get(row);
            jPanel5.setVisible(true);
            jPanel1.setVisible(false);

            String contractor1 = amc.getCONTRACTOR();
            String particular1 = amc.getPARTICULAR();
            Date startdate = amc.getSTART_DATE();
            Date enddate1 = amc.getEND_DATE();
            String period1 = amc.getPERIOD();
            Double rate1 = amc.getRATE();
            Double amount1 = amc.getAMOUNT();
            String accoun1t = amc.getACCOUNT();
            Date reminderdate = amc.getREMINDER_DATE();
            doc_link = amc.getDOC_LINK();
            String remarks = amc.getREMARK();
            String appby = amc.getAPPROVED_BY();
            Date appdate1 = amc.getAPPROVED_DATE();
            String asset = amc.getASSET();
            String credt_byrdf = amc.getCreated_BY();
            Date crddddt_date = amc.getCreated_DATE();
            try {
                if (doc_link != null) {
                    doc_link = doc_link;
                } else {
                    doc_link = "";

                }
                File file1 = new File(doc_link.replace("./", ""));;
                if (file1.exists() == true) {

                    jButton3.setVisible(true);
                } else {

                    jButton3.setVisible(false);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (asset != null) {
                assetlabel.setText(asset + "");
            } else {
                assetlabel.setText("ALL");
            }
            if (appby != null) {
                apprby.setText(":" + " " + appby + "");
            } else {
                apprby.setText(":" + "");
            }
            if (credt_byrdf != null) {
                crdt_by.setText(":" + " " + credt_byrdf + "");
            } else {
                crdt_by.setText(":" + "");
            }
            if (appdate1 != null) {
                appdate.setText(":" + " " + Formats.TIMESTAMP.formatValue(appdate1) + "");
            } else {
                appdate.setText(":" + "");
            }
            if (particular1 != null) {
                particular.setText(":" + " " + particular1 + "");
            } else {
                particular.setText(":" + "");
            }
            if (startdate != null) {
                Startdate.setText(":" + " " + Formats.TIMESTAMP.formatValue(startdate) + "");
            } else {
                Startdate.setText(":" + "");
            }
            if (enddate1 != null) {
                enddate.setText(":" + " " + Formats.TIMESTAMP.formatValue(enddate1) + "");
            } else {
                enddate.setText(":" + "");
            }
            if (rate1 != null) {
                String x=decimalFormat.format(rate1);
                rate.setText(":" + " " +x+"%"  + "");
            } else {
                rate.setText(":" + "");
            }
            if (amount1 != null) {
                account.setText(":" + " " + decimalFormat.format(amount1) + "");
            } else {
                account.setText(":" + "");
            }
            if (accoun1t != null) {
                amount.setText(":" + " " + accoun1t + "");
            } else {
                amount.setText(":" + "");
            }
            if (reminderdate != null) {
                renewaldate.setText(":" + " " + Formats.TIMESTAMP.formatValue(reminderdate) + "");
            } else {
                renewaldate.setText(":" + "");
            }
            if (crddddt_date != null) {
                crdtd_date.setText(":" + " " + Formats.TIMESTAMP.formatValue(crddddt_date) + "");
            } else {
                crdtd_date.setText(":" + "");
            }
            if (contractor1 != null) {
                contractor.setText(":" + " " + contractor1 + "");
            } else {
                contractor.setText(":" + "");
            }
            if (remarks != null) {
                remark.setText(":" + " " + remarks + "");
            } else {
                remark.setText(":" + "");
            }
            if (period1 != null) {
                period.setText(":" + " " + period1 + "");
            } else {
                period.setText(":" + "");
            }

        }
    }//GEN-LAST:event_complete_repActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
       
        if (jTable1.getSelectedRow() != -1) {
            complete_rep.setVisible(true);
        } else {
            complete_rep.setVisible(false);

        }

    }//GEN-LAST:event_jTable1MouseClicked

    private void back_but2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_but2ActionPerformed
        jPanel1.setVisible(true);
        jPanel5.setVisible(false);
    }//GEN-LAST:event_back_but2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        try {
            if (doc_link != null) {
                doc_link = doc_link;
            } else {
                doc_link = "";

            }
            File file1 = new File(doc_link.replace("./", ""));;
            if (file1.exists() == true) {

                java.awt.Desktop.getDesktop().open(file1);
            } else {
                JOptionPane.showMessageDialog(this, "File not Found", null, JOptionPane.OK_OPTION);

            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void partItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_partItemStateChanged
        if (part.isSelected()) {
            combo_panel.setVisible(true);
        } else {
            combo_panel.setVisible(false);
            assetcombo.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_partItemStateChanged

    private void complete_repMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_complete_repMouseClicked
        if (jTable1.getSelectedRow() != -1) {
            
            complete_rep.setVisible(true);
            
        } else {
            JOptionPane.showMessageDialog(this, "select table row ", null, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_complete_repMouseClicked

    protected static Window getWindow(Component parent) {
        if (parent == null) {
            return new JFrame();
        } else if (parent instanceof Frame || parent instanceof Dialog) {
            return (Window) parent;
        } else {
            return getWindow(parent.getParent());
        }
    }

    private class ItemsListModel extends AbstractListModel {

        private java.util.List items;

        public ItemsListModel(java.util.List items) {
            this.items = items;
        }

        public int getSize() {
            return items.size();
        }

        public Object getElementAt(int i) {
            return items.get(i);
        }
    }

    @Override
    public String getTitle() {
        return AppLocal.getIntString("List Of AMC");
    }

    @Override
    public void activate() throws BasicException {

        loaddata();
        ButtonGrp();

    }

    @Override
    public boolean deactivate() {
        return true;
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public void init(AppView app) throws BeanFactoryException {
        m_App = app;
        dmang = (DataLogicFacilities) m_App.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");

    }

    @Override
    public Object getBean() {
        return this;
    }

    public void loaddata() throws BasicException {
        jTable1.setVisible(false);
        all_radbut.setSelected(true);
        allamc_rad_but.setSelected(true);
        allFa_radbut.setSelected(true);
        alpha_radbut.setSelected(true);
        jPanel5.setVisible(false);
        jPanel1.setVisible(true);
        complete_rep.setVisible(false);
        assetListModel = new ComboBoxValModel(getAssetList());
        assetcombo.setModel(assetListModel);
        elementsModel = new ComboBoxValModel(dmang.getaccountElements());
        elements.setModel(elementsModel);
        combo_panel.setVisible(false);
    }

    public void ButtonGrp() {

        ButtonGroup bg1 = new ButtonGroup();
        bg1.add(allamc_rad_but);
        bg1.add(activeamc_radbut);
        bg1.add(lastamc_radbut);

        ButtonGroup bg2 = new ButtonGroup();
        bg2.add(allFa_radbut);
        bg2.add(activefa_radbut);
        bg2.add(wofa_radbut);
        bg2.add(part);

        ButtonGroup bg3 = new ButtonGroup();
        bg3.add(all_radbut);
        bg3.add(subhead_radbut);

        ButtonGroup bg4 = new ButtonGroup();
        bg4.add(alpha_radbut);
        bg4.add(dateofamc_radbut);
        bg4.add(renewal_radbut);

    }

    public List getAssetList() throws BasicException {
        List<Object> assetList = new ArrayList<Object>();
        assetList = (List<Object>) new StaticSentence(m_App.getSession(), "select name from fa_master where active=true order by name ", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).list();

        return assetList;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Startdate;
    private javax.swing.JLabel account;
    private javax.swing.JRadioButton activeamc_radbut;
    private javax.swing.JRadioButton activefa_radbut;
    private javax.swing.JRadioButton allFa_radbut;
    private javax.swing.JRadioButton all_radbut;
    private javax.swing.JRadioButton allamc_rad_but;
    private javax.swing.JRadioButton alpha_radbut;
    private javax.swing.JLabel amount;
    private javax.swing.JLabel appdate;
    private javax.swing.JLabel apprby;
    private javax.swing.JComboBox assetcombo;
    private javax.swing.JLabel assetlabel;
    private javax.swing.JButton back_but2;
    private javax.swing.JPanel combo_panel;
    private javax.swing.JButton complete_rep;
    private javax.swing.JLabel contractor;
    private javax.swing.JLabel crdt_by;
    private javax.swing.JLabel crdtd_date;
    private javax.swing.JRadioButton dateofamc_radbut;
    private javax.swing.JComboBox elements;
    private javax.swing.JLabel enddate;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton lastamc_radbut;
    private javax.swing.JComboBox mainheads;
    private javax.swing.JRadioButton part;
    private javax.swing.JLabel particular;
    private javax.swing.JLabel period;
    private javax.swing.JLabel rate;
    private javax.swing.JLabel remark;
    private javax.swing.JRadioButton renewal_radbut;
    private javax.swing.JLabel renewaldate;
    private javax.swing.JButton report_but;
    private javax.swing.JPanel subhead_panel;
    private javax.swing.JRadioButton subhead_radbut;
    private javax.swing.JPanel subsidiary_panel;
    private javax.swing.JButton viewList_but;
    private javax.swing.JRadioButton wofa_radbut;
    // End of variables declaration//GEN-END:variables
}
