/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.FixedAssetRegistration;

import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.format.Formats;
import com.openbravo.pos.Library.LibDataLogicFacilitiesCreate;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Window;
import java.util.Date;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import com.openbravo.pos.Accounts.AccountMasterExt;
import com.openbravo.pos.clubmang.DataSourceProvider;
import com.openbravo.pos.clubmang.JasperReportNew;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.sf.jasperreports.engine.JasperPrint;
import javax.swing.table.TableCellRenderer;
import java.awt.Color;
import javax.swing.JComponent;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dev3
 */
public class ReportOfAMCnNonAMCAssets extends javax.swing.JPanel implements JPanelView, BeanFactoryApp {

    private AppView m_App;
    private ComboBoxValModel assetListModel;
    private static DataLogicFacilities dmang;
    private static ComboBoxValModel elementsModel;
    private static ComboBoxValModel mainheadsModel;
    private Date fromDate;
    private Date toDat;
    private Date asonDate;
    private LibDataLogicFacilitiesCreate dlfac;
    private String header = null;
    private String perioddate;
    private String subsidiar = null;
    private String ReportHeader;
    DecimalFormat decimalFormat = new DecimalFormat("#0.00");
     DecimalFormat df = new DecimalFormat("#.00%");
    private ListOfAMCnNonAMCReportTableModel nonamc_table;
    private ListOfAMCTable_model amc_table;

    private List<ListOfAMCTable_model.AMCInfo> AMC_info_List_all;
    private ListOfAMCTable_model AMC_Table_Model;

    private List<ListOfAMCnNonAMCReportTableModel.NonamcInfo> Non_AMC_info_List_all;
    private ListOfAMCnNonAMCReportTableModel Non_AMC_Table_Model;
    File documentfile;
    File file = null;
    String filename;
    File selectedFile;
    String doc_link;
    private int amckey=0;

    /**
     * Creates new form ReportOfAMCnNonAMCAssets
     */
    public ReportOfAMCnNonAMCAssets() {
        initComponents();
        jPanel2.setVisible(false);
        jPanel1.setVisible(true);
        all_radbut.setSelected(true);
        AMC_radbut.setSelected(true);
        allFa_radbut.setSelected(true);
        alpha_radbut.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        AMC_radbut = new javax.swing.JRadioButton();
        nonamc_radbut = new javax.swing.JRadioButton();
        all_radbut = new javax.swing.JRadioButton();
        Particular_radbut = new javax.swing.JRadioButton();
        subsidiary_panel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        mainheads = new javax.swing.JComboBox();
        allFa_radbut = new javax.swing.JRadioButton();
        activefa_radbut = new javax.swing.JRadioButton();
        wofa_radbut = new javax.swing.JRadioButton();
        dateofamc_radbut = new javax.swing.JRadioButton();
        renewal_radbut = new javax.swing.JRadioButton();
        report_but = new javax.swing.JButton();
        viewlist_but = new javax.swing.JButton();
        subhead_panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        elements = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable(){public Component prepareRenderer(TableCellRenderer renderer,
            int rowIndex, int vColIndex) {
            Component c = super.prepareRenderer(renderer, rowIndex, vColIndex);
            if (c instanceof JComponent) {
                JComponent jc = (JComponent)c;
                jc.setToolTipText(String.valueOf(getValueAt(rowIndex, vColIndex)));

                if (rowIndex % 2 == 0 && !isCellSelected(rowIndex, vColIndex)) {
                    jc.setBackground(Color.lightGray);
                }
                else {
                    jc.setBackground(Color.white);
                }
                if(isCellSelected(rowIndex, vColIndex))
                jc.setBackground(Color.cyan);
            }
            return c;
        }};
        part = new javax.swing.JRadioButton();
        combo_panel1 = new javax.swing.JPanel();
        assetcombo1 = new javax.swing.JComboBox();
        complete_rep = new javax.swing.JButton();
        alpha_radbut = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        back_but = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        contractor = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        particular = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Startdate = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        period = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        enddate = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        rate = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        account = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        amount = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        remark = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        renewaldate = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        apprby = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        appdate = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        crdtd_by = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        crdtd_date = new javax.swing.JLabel();
        assetlabel = new javax.swing.JLabel();

        AMC_radbut.setText("AMC");
        AMC_radbut.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                AMC_radbutItemStateChanged(evt);
            }
        });

        nonamc_radbut.setText("NONAMC");
        nonamc_radbut.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nonamc_radbutItemStateChanged(evt);
            }
        });

        all_radbut.setText("ALL");
        all_radbut.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                all_radbutItemStateChanged(evt);
            }
        });

        Particular_radbut.setText("Particular Subhead");
        Particular_radbut.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Particular_radbutItemStateChanged(evt);
            }
        });

        jLabel2.setText("Subsidiary");

        mainheads.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mainheadsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout subsidiary_panelLayout = new javax.swing.GroupLayout(subsidiary_panel);
        subsidiary_panel.setLayout(subsidiary_panelLayout);
        subsidiary_panelLayout.setHorizontalGroup(
            subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subsidiary_panelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainheads, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        subsidiary_panelLayout.setVerticalGroup(
            subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subsidiary_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(mainheads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        allFa_radbut.setText(" ALL FA");

        activefa_radbut.setText("Active FA");

        wofa_radbut.setText("WO FA");

        dateofamc_radbut.setText("Date Of AMC");

        renewal_radbut.setText("Renewal Date");

        report_but.setForeground(java.awt.Color.red);
        report_but.setText("Report");
        report_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report_butActionPerformed(evt);
            }
        });

        viewlist_but.setForeground(java.awt.Color.red);
        viewlist_but.setText("ViewList");
        viewlist_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewlist_butActionPerformed(evt);
            }
        });

        jLabel1.setText("SubHead");

        elements.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                elementsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout subhead_panelLayout = new javax.swing.GroupLayout(subhead_panel);
        subhead_panel.setLayout(subhead_panelLayout);
        subhead_panelLayout.setHorizontalGroup(
            subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subhead_panelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(elements, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        subhead_panelLayout.setVerticalGroup(
            subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subhead_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(elements, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1))
        );

        jLabel6.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel6.setForeground(java.awt.Color.blue);
        jLabel6.setText("Select FA :");

        jLabel8.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel8.setForeground(java.awt.Color.blue);
        jLabel8.setText("Order By :");

        jLabel9.setFont(new java.awt.Font("Ubuntu", 3, 15)); // NOI18N
        jLabel9.setForeground(java.awt.Color.blue);
        jLabel9.setText("Select Account :");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        part.setText("Particular Asset");
        part.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                partItemStateChanged(evt);
            }
        });

        assetcombo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout combo_panel1Layout = new javax.swing.GroupLayout(combo_panel1);
        combo_panel1.setLayout(combo_panel1Layout);
        combo_panel1Layout.setHorizontalGroup(
            combo_panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, combo_panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(assetcombo1, 0, 165, Short.MAX_VALUE)
                .addContainerGap())
        );
        combo_panel1Layout.setVerticalGroup(
            combo_panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(assetcombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        complete_rep.setForeground(java.awt.Color.red);
        complete_rep.setText("View Complete Document");
        complete_rep.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                complete_repMouseClicked(evt);
            }
        });
        complete_rep.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                complete_repItemStateChanged(evt);
            }
        });
        complete_rep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                complete_repActionPerformed(evt);
            }
        });

        alpha_radbut.setText("Alphabetical Order");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(jLabel8))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(120, 120, 120)
                                .addComponent(activefa_radbut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wofa_radbut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(part)
                                .addGap(24, 24, 24)
                                .addComponent(combo_panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(report_but, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(viewlist_but, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(all_radbut, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AMC_radbut, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Particular_radbut)
                                    .addComponent(nonamc_radbut)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(complete_rep)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 972, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(157, 157, 157)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(subhead_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(subsidiary_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(allFa_radbut, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(alpha_radbut, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(renewal_radbut)
                                            .addGap(18, 18, 18)
                                            .addComponent(dateofamc_radbut))))))
                        .addGap(0, 13, Short.MAX_VALUE)))
                .addGap(45, 45, 45))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nonamc_radbut)
                    .addComponent(AMC_radbut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(Particular_radbut)
                    .addComponent(all_radbut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(subsidiary_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subhead_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(allFa_radbut)
                        .addComponent(activefa_radbut)
                        .addComponent(wofa_radbut)
                        .addComponent(part))
                    .addComponent(combo_panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(renewal_radbut)
                        .addComponent(alpha_radbut)
                        .addComponent(dateofamc_radbut))
                    .addComponent(jLabel8)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(report_but)
                            .addComponent(viewlist_but))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(complete_rep)
                .addContainerGap())
        );

        jLabel17.setFont(new java.awt.Font("Ubuntu", 3, 18)); // NOI18N
        jLabel17.setForeground(java.awt.Color.red);
        jLabel17.setText("AMC DETAILS FOR ASSET:");

        back_but.setForeground(java.awt.Color.red);
        back_but.setText("Cancel");
        back_but.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_butActionPerformed(evt);
            }
        });

        jButton1.setForeground(java.awt.Color.red);
        jButton1.setText("View Document");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel3.setText("Contractor");

        contractor.setText("jLabel19");

        jLabel4.setText("Particular ");

        particular.setText("jLabel20");

        jLabel5.setText("StartDate ");

        Startdate.setText("jLabel21");

        jLabel7.setText("Period ");

        period.setText("jLabel22");

        jLabel10.setText("EndDate ");

        enddate.setText("jLabel23");

        jLabel11.setText("Rate ");

        rate.setText("jLabel24");

        jLabel12.setText("Account ");

        account.setText("jLabel25");

        jLabel13.setText("Amount ");

        amount.setText("jLabel26");

        jLabel14.setText("Remark ");

        remark.setText("jLabel27");

        jLabel15.setText("Renewal Date ");

        renewaldate.setText("jLabel28");

        jLabel16.setText("Approved By ");

        apprby.setText("jLabel29");

        jLabel18.setText("Approved Date ");

        appdate.setText("jLabel30");

        jLabel19.setText("Created By");

        crdtd_by.setText(" jLabel20");

        jLabel21.setText("Created Date");

        crdtd_date.setText("jLabel22");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(particular, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(enddate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Startdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(period, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rate, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(contractor, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(crdtd_by, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(renewaldate, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(remark, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                                .addComponent(amount, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(account, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(apprby, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                                .addComponent(appdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(crdtd_date, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(contractor)
                    .addComponent(jLabel12)
                    .addComponent(account))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(particular)
                    .addComponent(jLabel13)
                    .addComponent(amount))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(Startdate)
                    .addComponent(jLabel14)
                    .addComponent(remark))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(period)
                    .addComponent(jLabel15)
                    .addComponent(renewaldate))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(enddate)
                    .addComponent(jLabel16)
                    .addComponent(apprby))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(rate)
                    .addComponent(jLabel18)
                    .addComponent(appdate))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(crdtd_by)
                    .addComponent(jLabel21)
                    .addComponent(crdtd_date))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        assetlabel.setFont(new java.awt.Font("Ubuntu", 3, 18)); // NOI18N
        assetlabel.setForeground(java.awt.Color.blue);
        assetlabel.setText("jLabel19");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assetlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(back_but, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(assetlabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(back_but)
                    .addComponent(jButton1))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
protected static Window getWindow(Component parent) {
        if (parent == null) {
            return new JFrame();
        } else if (parent instanceof Frame || parent instanceof Dialog) {
            return (Window) parent;
        } else {
            return getWindow(parent.getParent());
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            if (doc_link != null) {
                doc_link = doc_link;
            } else {
                doc_link = "";

            }
            File file1 = new File(doc_link.replace("./", ""));;
            if (file1.exists() == true) {

                java.awt.Desktop.getDesktop().open(file1);
            } else {
                JOptionPane.showMessageDialog(this, "File  not Found", null, JOptionPane.OK_OPTION);

            }
        } catch (IOException e) {
            e.printStackTrace();
        }    

    }//GEN-LAST:event_jButton1ActionPerformed

    private void back_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_butActionPerformed
        jPanel1.setVisible(true);
        jPanel2.setVisible(false);
    }//GEN-LAST:event_back_butActionPerformed

    private void complete_repActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_complete_repActionPerformed
        if (AMC_radbut.isSelected()) {
            if (jTable1.getSelectedRow() != -1) {

                int row = jTable1.getSelectedRow();
                
                if (AMC_radbut.isSelected()) {
                    ListOfAMCTable_model.AMCInfo amc = AMC_Table_Model.getAMCList().get(row);
                    jPanel2.setVisible(true);
                    jPanel1.setVisible(false);

                    String contractor1 = amc.getCONTRACTOR();
                    String particular1 = amc.getPARTICULAR();
                    Date startdate = amc.getSTART_DATE();
                    Date enddate1 = amc.getEND_DATE();
                    String period1 = amc.getPERIOD();
                    Double rate1 = amc.getRATE();
                    Double amount1 = amc.getAMOUNT();
                    String accoun1t = amc.getACCOUNT();
                    Date reminderdate = amc.getREMINDER_DATE();
                    doc_link = amc.getDOC_LINK();
                    String remarks = amc.getREMARK();
                    String appby = amc.getAPPROVED_BY();
                    Date appdate1 = amc.getAPPROVED_DATE();
                    String asset = amc.getASSET();
                    String crdt_by=amc.getCreated_BY();
                    Date crdt_date=amc.getCreated_DATE();
                   try {
                if (doc_link != null) {
                    doc_link = doc_link;
                } else {
                    doc_link = "";

                }
                File file1 = new File(doc_link.replace("./", ""));;
                if (file1.exists() == true) {

                    jButton1.setVisible(true);
                } else {

                    jButton1.setVisible(false);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

                    if (appby != null) {
                        apprby.setText(":" + " " + appby + "");
                    } else {
                        apprby.setText(":" +"");
                    }
                     if (crdt_by != null) {
                        crdtd_by.setText(":" + " " + crdt_by + "");
                    } else {
                        crdtd_by.setText(":" +"");
                    }

                    if (asset != null) {
                        assetlabel.setText(asset + "");
                    } else {
                        assetlabel.setText("ALL");
                    }
                    if (crdt_date != null) {
                        crdtd_date.setText(":" + " " + Formats.TIMESTAMP.formatValue(crdt_date) + "");
                    } else {
                        crdtd_date.setText(":" +"");
                    }
                    if (appdate1 != null) {
                        appdate.setText(":" + " " + Formats.TIMESTAMP.formatValue(appdate1) + "");
                    } else {
                        appdate.setText(":" +"");
                    }
                    if (particular1 != null) {
                        particular.setText(":" + " " + particular1 + "");
                    } else {
                        particular.setText(":" +"");
                    }
                    if (startdate != null) {
                        Startdate.setText(":" + " " + Formats.TIMESTAMP.formatValue(startdate) + "");
                    } else {
                        Startdate.setText(":" +"");
                    }
                    if (enddate1 != null) {
                        enddate.setText(":" + " " + Formats.TIMESTAMP.formatValue(enddate1) + "");
                    } else {
                        enddate.setText(":" +"");
                    }
                    if (rate1 != null) {
                        String x=decimalFormat.format(rate1);
                        rate.setText(":" + " " +x+"%"  + "");
                    } else {
                        rate.setText(":" +"");
                    }
                    if (amount1 != null) {
                        account.setText(":" + " " + decimalFormat.format(amount1) + "");
                    } else {
                        account.setText(":" +"");
                    }
                    if (accoun1t != null) {
                        amount.setText(":" + " " + accoun1t + "");
                    } else {
                        amount.setText(":" +"");
                    }
                    if (reminderdate != null) {
                        renewaldate.setText(":" + " " + Formats.TIMESTAMP.formatValue(reminderdate) + "");
                    } else {
                        renewaldate.setText(":" +"");
                    }
                    if (contractor1 != null) {
                        contractor.setText(":" + " " + contractor1 + "");
                    } else {
                        contractor.setText(":" +"");
                    }
                    if (remarks != null) {
                        remark.setText(":" + " " + remarks + "");
                    } else {
                        remark.setText(":" +"");
                    }
                    if (period1 != null) {
                        period.setText(":" + " " + period1 + "");
                    } else {
                        period.setText(":" +"");
                    }

                }

            }
        }
    }//GEN-LAST:event_complete_repActionPerformed

    private void partItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_partItemStateChanged
        if (part.isSelected()) {
            combo_panel1.setVisible(true);
        } else {
            combo_panel1.setVisible(false);
            assetcombo1.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_partItemStateChanged

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (AMC_radbut.isSelected()) {
            
            if (jTable1.getSelectedRow() != -1 && (amckey==1)) {
               
                complete_rep.setVisible(true);

            }

        } else {
            complete_rep.setVisible(false);

        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void elementsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_elementsItemStateChanged
        if (elements.getSelectedItem() == null) {
            mainheads.setSelectedIndex(-1);
            mainheads.setModel(new DefaultComboBoxModel());
        }
        if (elements.getSelectedIndex() != -1) {
            try {

                AccountMasterExt mele = (AccountMasterExt) elements.getSelectedItem();
                mainheadsModel = new ComboBoxValModel(dmang.getaccountMainHeads1(mele.getSerachkey()));
                mainheads.setModel(mainheadsModel);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_elementsItemStateChanged

    private void viewlist_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewlist_butActionPerformed
        jTable1.setVisible(true);
        String asset;
        if (elements.getSelectedItem() != null) {
            header = elements.getSelectedItem().toString();

        } else {

            header = "ALL";

        }
        if (assetcombo1.getSelectedItem() != null) {
            asset = assetcombo1.getSelectedItem().toString();

        } else {

            asset = "ALL";

        }

        if (AMC_radbut.isSelected()) {
           amckey=1;
            if (all_radbut.isSelected() && allFa_radbut.isSelected()) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                
                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMC(m_App, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                       //  amckey=1;

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMC(m_App, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMC(m_App, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            } else if (all_radbut.isSelected() && part.isSelected()) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                if (assetcombo1.getSelectedIndex() != -1 && assetcombo1.getSelectedItem() != null) {

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMC(m_App, 0, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMC(m_App, 1, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMC(m_App, 2, asset);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }
            } else if (Particular_radbut.isSelected() && part.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                    header = elements.getSelectedItem().toString();
                    if (assetcombo1.getSelectedIndex() != -1 && assetcombo1.getSelectedItem() != null) {

                        try {

                            if (alpha_radbut.isSelected()) {
                                AMC_Table_Model = ListOfAMCTable_model.LoadforPArtFAAMCbymaj(m_App, header, 0, asset);
                                jTable1.setModel(AMC_Table_Model.getTableModel());
                                 jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                            } else if (renewal_radbut.isSelected()) {
                                AMC_Table_Model = ListOfAMCTable_model.LoadforPArtFAAMCbymaj(m_App, header, 1, asset);
                                jTable1.setModel(AMC_Table_Model.getTableModel());
                                 jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                            } else {
                                AMC_Table_Model = ListOfAMCTable_model.LoadforPArtFAAMCbymaj(m_App, header, 2, asset);
                                jTable1.setModel(AMC_Table_Model.getTableModel());
                                 jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                            }

                        } catch (BasicException ex) {
                            Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                        jTable1.setModel(new DefaultTableModel());
                        complete_rep.setVisible(false);
                    }
                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                    if (assetcombo1.getSelectedIndex() != -1 && assetcombo1.getSelectedItem() != null) {

                        try {

                            if (alpha_radbut.isSelected()) {
                                AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCbymajnSub(m_App, header, subsidiar, 0, asset);
                                jTable1.setModel(AMC_Table_Model.getTableModel());
                                 jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                            } else if (renewal_radbut.isSelected()) {
                                AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCbymajnSub(m_App, header, subsidiar, 1, asset);
                                jTable1.setModel(AMC_Table_Model.getTableModel());
                                 jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                            } else {
                                AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCbymajnSub(m_App, header, subsidiar, 2, asset);
                                jTable1.setModel(AMC_Table_Model.getTableModel());
                                 jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                            }

                        } catch (BasicException ex) {
                            Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                        jTable1.setModel(new DefaultTableModel());
                        complete_rep.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }

            }
            if (all_radbut.isSelected() && activefa_radbut.isSelected()) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMC(m_App, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMC(m_App, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMC(m_App, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            }
            if (all_radbut.isSelected() && wofa_radbut.isSelected()) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMC(m_App, 0);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMC(m_App, 1);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMC(m_App, 2);
                        jTable1.setModel(AMC_Table_Model.getTableModel());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

            }

            if (Particular_radbut.isSelected() && allFa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 0);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 1);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 2);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 0);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 1);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 2);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }

            }
            if (Particular_radbut.isSelected() && activefa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 0);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 1);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 2);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 0);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 1);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 2);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }

            }
            if (Particular_radbut.isSelected() && wofa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 0);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 1);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 2);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 0);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 1);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 2);
                            jTable1.setModel(AMC_Table_Model.getTableModel());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }

            }

        } else if (nonamc_radbut.isSelected()) {
           complete_rep.setVisible(false);
           amckey=0;
            if (elements.getSelectedItem() != null) {
                header = elements.getSelectedItem().toString();

            } else {

                header = "ALL";

            }

            if (all_radbut.isSelected() && allFa_radbut.isSelected()) {
                Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                try {
                    Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMC(m_App, 0);
                    jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                    if (alpha_radbut.isSelected()) {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMC(m_App, 0);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMC(m_App, 1);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMC(m_App, 2);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    }

                } catch (BasicException ex) {
                    Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();

            } else if (all_radbut.isSelected() && part.isSelected()) {
                Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();
                if (assetcombo1.getSelectedIndex() != -1 && assetcombo1.getSelectedItem() != null) {
                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMC(m_App, 0, asset);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        if (alpha_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMC(m_App, 0, asset);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMC(m_App, 1, asset);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        } else {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMC(m_App, 2, asset);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }
            } else if (all_radbut.isSelected() && activefa_radbut.isSelected()) {
                Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                try {
                    Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMC(m_App, 0);
                    jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    if (alpha_radbut.isSelected()) {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMC(m_App, 0);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMC(m_App, 1);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                    } else {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMC(m_App, 2);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();

            } else if (all_radbut.isSelected() && wofa_radbut.isSelected()) {
                Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                try {
                    Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMC(m_App, 0);
                    jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                     jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    if (alpha_radbut.isSelected()) {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMC(m_App, 0);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                    } else if (renewal_radbut.isSelected()) {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMC(m_App, 1);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                    } else {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMC(m_App, 2);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();

            } else if (Particular_radbut.isSelected() && allFa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymaj(m_App, header, 0);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        if (alpha_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymaj(m_App, header, 0);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymaj(m_App, header, 1);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        } else {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymaj(m_App, header, 2);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymajnSub(m_App, header, subsidiar, 0);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        if (alpha_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymajnSub(m_App, header, subsidiar, 0);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymajnSub(m_App, header, subsidiar, 1);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        } else {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymajnSub(m_App, header, subsidiar, 2);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }

            } else if (Particular_radbut.isSelected() && part.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();
                    header = elements.getSelectedItem().toString();
                    if (assetcombo1.getSelectedIndex() != -1 && assetcombo1.getSelectedItem() != null) {

                        try {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymaj(m_App, header, 0, asset);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                            if (alpha_radbut.isSelected()) {
                                Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymaj(m_App, header, 0, asset);
                                jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                                 jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                            } else if (renewal_radbut.isSelected()) {
                                Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymaj(m_App, header, 1, asset);
                                jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                            } else {
                                Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymaj(m_App, header, 2, asset);
                                jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                            }

                        } catch (BasicException ex) {
                            Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();

                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                        jTable1.setModel(new DefaultTableModel());
                        complete_rep.setVisible(false);
                    }
                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {
                    if (assetcombo1.getSelectedIndex() != -1 && assetcombo1.getSelectedItem() != null) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                        try {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymajnSub(m_App, header, subsidiar, 0, asset);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                            if (alpha_radbut.isSelected()) {
                                Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymajnSub(m_App, header, subsidiar, 0, asset);
                                jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                                 jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                            } else if (renewal_radbut.isSelected()) {
                                Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymajnSub(m_App, header, subsidiar, 1, asset);
                                jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                            } else {
                                Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymajnSub(m_App, header, subsidiar, 2, asset);
                                jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                            }

                        } catch (BasicException ex) {
                            Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);
                        jTable1.setModel(new DefaultTableModel());
                        complete_rep.setVisible(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }

            } else if (Particular_radbut.isSelected() && activefa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajcls(m_App, header, 0);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        if (alpha_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajcls(m_App, header, 0);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajcls(m_App, header, 1);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        } else {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajcls(m_App, header, 2);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajclssubcls(m_App, header, subsidiar, 0);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        if (alpha_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajclssubcls(m_App, header, subsidiar, 0);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajclssubcls(m_App, header, subsidiar, 1);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        } else {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajclssubcls(m_App, header, subsidiar, 2);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }

            } else if (Particular_radbut.isSelected() && wofa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajcls(m_App, header, 0);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        if (alpha_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajcls(m_App, header, 0);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajcls(m_App, header, 1);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        } else {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajcls(m_App, header, 2);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajclssubcls(m_App, header, subsidiar, 0);
                        jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                         jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        if (alpha_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajclssubcls(m_App, header, subsidiar, 0);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                             jTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                        } else if (renewal_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajclssubcls(m_App, header, subsidiar, 1);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        } else {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajclssubcls(m_App, header, subsidiar, 2);
                            jTable1.setModel(Non_AMC_Table_Model.getTableModel1());
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);
                    jTable1.setModel(new DefaultTableModel());
                    complete_rep.setVisible(false);
                }

            }

        } else {

            JOptionPane.showMessageDialog(this, "Select Asset type ... !! ", "Error", JOptionPane.ERROR_MESSAGE);
            jTable1.setModel(new DefaultTableModel());
            complete_rep.setVisible(false);
        }
    }//GEN-LAST:event_viewlist_butActionPerformed

    private void report_butActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report_butActionPerformed
        String asset;
         String perioddate;
         perioddate= ""+new Date();
        if (elements.getSelectedItem() != null) {
            header = elements.getSelectedItem().toString();

        } else {

            header = "ALL";

        }
        if (assetcombo1.getSelectedItem() != null) {
            asset = assetcombo1.getSelectedItem().toString();

        } else {

            asset = "ALL";

        }
        if (AMC_radbut.isSelected()) {
            if (all_radbut.isSelected() && allFa_radbut.isSelected()) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMC(m_App, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMC(m_App, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllAMC(m_App, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", perioddate);
                reportparams.put("TITLE", " AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else if (all_radbut.isSelected() && part.isSelected()) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                if (assetcombo1.getSelectedIndex() != -1 && assetcombo1.getSelectedItem() != null) {

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMC(m_App, 0, asset);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMC(m_App, 1, asset);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadforParticularFAAMC(m_App, 2, asset);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", " AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else if (Particular_radbut.isSelected() && allFa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 0);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 1);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", "AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 0);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 1);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", " AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                }

            } else if (Particular_radbut.isSelected() && part.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                    header = elements.getSelectedItem().toString();
                    if (assetcombo1.getSelectedIndex() != -1 && assetcombo1.getSelectedItem() != null) {

                        try {

                            if (alpha_radbut.isSelected()) {
                                AMC_Table_Model = ListOfAMCTable_model.LoadforPArtFAAMCbymaj(m_App, header, 0, asset);
                            } else if (renewal_radbut.isSelected()) {
                                AMC_Table_Model = ListOfAMCTable_model.LoadforPArtFAAMCbymaj(m_App, header, 1, asset);
                            } else {
                                AMC_Table_Model = ListOfAMCTable_model.LoadforPArtFAAMCbymaj(m_App, header, 2, asset);
                            }

                        } catch (BasicException ex) {
                            Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                        DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                        DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date",perioddate);
                        reportparams.put("TITLE", " AMC REPORT");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                    }
                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                    if (assetcombo1.getSelectedIndex() != -1 && assetcombo1.getSelectedItem() != null) {

                        try {

                            if (alpha_radbut.isSelected()) {
                                AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCbymajnSub(m_App, header, subsidiar, 0, asset);
                            } else if (renewal_radbut.isSelected()) {
                                AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCbymajnSub(m_App, header, subsidiar, 1, asset);
                            } else {
                                AMC_Table_Model = ListOfAMCTable_model.LoadforPartFAAMCbymajnSub(m_App, header, subsidiar, 2, asset);
                            }

                        } catch (BasicException ex) {
                            Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                        DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                        DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date",perioddate);
                        reportparams.put("TITLE", "AMC REPORT");
                        reportparams.put("SubHead", header);

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                }

            } else if (Particular_radbut.isSelected() && activefa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 0);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 1);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", "AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 0);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 1);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", "AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                }

            } else if (Particular_radbut.isSelected() && wofa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 0);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 1);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", "AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 0);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 1);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", "AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                }

            } else if (all_radbut.isSelected() && activefa_radbut.isSelected()) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMC(m_App, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMC(m_App, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMC(m_App, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", "AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else if (all_radbut.isSelected() && wofa_radbut.isSelected()) {
                AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                try {
                    if (alpha_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMC(m_App, 0);
                    } else if (renewal_radbut.isSelected()) {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMC(m_App, 1);
                    } else {
                        AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMC(m_App, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", "AMC REPORT");
                reportparams.put("SubHead", header);

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

            } else if (Particular_radbut.isSelected() && allFa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 0);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 1);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymaj(m_App, header, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", "AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 0);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 1);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllAMCbymajnSub(m_App, header, subsidiar, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", "AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                }

            } else if (Particular_radbut.isSelected() && activefa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 0);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 1);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajcls(m_App, header, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", "AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 0);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 1);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllActiveAMCbymajclssubcls(m_App, header, subsidiar, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", "AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                }

            } else if (Particular_radbut.isSelected() && wofa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 0);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 1);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajcls(m_App, header, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", "AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    AMC_info_List_all = new ArrayList<ListOfAMCTable_model.AMCInfo>();

                    try {
                        if (alpha_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 0);
                        } else if (renewal_radbut.isSelected()) {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 1);
                        } else {
                            AMC_Table_Model = ListOfAMCTable_model.LoadAllWoAMCbymajclssubcls(m_App, header, subsidiar, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    AMC_info_List_all = (List<ListOfAMCTable_model.AMCInfo>) AMC_Table_Model.getAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(AMC_info_List_all);
                    DataSourceForAMCDetail dsfc = new DataSourceForAMCDetail(AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", "AMC REPORT");
                    reportparams.put("SubHead", header);

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfAMCReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                }

            }

        } else if (nonamc_radbut.isSelected()) {

            if (elements.getSelectedItem() != null) {
                header = elements.getSelectedItem().toString();

            } else {

                header = "ALL";

            }

            if (all_radbut.isSelected() && allFa_radbut.isSelected()) {
                Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                try {
                    Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMC(m_App, 0);
                    /* if (alpha_radbut.isSelected()) {
                     Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMC(m_App, 0);
                     } else if (renewal_radbut.isSelected()) {
                     Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMC(m_App, 1);
                     } else {
                     Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMC(m_App, 2);
                     }*/

                } catch (BasicException ex) {
                    Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                DataSourceProvider data1 = new DataSourceProvider(Non_AMC_info_List_all);
                DataSourceForNonAMCReport dsfc = new DataSourceForNonAMCReport(Non_AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " Non-AMC REPORT");
                reportparams.put("SubHead", header);
                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfNonAMcReport.jrxml", reportparams, false, data1, true, null);

            } else if (all_radbut.isSelected() && part.isSelected()) {
                Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();
                if (assetcombo1.getSelectedIndex() != -1 && assetcombo1.getSelectedItem() != null) {
                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMC(m_App, 0, asset);
                        /* if (alpha_radbut.isSelected()) {
                         Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMC(m_App, 0, asset);
                         } else if (renewal_radbut.isSelected()) {
                         Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMC(m_App, 1, asset);
                         } else {
                         Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMC(m_App, 2, asset);
                         }*/

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(Non_AMC_info_List_all);
                    DataSourceForNonAMCReport dsfc = new DataSourceForNonAMCReport(Non_AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", " Non-AMC REPORT");
                    reportparams.put("SubHead", header);
                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfNonAMcReport.jrxml", reportparams, false, data1, true, null);
                } else {
                    JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                }
            } else if (all_radbut.isSelected() && activefa_radbut.isSelected()) {
                Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                try {
                    Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMC(m_App, 0);
                    if (alpha_radbut.isSelected()) {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMC(m_App, 0);
                    } else if (renewal_radbut.isSelected()) {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMC(m_App, 1);
                    } else {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMC(m_App, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                DataSourceProvider data1 = new DataSourceProvider(Non_AMC_info_List_all);
                DataSourceForNonAMCReport dsfc = new DataSourceForNonAMCReport(Non_AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " Non-AMC REPORT");
                reportparams.put("SubHead", header);
                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfNonAMcReport.jrxml", reportparams, false, data1, true, null);

            } else if (all_radbut.isSelected() && wofa_radbut.isSelected()) {
                Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                try {
                    Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMC(m_App, 0);
                    if (alpha_radbut.isSelected()) {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMC(m_App, 0);
                    } else if (renewal_radbut.isSelected()) {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMC(m_App, 1);
                    } else {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMC(m_App, 2);
                    }

                } catch (BasicException ex) {
                    Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                }
                Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                DataSourceProvider data1 = new DataSourceProvider(Non_AMC_info_List_all);
                DataSourceForNonAMCReport dsfc = new DataSourceForNonAMCReport(Non_AMC_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date",perioddate);
                reportparams.put("TITLE", " Non-AMC REPORT");
                reportparams.put("SubHead", header);
                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfNonAMcReport.jrxml", reportparams, false, data1, true, null);

            } else if (Particular_radbut.isSelected() && allFa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymaj(m_App, header, 0);
                        if (alpha_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymaj(m_App, header, 0);
                        } else if (renewal_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymaj(m_App, header, 1);
                        } else {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymaj(m_App, header, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(Non_AMC_info_List_all);
                    DataSourceForNonAMCReport dsfc = new DataSourceForNonAMCReport(Non_AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", " Non-AMC REPORT");
                    reportparams.put("SubHead", header);
                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfNonAMcReport.jrxml", reportparams, false, data1, true, null);

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymajnSub(m_App, header, subsidiar, 0);
                        if (alpha_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymajnSub(m_App, header, subsidiar, 0);
                        } else if (renewal_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymajnSub(m_App, header, subsidiar, 1);
                        } else {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllNonAMCbymajnSub(m_App, header, subsidiar, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(Non_AMC_info_List_all);
                    DataSourceForNonAMCReport dsfc = new DataSourceForNonAMCReport(Non_AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", " Non-AMC REPORT");
                    reportparams.put("SubHead", header);
                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfNonAMcReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                }

            } else if (Particular_radbut.isSelected() && part.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();
                    header = elements.getSelectedItem().toString();
                    if (assetcombo1.getSelectedIndex() != -1 && assetcombo1.getSelectedItem() != null) {

                        try {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymaj(m_App, header, 0, asset);
                            if (alpha_radbut.isSelected()) {
                                Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymaj(m_App, header, 0, asset);
                            } else if (renewal_radbut.isSelected()) {
                                Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymaj(m_App, header, 1, asset);
                            } else {
                                Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymaj(m_App, header, 2, asset);
                            }

                        } catch (BasicException ex) {
                            Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                        DataSourceProvider data1 = new DataSourceProvider(Non_AMC_info_List_all);
                        DataSourceForNonAMCReport dsfc = new DataSourceForNonAMCReport(Non_AMC_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date",perioddate);
                        reportparams.put("TITLE", " Non-AMC REPORT");
                        reportparams.put("SubHead", header);
                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfNonAMcReport.jrxml", reportparams, false, data1, true, null);
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                    }
                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {
                    if (assetcombo1.getSelectedIndex() != -1 && assetcombo1.getSelectedItem() != null) {

                        header = elements.getSelectedItem().toString();
                        subsidiar = mainheads.getSelectedItem().toString();

                        Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                        try {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymajnSub(m_App, header, subsidiar, 0, asset);
                            if (alpha_radbut.isSelected()) {
                                Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymajnSub(m_App, header, subsidiar, 0, asset);
                            } else if (renewal_radbut.isSelected()) {
                                Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymajnSub(m_App, header, subsidiar, 1, asset);
                            } else {
                                Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadforPartFANonAMCbymajnSub(m_App, header, subsidiar, 2, asset);
                            }

                        } catch (BasicException ex) {
                            Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                        DataSourceProvider data1 = new DataSourceProvider(Non_AMC_info_List_all);
                        DataSourceForNonAMCReport dsfc = new DataSourceForNonAMCReport(Non_AMC_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date",perioddate);
                        reportparams.put("TITLE", " Non-AMC REPORT");
                        reportparams.put("SubHead", header);
                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfNonAMcReport.jrxml", reportparams, false, data1, true, null);
                    } else {
                        JOptionPane.showMessageDialog(this, "Please select asset ", null, JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                }

            } else if (Particular_radbut.isSelected() && activefa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajcls(m_App, header, 0);
                        if (alpha_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajcls(m_App, header, 0);
                        } else if (renewal_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajcls(m_App, header, 1);
                        } else {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajcls(m_App, header, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(Non_AMC_info_List_all);
                    DataSourceForNonAMCReport dsfc = new DataSourceForNonAMCReport(Non_AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", " Non-AMC REPORT");
                    reportparams.put("SubHead", header);
                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfNonAMcReport.jrxml", reportparams, false, data1, true, null);

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajclssubcls(m_App, header, subsidiar, 0);
                        if (alpha_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajclssubcls(m_App, header, subsidiar, 0);
                        } else if (renewal_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajclssubcls(m_App, header, subsidiar, 1);
                        } else {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllActiveNonAMCbymajclssubcls(m_App, header, subsidiar, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(Non_AMC_info_List_all);
                    DataSourceForNonAMCReport dsfc = new DataSourceForNonAMCReport(Non_AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", " Non-AMC REPORT");
                    reportparams.put("SubHead", header);
                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfNonAMcReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                }

            } else if (Particular_radbut.isSelected() && wofa_radbut.isSelected()) {
                if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() == -1))) {
                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();
                    header = elements.getSelectedItem().toString();

                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajcls(m_App, header, 0);
                        if (alpha_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajcls(m_App, header, 0);
                        } else if (renewal_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajcls(m_App, header, 1);
                        } else {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajcls(m_App, header, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(Non_AMC_info_List_all);
                    DataSourceForNonAMCReport dsfc = new DataSourceForNonAMCReport(Non_AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date",perioddate);
                    reportparams.put("TITLE", " Non-AMC REPORT");
                    reportparams.put("SubHead", header);
                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfNonAMcReport.jrxml", reportparams, false, data1, true, null);

                } else if (elements.getSelectedItem() != null && elements.getSelectedIndex() != -1 && ((mainheads.getSelectedIndex() != -1))) {

                    header = elements.getSelectedItem().toString();
                    subsidiar = mainheads.getSelectedItem().toString();

                    Non_AMC_info_List_all = new ArrayList<ListOfAMCnNonAMCReportTableModel.NonamcInfo>();

                    try {
                        Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajclssubcls(m_App, header, subsidiar, 0);
                        if (alpha_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajclssubcls(m_App, header, subsidiar, 0);
                        } else if (renewal_radbut.isSelected()) {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajclssubcls(m_App, header, subsidiar, 1);
                        } else {
                            Non_AMC_Table_Model = ListOfAMCnNonAMCReportTableModel.LoadAllWoNonAMCbymajclssubcls(m_App, header, subsidiar, 2);
                        }

                    } catch (BasicException ex) {
                        Logger.getLogger(ReportOfAMCnNonAMCAssets.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Non_AMC_info_List_all = (List<ListOfAMCnNonAMCReportTableModel.NonamcInfo>) Non_AMC_Table_Model.getNonAMCList();
                    DataSourceProvider data1 = new DataSourceProvider(Non_AMC_info_List_all);
                    DataSourceForNonAMCReport dsfc = new DataSourceForNonAMCReport(Non_AMC_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", perioddate);
                    reportparams.put("TITLE", " Non-AMC REPORT");
                    reportparams.put("SubHead", header);
                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/ListOfNonAMcReport.jrxml", reportparams, false, data1, true, null);

                } else {
                    JOptionPane.showMessageDialog(this, "Please select account type", null, JOptionPane.OK_OPTION);

                }

            }

        } else {

            JOptionPane.showMessageDialog(this, "Select Asset type ... !! ", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_report_butActionPerformed

    private void mainheadsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mainheadsItemStateChanged

    }//GEN-LAST:event_mainheadsItemStateChanged

    private void Particular_radbutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Particular_radbutItemStateChanged
        if (Particular_radbut.isSelected()) {
            subhead_panel.setVisible(true);
            subsidiary_panel.setVisible(true);

        } else {
            subhead_panel.setVisible(false);
            subsidiary_panel.setVisible(false);

        }
    }//GEN-LAST:event_Particular_radbutItemStateChanged

    private void all_radbutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_all_radbutItemStateChanged
        if (all_radbut.isSelected()) {
            subhead_panel.setVisible(false);
            subsidiary_panel.setVisible(false);
            elements.setSelectedIndex(-1);
            mainheads.setSelectedIndex(-1);
        }
    }//GEN-LAST:event_all_radbutItemStateChanged

    private void nonamc_radbutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nonamc_radbutItemStateChanged
        jLabel8.setVisible(false);
        alpha_radbut.setVisible(false);
        renewal_radbut.setVisible(false);
        dateofamc_radbut.setVisible(false);
        complete_rep.setVisible(false);
        jTable1.setModel(new DefaultTableModel());
    }//GEN-LAST:event_nonamc_radbutItemStateChanged

    private void AMC_radbutItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_AMC_radbutItemStateChanged
        jLabel8.setVisible(true);
        alpha_radbut.setVisible(true);
        renewal_radbut.setVisible(true);
        dateofamc_radbut.setVisible(true);
        jTable1.setModel(new DefaultTableModel());
    }//GEN-LAST:event_AMC_radbutItemStateChanged

    private void complete_repMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_complete_repMouseClicked
       if(jTable1.getSelectedRow()!=-1){
           
       complete_rep.setVisible(true);
       
       }else{
        JOptionPane.showMessageDialog(this, "select table row ", null, JOptionPane.WARNING_MESSAGE);

       }
    }//GEN-LAST:event_complete_repMouseClicked

    private void complete_repItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_complete_repItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_complete_repItemStateChanged
    private class ItemsListModel extends AbstractListModel {

        private java.util.List items;

        public ItemsListModel(java.util.List items) {
            this.items = items;
        }

        public int getSize() {
            return items.size();
        }

        public Object getElementAt(int i) {
            return items.get(i);
        }
    }

    @Override
    public String getTitle() {
        return AppLocal.getIntString("List Of AMC And NonAMC");
    }

    @Override
    public void activate() throws BasicException {

        loaddata();
        ButtonGrp();
        jTable1.setVisible(false);

    }

    @Override
    public boolean deactivate() {
        return true;
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public void init(AppView app) throws BeanFactoryException {
        m_App = app;
        dmang = (DataLogicFacilities) m_App.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");

    }

    @Override
    public Object getBean() {
        return this;
    }

    public void loaddata() throws BasicException {
        combo_panel1.setVisible(false);
        elementsModel = new ComboBoxValModel(dmang.getaccountElements());
        elements.setModel(elementsModel);
        complete_rep.setVisible(false);
        assetListModel = new ComboBoxValModel(getAssetList());
        assetcombo1.setModel(assetListModel);
    }

    public void ButtonGrp() {

        ButtonGroup bg1 = new ButtonGroup();
        bg1.add(AMC_radbut);
        bg1.add(nonamc_radbut);

        ButtonGroup bg2 = new ButtonGroup();
        bg2.add(allFa_radbut);
        bg2.add(activefa_radbut);
        bg2.add(wofa_radbut);
        bg2.add(part);

        ButtonGroup bg3 = new ButtonGroup();
        bg3.add(all_radbut);
        bg3.add(Particular_radbut);

        ButtonGroup bg4 = new ButtonGroup();
        bg4.add(alpha_radbut);
        bg4.add(dateofamc_radbut);
        bg4.add(renewal_radbut);

    }

    public List getAssetList() throws BasicException {
        List<Object> assetList = new ArrayList<Object>();
        assetList = (List<Object>) new StaticSentence(m_App.getSession(), "select name from fa_master where active=true order by name ", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).list();

        return assetList;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton AMC_radbut;
    private javax.swing.JRadioButton Particular_radbut;
    private javax.swing.JLabel Startdate;
    private javax.swing.JLabel account;
    private javax.swing.JRadioButton activefa_radbut;
    private javax.swing.JRadioButton allFa_radbut;
    private javax.swing.JRadioButton all_radbut;
    private javax.swing.JRadioButton alpha_radbut;
    private javax.swing.JLabel amount;
    private javax.swing.JLabel appdate;
    private javax.swing.JLabel apprby;
    private javax.swing.JComboBox assetcombo1;
    private javax.swing.JLabel assetlabel;
    private javax.swing.JButton back_but;
    private javax.swing.JPanel combo_panel1;
    private javax.swing.JButton complete_rep;
    private javax.swing.JLabel contractor;
    private javax.swing.JLabel crdtd_by;
    private javax.swing.JLabel crdtd_date;
    private javax.swing.JRadioButton dateofamc_radbut;
    private javax.swing.JComboBox elements;
    private javax.swing.JLabel enddate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox mainheads;
    private javax.swing.JRadioButton nonamc_radbut;
    private javax.swing.JRadioButton part;
    private javax.swing.JLabel particular;
    private javax.swing.JLabel period;
    private javax.swing.JLabel rate;
    private javax.swing.JLabel remark;
    private javax.swing.JRadioButton renewal_radbut;
    private javax.swing.JLabel renewaldate;
    private javax.swing.JButton report_but;
    private javax.swing.JPanel subhead_panel;
    private javax.swing.JPanel subsidiary_panel;
    private javax.swing.JButton viewlist_but;
    private javax.swing.JRadioButton wofa_radbut;
    // End of variables declaration//GEN-END:variables
}
