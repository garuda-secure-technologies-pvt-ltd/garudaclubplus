/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.openbravo.pos.Library;

import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.PreparedSentence;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerReadClass;
import com.openbravo.data.loader.SerializerReadInteger;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.format.Formats;
import com.openbravo.pos.Library.Lib_MemTypeTableModel.lib_catgline;
import com.openbravo.pos.Library.Lib_MemTypeTableModel.lib_catgry;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.clubmang.FacilityApprovalRitesModel;
import com.openbravo.pos.clubmang.FacilityApprovalRitesModel.AllUsersLine;
import com.openbravo.pos.clubmang.MemCat;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dev1
 */
public class Lib_MemTypIssueRule extends javax.swing.JPanel implements JPanelView,BeanFactoryApp{
    private AppView m_App;
    private DataLogicFacilities dlfac;
    private AllUsersListModel aumodel;
    private AllUsersListModel cfmodel;
    private List list=new ArrayList();
    private List l1= new ArrayList();
    private Lib_MemTypeTableModel amodel;
    private ComboBoxValModel catmodel;
    private Object[] memobj;
    private String[] obj;
    private List mlist;
    private List l;
    private List lcatlist;
    private List<Object> mlist_id;
    private String[] memarry;
    private List<Object> memlist;
    private List templist;
    private AllUsersListModel ctmodel;
    private List<Object> catid_list;
    private List cat_nor=new ArrayList();
    private int issue_flag;
    private String a_id;
    private List<Object> editlist;
    private List<Object> cat_list;
    private List<MemCat> allist;
    private String deact_id;
    /** Creates new form Lib_MemTypIssueRule */
    public Lib_MemTypIssueRule() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jList2);

        jButton2.setText("Remove");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Group MemType");
        jRadioButton2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton2ItemStateChanged(evt);
            }
        });
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("All");
        jRadioButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton1ItemStateChanged(evt);
            }
        });

        jLabel1.setText("MemberShip Type :");

        jLabel3.setText("Maximum Nor. of  books to be issued :");

        jLabel4.setText("Allow Issue of books if any OverDues :");

        buttonGroup2.add(jRadioButton4);
        jRadioButton4.setText("No");

        buttonGroup2.add(jRadioButton3);
        jRadioButton3.setText("Yes");

        jLabel2.setText("Select Category :");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(jList3);

        jButton3.setText("add ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("remove");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setText("Nor. of Books  :");

        jButton5.setText("Save");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("savechanges");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel5.setText("List of Categories with Nor. of books :");

        jButton7.setText("cancel");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel4)
                                .add(18, 18, 18)
                                .add(jRadioButton4)
                                .add(18, 18, 18)
                                .add(jRadioButton3))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel3)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jButton5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton7)
                        .add(16, 16, 16))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(jLabel2)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 261, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(jLabel1)
                                        .add(18, 18, 18)
                                        .add(jRadioButton1)
                                        .add(18, 18, 18)
                                        .add(jRadioButton2))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(90, 90, 90)
                                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 212, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18)
                                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(jButton2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                                            .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .add(18, 18, 18)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(jLabel6)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 221, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jLabel5)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 292, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jButton4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(124, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jRadioButton1)
                    .add(jRadioButton2))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jButton2))
                    .add(jScrollPane2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 14, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jRadioButton4)
                    .add(jRadioButton3))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6)
                    .add(jButton3)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jButton5)
                            .add(jButton6)
                            .add(jButton7))
                        .addContainerGap())
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(27, 27, 27)
                        .add(jLabel5)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 153, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(73, 73, 73)
                                .add(jButton4)))
                        .addContainerGap(55, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Create New", jPanel1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(jTable2);

        jButton8.setText("Edit");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Deactivate");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jButton8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(86, 86, 86))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 299, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(88, 88, 88)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton8)
                    .add(jButton9))
                .addContainerGap(165, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ListView", jPanel2);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(jComboBox1.getSelectedIndex()!=-1){
            if( jTextField1.getText().length()>0){
                try {
                    String catname=jComboBox1.getSelectedItem().toString();
                    String norbooks=jTextField1.getText();
                    String catnumb=catname+"        :       "+norbooks;
                    
                    if(!templist.contains(catnumb)){
                        
                    
                    templist.add(catnumb.toString());
                    ctmodel=new AllUsersListModel(templist);
                    jList3.setModel(ctmodel);
                    catid_list  = (List<Object>) new StaticSentence(m_App.getSession(), "SELECT id FROM lib_categories where name=? and active=true ",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list(catname);
                    cat_nor.add(catid_list.get(0).toString()+":"+norbooks);
                    }
                    jComboBox1.setSelectedIndex(-1);
                    
                    
                } catch (BasicException ex) {
                    Logger.getLogger(Lib_MemTypIssueRule.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                JOptionPane.showMessageDialog(this, "please enter nor of books");
            }
        }else{
            JOptionPane.showMessageDialog(this, "please select the Category");
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int row = jList3.getSelectedIndex();
        if(row>=0){
            String remv=jList3.getSelectedValue().toString();
            if(templist.contains(remv)){
            templist.remove(remv);
            ctmodel=new AllUsersListModel(templist);
            jList3.setModel(ctmodel);
            cat_nor.remove(row);
            }
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int row=jList1.getSelectedIndex();
        if(row>0){
            MemCat Memtyp=new MemCat();
               Memtyp =(MemCat) aumodel.getElementAt(row);
                String memtypid=Memtyp.getID();
                l1.clear();
                //String memname=Memtyp.getMemberCategory();
                if(!l1.contains(memtypid)){ 
                l1.add(memtypid);
                }
                 //for(int i=0;i<l1.size();i++){
               //List lst=(List)new StaticSentence(m_App.getSession(), "SELECT name FROM memtype  WHERE id=? ",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list(memtypid);
                 //}
                if(!l.contains(Memtyp)){
                l.add(Memtyp);
                mlist.remove(Memtyp);
                }
                cfmodel=new AllUsersListModel(l);
                jList2.setModel(cfmodel);
                jList1.clearSelection();
              aumodel=new AllUsersListModel(mlist);
                jList1.setModel(aumodel);
            
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int row=jList2.getSelectedIndex();
            if(row>=0){
            
                MemCat Memtyp=new MemCat();
               Memtyp =(MemCat) cfmodel.getElementAt(row);
               String memtypid=Memtyp.getID();
                if(l.contains(Memtyp)){ 
                l.remove(Memtyp);
                l1.remove(memtypid);
                } 
               //l1.remove(row);
                 //for(int i=0;i<l1.size();i++){
               //List lst=(List)new StaticSentence(m_App.getSession(), "SELECT name FROM memtype  WHERE id=? ",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list(memtypid);
                 //}
               
                mlist.add(Memtyp);
                
               
                //list.remove(row);
                cfmodel=new AllUsersListModel(l);
                jList2.setModel(cfmodel);
                jList2.clearSelection();
             aumodel=new AllUsersListModel(mlist);
                jList1.setModel(aumodel);
            
            }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String memtype ="";
        String catgtype = "";
        String maxbooks;
        try {
        int count=Integer.valueOf(new StaticSentence(m_App.getSession()
                    , "SELECT COUNT(*) FROM lib_memtypeissuerules WHERE memtype=? AND ACTIVE=TRUE"
                    ,SerializerWriteString.INSTANCE
                    ,SerializerReadInteger.INSTANCE).find("All").toString()); 
        
        if(jTextField2.getText()!=null && !jTextField2.equals("")){
            if(cat_nor.size()>0){
                
                    if(jRadioButton1.isSelected()){
                        
                        memtype="All";
                        
                    }else if(jRadioButton2.isSelected()){
                        for(int i=0;i<l1.size();i++){
                            memtype=memtype+l1.get(i).toString()+"#";
                        }
                    }else{
                        JOptionPane.showMessageDialog(this, "please select the MemberShip Type");
                    }
                    maxbooks=jTextField2.getText();
                    if(jRadioButton3.isSelected()){
                        issue_flag=1;
                    }else if(jRadioButton4.isSelected()){
                        issue_flag=0;
                    }else{
                        JOptionPane.showMessageDialog(this, "please select yes OR no for Allow issues of books");
                    }
                    for(int j=0;j<cat_nor.size();j++){
                        catgtype=catgtype+cat_nor.get(j).toString()+"#";
                    }
                    if(memtype.equals("All") && count==0){
                        
                    
                    Object[] param=new Object[]{UUID.randomUUID().toString(),memtype,Integer.parseInt(maxbooks),issue_flag,catgtype,m_App.getAppUserView().getUser().getName(),new Date(),m_App.getProperties().getHost(),true};
                    new PreparedSentence(m_App.getSession()
                            , "INSERT INTO lib_memtypeissuerules (ID,memtype,max_books,issue_flag,catg_nrbooks,CREATEDBY,CREATEDATE,CREATEDHOST,ACTIVE) VALUES (?,?,?,?,?,?,?,?,?)"
                            , new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.INT,Datas.INT,Datas.STRING,Datas.STRING,Datas.TIMESTAMP,Datas.STRING,Datas.BOOLEAN})).exec(param);  
                    
                    JOptionPane.showMessageDialog(this, "Inserted Successfully..!", "Success", JOptionPane.INFORMATION_MESSAGE);
            }else if(!memtype.equals("All")){
                Object[] param=new Object[]{UUID.randomUUID().toString(),memtype,Integer.parseInt(maxbooks),issue_flag,catgtype,m_App.getAppUserView().getUser().getName(),new Date(),m_App.getProperties().getHost(),true};
                    new PreparedSentence(m_App.getSession()
                            , "INSERT INTO lib_memtypeissuerules (ID,memtype,max_books,issue_flag,catg_nrbooks,CREATEDBY,CREATEDATE,CREATEDHOST,ACTIVE) VALUES (?,?,?,?,?,?,?,?,?)"
                            , new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.INT,Datas.INT,Datas.STRING,Datas.STRING,Datas.TIMESTAMP,Datas.STRING,Datas.BOOLEAN})).exec(param);  
                    
                    JOptionPane.showMessageDialog(this, "Inserted Successfully..!", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
                    else{
                JOptionPane.showMessageDialog(this, "For memtype ALL is already exist", null, JOptionPane.OK_OPTION);
                
            }
                amodel = Lib_MemTypeTableModel.loadInstance(m_App);
                jTable2.setModel(amodel.getTableModel());
                reset();
                l.clear();
                cat_nor.clear();
                cfmodel=new AllUsersListModel(l);
                jList2.setModel(cfmodel);
                templist.clear();
                ctmodel=new AllUsersListModel(templist);
                jList3.setModel(ctmodel);
                jButton6.setVisible(false);
                jButton5.setVisible(true);
                
        
        }else{
            JOptionPane.showMessageDialog(this, "please select some categories and nor of books");
        }
            }else{
            JOptionPane.showMessageDialog(this, "please enter max nor of books");
        }
        
        } catch (BasicException ex) {
                    Logger.getLogger(Lib_MemTypIssueRule.class.getName()).log(Level.SEVERE, null, ex);
                }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        
        
        if(jTable2.getSelectedRow()!=-1){
            int pub = JOptionPane.showConfirmDialog(jPanel1, " Do you want to Edit Data ?? " , "Editing Menu" , JOptionPane.YES_NO_OPTION);
            if(pub == JOptionPane.YES_OPTION){
                if(jTable2.getSelectedRow()<amodel.getSize()){
                    int row = jTable2.getSelectedRow();
                    if (Boolean.valueOf(jTable2.getModel().getValueAt(row, 5).toString())) {
                    lib_catgry data = amodel.getList().get(row);
                    l.clear();
                    cat_nor.clear();
                    l1.clear();
                cfmodel=new AllUsersListModel(l);
                jList2.setModel(cfmodel);
                templist.clear();
                ctmodel=new AllUsersListModel(templist);
                jList3.setModel(ctmodel);
                    jButton6.setVisible(true);
                    jButton5.setVisible(false);
                    a_id=data.getId();
                    String memty=data.getMemtype();
                    int max=data.getMax_books();
                    String catg=data.getCatg_books();
                    int issue=data.getIssue_flag();
                    
                    jTextField2.setText(String.valueOf(max));
                    if(issue==1){
                        jRadioButton3.setSelected(true);
                    }else{
                        jRadioButton4.setSelected(true);
                    }
                    if(!catg.equals("")){
                        String[] numbarry;
                        String[] carry=catg.split("#");
                        for(int j=0;j<carry.length;j++){
                            numbarry=carry[j].split(":");
                            for(int k=0;k<numbarry.length;k++){
                                try { 
                                    cat_list  = (List<Object>) new StaticSentence(m_App.getSession(), "SELECT name FROM lib_categories where id=? and active=true ",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list(numbarry[k]);
                                    String temp=cat_list.get(k).toString()+"        :       "+numbarry[k+1];
                                    if(!templist.contains(temp)){
                                        templist.add(temp);
                                    }
                                    if(!cat_nor.contains(carry[j])){
                                    cat_nor.add(carry[j]);
                                    }
                                } catch (BasicException ex) {
                                    Logger.getLogger(Lib_MemTypIssueRule.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                k=k+1;
                            }
                        }
                        ctmodel=new AllUsersListModel(templist);
                        jList3.setModel(ctmodel);
                    }
                    if(memty.equals("All")){
                        jRadioButton1.setSelected(true);
                    }else{
                        String[] ary= memty.split("#");
                        jRadioButton2.setSelected(true);
                        for(int i=0;i<ary.length;i++){
                            try {
                                
                                MemCat Memtyp=new MemCat();
                                List<MemCat> editlist =  (List<MemCat>) new StaticSentence(m_App.getSession(), "SELECT name FROM memtype where id=? ",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list(ary[i]);
                                //List<MemCat> editlistid =  (List<MemCat>) new StaticSentence(m_App.getSession(), "SELECT id FROM memtype where name=? ",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list(ary[i]); 
                                for(int j=0;j<allist.size();j++){
                            String temp=allist.get(j).toString();
              
                        if(temp.equals(editlist.get(0))){
                            if(!l.contains(allist.get(j))){
                            l.add(allist.get(j));
                            }
                            if(!l1.contains(ary[i])){
                            l1.add(ary[i]);
                            }
                        }
                            }                     

                                //l.add(editlist.get(i));
                            } catch (BasicException ex) {
                                Logger.getLogger(Lib_MemTypIssueRule.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        cfmodel=new AllUsersListModel(l);
                                jList2.setModel(cfmodel);
                                
                    }
                    jTabbedPane1.setSelectedIndex(0);
                    }else {
                    JOptionPane.showMessageDialog(this, "selected Category is deactivated.cannot edit it");
                }
                }
            }
    }//GEN-LAST:event_jButton8ActionPerformed
    }
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
    String memtype ="";
        String catgtype = "";
        String maxbooks;
        try {
            int count=Integer.valueOf(new StaticSentence(m_App.getSession()
                    , "SELECT COUNT(*) FROM lib_memtypeissuerules WHERE memtype=? AND ACTIVE=TRUE"
                    ,SerializerWriteString.INSTANCE
                    ,SerializerReadInteger.INSTANCE).find("All").toString()); 
    if(jTextField2.getText()!=null && !jTextField2.equals("")){
            if(templist.size()>0){
                
                    
                    if(jRadioButton1.isSelected()){
                        memtype="All";
                        
                    }else if(jRadioButton2.isSelected()){
                        for(int i=0;i<l1.size();i++){
                            memtype=memtype+l1.get(i).toString()+"#";
                        }
                    }else{
                        JOptionPane.showMessageDialog(this, "please select the MemberShip Type");
                    }
                    maxbooks=jTextField2.getText();
                    if(jRadioButton3.isSelected()){
                        issue_flag=1;
                    }else if(jRadioButton4.isSelected()){
                        issue_flag=0;
                    }else{
                        JOptionPane.showMessageDialog(this, "please select yes OR no for Allow issues of books");
                    }
                    for(int j=0;j<cat_nor.size();j++){
                        catgtype=catgtype+cat_nor.get(j).toString()+"#";
                    }
                    if(memtype.equals("All")){
                    Object[] param=new Object[]{Integer.parseInt(maxbooks),issue_flag,catgtype,m_App.getAppUserView().getUser().getName(),new Date(),m_App.getProperties().getHost(),true,a_id,memtype};
                    new PreparedSentence(m_App.getSession()
                            , "UPDATE lib_memtypeissuerules set max_books=?,issue_flag=?,catg_nrbooks=?,CREATEDBY=?,CREATEDATE=?,CREATEDHOST=?,ACTIVE=? where id=? and memtype=?"
                            , new SerializerWriteBasic(new Datas[]{Datas.INT,Datas.INT,Datas.STRING,Datas.STRING,Datas.TIMESTAMP,Datas.STRING,Datas.BOOLEAN,Datas.STRING,Datas.STRING})).exec(param);  
                    
                    JOptionPane.showMessageDialog(this, "Updated Successfully..!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else if(!memtype.equals("All")){
                Object[] param=new Object[]{memtype,Integer.parseInt(maxbooks),issue_flag,catgtype,m_App.getAppUserView().getUser().getName(),new Date(),m_App.getProperties().getHost(),true,a_id};
                    new PreparedSentence(m_App.getSession()
                            , "UPDATE lib_memtypeissuerules set memtype=?,max_books=?,issue_flag=?,catg_nrbooks=?,CREATEDBY=?,CREATEDATE=?,CREATEDHOST=?,ACTIVE=? where id=?"
                            , new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.INT,Datas.INT,Datas.STRING,Datas.STRING,Datas.TIMESTAMP,Datas.STRING,Datas.BOOLEAN,Datas.STRING})).exec(param);  
                    
                    JOptionPane.showMessageDialog(this, "Updated Successfully..!", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
                    else{
                JOptionPane.showMessageDialog(this, "For memtype ALL is already exist", null, JOptionPane.OK_OPTION);
                
            }
                amodel = Lib_MemTypeTableModel.loadInstance(m_App);
                jTable2.setModel(amodel.getTableModel());
                reset();
                l.clear();
                cat_nor.clear();
                cfmodel=new AllUsersListModel(l);
                jList2.setModel(cfmodel);
                templist.clear();
                ctmodel=new AllUsersListModel(templist);
                jList3.setModel(ctmodel);
                jButton6.setVisible(false);
                jButton5.setVisible(true);
                
        
        }else{
            JOptionPane.showMessageDialog(this, "please select some categories and nor of books");
        }
            }else{
            JOptionPane.showMessageDialog(this, "please enter max nor of books");
        }
        } catch (BasicException ex) {
                    Logger.getLogger(Lib_MemTypIssueRule.class.getName()).log(Level.SEVERE, null, ex);
                }
    
    
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jRadioButton2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton2ItemStateChanged
        if(jRadioButton2.isSelected()){
            jList1.setVisible(true);
            jList2.setVisible(true);
            jButton1.setVisible(true);
            jButton2.setVisible(true);
            jScrollPane1.setVisible(true);
            jScrollPane2.setVisible(true);
        }else{
            jList1.setVisible(false);
            jList2.setVisible(false);
            jButton1.setVisible(false);
            jButton2.setVisible(false);
            jScrollPane1.setVisible(false);
            jScrollPane2.setVisible(false);
        }
        
    }//GEN-LAST:event_jRadioButton2ItemStateChanged

    private void jRadioButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton1ItemStateChanged
        
        if(jRadioButton1.isSelected()){
            jList1.setVisible(false);
            jList2.setVisible(false);
            jButton1.setVisible(false);
            jButton2.setVisible(false);
            jScrollPane1.setVisible(false);
            jScrollPane2.setVisible(false);
        }else{
            jList1.setVisible(true);
            jList2.setVisible(true);
            jButton1.setVisible(true);
            jButton2.setVisible(true);
            jScrollPane1.setVisible(true);
            jScrollPane2.setVisible(true);
        }
        
    }//GEN-LAST:event_jRadioButton1ItemStateChanged

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        reset();
                l.clear();
                cfmodel=new AllUsersListModel(l);
                jList2.setModel(cfmodel);
                templist.clear();
                ctmodel=new AllUsersListModel(templist);
                jList3.setModel(ctmodel);
                jButton6.setVisible(false);
                jButton5.setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
       
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        
        if(jTable2.getSelectedRow()!=-1){
            int pub = JOptionPane.showConfirmDialog(jPanel1, " Do you want to Edit Data ?? " , "Editing Menu" , JOptionPane.YES_NO_OPTION);
            if(pub == JOptionPane.YES_OPTION){
                if(jTable2.getSelectedRow()<amodel.getSize()){
                    int row = jTable2.getSelectedRow();
                    if (Boolean.valueOf(jTable2.getModel().getValueAt(row, 5).toString())) {
                        try {
                            String newautId = UUID.randomUUID().toString();
                            lib_catgry data = amodel.getList().get(row);
                            deact_id=data.getId();
                            new PreparedSentence(m_App.getSession(), "UPDATE lib_memtypeissuerules  SET ID=?, ACTIVE=0  , DEACTBY=? , DEACTDATE=? , DEACTHOST=?,DEACTREFERENCE=?  WHERE ID = ? AND DEACTBY IS NULL AND DEACTDATE IS NULL"
                                    , new SerializerWriteBasic(new Datas[]{ Datas.STRING,Datas.STRING , Datas.TIMESTAMP , Datas.STRING , Datas.STRING , Datas.STRING})).exec
                                                                                    (new Object[]{ newautId,  m_App.getAppUserView().getUser().getName() ,new Date(), m_App.getProperties().getHost(),deact_id , deact_id  });
                        
                        JOptionPane.showMessageDialog(this, "deactivated Successfully..!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        amodel = Lib_MemTypeTableModel.loadInstance(m_App);
                        jTable2.setModel(amodel.getTableModel());
                        activate();
                        } catch (BasicException ex) {
                            Logger.getLogger(Lib_MemTypIssueRule.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }else {
                    JOptionPane.showMessageDialog(this, "selected Author is already deactivated.");
                }
                }
            }
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed
    
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return "MemType IssueRules";
    }

    @Override
    public void activate() throws BasicException {
       mlist_id =  (List<Object>) new StaticSentence(m_App.getSession(), "SELECT memtype FROM lib_memtypeissuerules WHERE active=1",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list();
       mlist = dlfac.getMemberCategory();
       allist = dlfac.getMemberCategory();
       aumodel=new AllUsersListModel(mlist);
       
       if(mlist_id!=null ){
           if(mlist_id.contains("All")){
               mlist_id.remove("All");
           }
           for(int i=0;i<mlist_id.size();i++){
            memarry  = mlist_id.get(i).toString().split("#");
            for(int k=0;k<memarry.length;k++){
            memlist=(List<Object>) new StaticSentence(m_App.getSession(), "SELECT NAME FROM MEMTYPE WHERE id=?",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list(memarry[k]);
           for(int j=0;j<mlist.size();j++){
              String temp=mlist.get(j).toString();
              //templist.add(temp);
           
            if(temp.equals(memlist.get(0))){
               aumodel.remove(j);
               break;
//new StaticSentence(m_App.getSession(), "SELECT NAME FROM MEMTYPE WHERE id=?", null, new SerializerReadClass(MemCat.class)).list();
           }
           }
            }
           }
       } 
       //mlist = dlfac.getMemberCategory();
      //aumodel=new AllUsersListModel(mlist);
        jList1.setModel(aumodel);
         l= dlfac.getMemberCategory();
        l.clear();
        cfmodel=new AllUsersListModel(l);
        jList2.setModel(cfmodel);
        catmodel=new ComboBoxValModel(getcatname());
       jComboBox1.setModel(catmodel);
       //loaddata(); 
       templist= dlfac.getMemberCategory();
       templist.clear();
        ctmodel=new AllUsersListModel(templist);
        jList3.setModel(ctmodel);
       //jRadioButton1.setSelected(true);
       jButton6.setVisible(false);
       //notedit();
       amodel = Lib_MemTypeTableModel.loadInstance(m_App);
       jTable2.setModel(amodel.getTableModel());
      reset();
            
    }

    @Override
    public boolean deactivate() {
        return true;
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public void init(AppView app) throws BeanFactoryException {
        m_App=app;
        dlfac=(DataLogicFacilities) m_App.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");
    }

    @Override
    public Object getBean() {
        return this;
    }

    public void reset(){
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(true);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(true);
        jTextField2.setText(null);
        jTabbedPane1.setSelectedIndex(0);
        
    }
    public List getcatname() throws BasicException{
          List<Object> catg_list = new ArrayList<Object>();
           catg_list  = (List<Object>) new StaticSentence(m_App.getSession(), "SELECT c.name FROM lib_categories c WHERE c.active=1 ORDER by c.name",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list();
          
          return catg_list;
      }
private class AllUsersListModel extends AbstractListModel {
        private java.util.List<FacilityApprovalRitesModel.AllUsersLine> ulist;
        public AllUsersListModel(java.util.List<FacilityApprovalRitesModel.AllUsersLine> ulist) {
            this.ulist = ulist;
        }
        public int getSize() {
            return ulist.size();
        }
        public Object getElementAt(int i) {
            return ulist.get(i);
        }
        public void remove(int i){
             ulist.remove(i);
        }

    }
}
