/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.Library;

import com.openbravo.pos.Library.DataSourceForIssueReturnReport;
import com.openbravo.pos.customers.CustomerInfo;
import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.gui.MessageInf;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.clubmang.DataSourceProvider;
import com.openbravo.pos.clubmang.JasperReportNew;

import com.openbravo.pos.customers.DataLogicCustomers;
import com.openbravo.pos.customers.JCustomerFinder;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.DataLogicSales;
import com.openbravo.pos.forms.JPanelView;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JasperPrint;
import com.openbravo.pos.Library.IssueReturnReportTableModel;

import java.awt.Component;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Window;
import javax.swing.AbstractListModel;
import javax.swing.JFrame;

/**
 *
 * @author vinuta
 */
public class IssueReturn_Report extends javax.swing.JPanel implements JPanelView, BeanFactoryApp {

    private AppView m_App;
    private DataLogicCustomers dlCustomers;
    private CustomerInfo customerInfo;
    //  private CustomerInfoExt customer;
    private DataLogicFacilities dmang;
    private String Contact;
    private List<String> bookList = new ArrayList<String>();
    private ComboBoxValModel bookListModel;
    private IssueReturnReportTableModel issuebook_Table_Model;
    private List<IssueReturnReportTableModel.IssueReturnBook> issuebook_info_List_all;
    private String ReportHeader;

    /**
     * Creates new form IssueReturn_Report
     */
    private int slno;
    private String cname;
    private String memidno;
    private String bname;
    private Date issue_date;
    private Date to_be_rtn_dt;
    private Date return_date;
    private double duecharge;
    private String d_type;
    private int nor_days;
    private int nor_fine;

    public IssueReturn_Report(AppView m_App, String cname, String memidno, String bname, Date issue_date, Date to_be_rtn_date, Date return_date, Double duecharge, String d_type, int nor_days, int nor_fine) {

        this.cname = cname;
        this.memidno = memidno;
        this.bname = bname;
        this.issue_date = issue_date;
        this.to_be_rtn_dt = to_be_rtn_date;
        this.return_date = return_date;
        this.duecharge = duecharge;
        this.d_type = d_type;
        this.nor_days = nor_days;
        this.nor_fine = nor_fine;

    }

    public IssueReturn_Report() {
        initComponents();
        jPanel1.setVisible(true);
        allbook_radio.setSelected(true);
        ForAll_Radio.setSelected(true);

    }

    protected static Window getWindow(Component parent) {
        if (parent == null) {
            return new JFrame();
        } else if (parent instanceof Frame || parent instanceof Dialog) {
            return (Window) parent;
        } else {
            return getWindow(parent.getParent());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bookpanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        memberpanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        memid = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        memname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ForAll_Radio = new javax.swing.JRadioButton();
        individual_radio = new javax.swing.JRadioButton();
        report = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        allbook_radio = new javax.swing.JRadioButton();
        singlebook_radio = new javax.swing.JRadioButton();
        reset = new javax.swing.JButton();
        viewlist = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        custradio = new javax.swing.JRadioButton();
        bookradio = new javax.swing.JRadioButton();
        memid_radio = new javax.swing.JRadioButton();
        issuedateradio = new javax.swing.JRadioButton();
        pending = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        originalbookpanel = new javax.swing.JPanel();
        book = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();

        javax.swing.GroupLayout bookpanelLayout = new javax.swing.GroupLayout(bookpanel);
        bookpanel.setLayout(bookpanelLayout);
        bookpanelLayout.setHorizontalGroup(
            bookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 105, Short.MAX_VALUE)
        );
        bookpanelLayout.setVerticalGroup(
            bookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 101, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/kuser.png")));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Member Id");

        memid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                memidKeyPressed(evt);
            }
        });

        jLabel6.setText("Member Name");

        javax.swing.GroupLayout memberpanelLayout = new javax.swing.GroupLayout(memberpanel);
        memberpanel.setLayout(memberpanelLayout);
        memberpanelLayout.setHorizontalGroup(
            memberpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memberpanelLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(memberpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(memberpanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(memname, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(memberpanelLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(memid)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        memberpanelLayout.setVerticalGroup(
            memberpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, memberpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(memberpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(memberpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(memberpanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(memberpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );

        jLabel2.setForeground(java.awt.Color.blue);
        jLabel2.setText("Members :");

        ForAll_Radio.setText("All");
        ForAll_Radio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ForAll_RadioItemStateChanged(evt);
            }
        });

        individual_radio.setText("Individual");
        individual_radio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                individual_radioItemStateChanged(evt);
            }
        });

        report.setForeground(java.awt.Color.red);
        report.setText("Generate Report");
        report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportActionPerformed(evt);
            }
        });

        jLabel3.setForeground(java.awt.Color.blue);
        jLabel3.setText("Books :");

        allbook_radio.setText("All");
        allbook_radio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                allbook_radioItemStateChanged(evt);
            }
        });

        singlebook_radio.setText("Select Book");
        singlebook_radio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                singlebook_radioItemStateChanged(evt);
            }
        });

        reset.setForeground(java.awt.Color.red);
        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        viewlist.setForeground(java.awt.Color.red);
        viewlist.setText("View List");
        viewlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewlistActionPerformed(evt);
            }
        });

        jLabel8.setText("Order By :");

        custradio.setText("Customer");

        bookradio.setText("Book");

        memid_radio.setText("MemId");

        issuedateradio.setText("IssueDate");

        pending.setText("Pending to Return");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel7.setForeground(java.awt.Color.blue);
        jLabel7.setText("                                                                                      LIBRARY BOOK ISSUE & RETURN REPORT");

        jLabel4.setText("Book");

        javax.swing.GroupLayout originalbookpanelLayout = new javax.swing.GroupLayout(originalbookpanel);
        originalbookpanel.setLayout(originalbookpanelLayout);
        originalbookpanelLayout.setHorizontalGroup(
            originalbookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, originalbookpanelLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(book, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        originalbookpanelLayout.setVerticalGroup(
            originalbookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(originalbookpanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(originalbookpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(book, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(ForAll_Radio, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(individual_radio, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(memberpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 983, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 38, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(originalbookpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(custradio)
                                .addGap(23, 23, 23)
                                .addComponent(bookradio, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(memid_radio)
                                .addGap(18, 18, 18)
                                .addComponent(issuedateradio)
                                .addGap(18, 18, 18)
                                .addComponent(pending)))
                        .addGap(257, 257, 257))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(allbook_radio, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(singlebook_radio))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(146, 146, 146)
                                .addComponent(report, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(134, 134, 134)
                                .addComponent(viewlist, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(individual_radio)
                    .addComponent(ForAll_Radio)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(memberpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allbook_radio)
                    .addComponent(singlebook_radio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(originalbookpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(custradio)
                    .addComponent(bookradio)
                    .addComponent(memid_radio)
                    .addComponent(issuedateradio)
                    .addComponent(pending))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(viewlist, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(report, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(reset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(70, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Issue/Return Book", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1059, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 268, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JCustomerFinder finder = JCustomerFinder.getCustomerFinder(this, dlCustomers);
        finder.setVisible(true);
        customerInfo = finder.getSelectedCustomer();
        if (customerInfo != null) {
            try {
                memname.setText(customerInfo.toString());
                memid.setText(customerInfo.getSearchkey());
                Contact = customerInfo.getMobile();
            } catch (Exception e) {
                MessageInf msg = new MessageInf(MessageInf.SGN_WARNING, AppLocal.getIntString("message.cannotfindcustomer"), e);
                msg.show(this);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ForAll_RadioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ForAll_RadioItemStateChanged
        if (ForAll_Radio.isSelected()) {
            memberpanel.setVisible(false);
            customerInfo = null;
        } else {
            memberpanel.setVisible(true);
        }
    }//GEN-LAST:event_ForAll_RadioItemStateChanged

    private void individual_radioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_individual_radioItemStateChanged
        if (individual_radio.isSelected()) {
            memberpanel.setVisible(true);
            memid.setText(null);
            memname.setText(null);
        } else {
            memberpanel.setVisible(false);
        }
    }//GEN-LAST:event_individual_radioItemStateChanged

    private void memidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_memidKeyPressed
        if (evt.getKeyText(evt.getKeyCode()).equals("Enter")) {
            try {
                Object[] obj = dmang.getMamberbySkey(memid.getText().toUpperCase());

                if (obj == null) {
                    JOptionPane.showMessageDialog(this, AppLocal.getIntString("message.custnotpresent"), AppLocal.getIntString("message.custtitle"), JOptionPane.WARNING_MESSAGE);
                    memid.setText(null);
                } else {
                    customerInfo = new CustomerInfo(obj[0].toString());
                    customerInfo.setName(obj[1].toString());
                    customerInfo.setSearchkey(memid.getText().toUpperCase());
                    customerInfo.setMobile(String.valueOf(obj[3]));
                    customerInfo.setAccno(obj[4].toString());
                    System.out.println(customerInfo.getAccno());
                    memname.setText(obj[1].toString());

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            memname.setText(null);
            customerInfo = null;

        }
    }//GEN-LAST:event_memidKeyPressed

    private void allbook_radioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_allbook_radioItemStateChanged
        if (allbook_radio.isSelected()) {

            originalbookpanel.setVisible(false);

        } else {

            originalbookpanel.setVisible(true);

        }
    }//GEN-LAST:event_allbook_radioItemStateChanged

    private void singlebook_radioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_singlebook_radioItemStateChanged

    }//GEN-LAST:event_singlebook_radioItemStateChanged

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        reset();
    }//GEN-LAST:event_resetActionPerformed

    private void reportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportActionPerformed

        String CustomerID = null;
        if (ForAll_Radio.isSelected()) {
            if (allbook_radio.isSelected()) {
                if(bookradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

              
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToAllBookbyBook(m_App);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                
                else if(custradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

              
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToAllBookbyCustomer(m_App);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(memid_radio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

              
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToAllBookbyMemId(m_App);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(issuedateradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToAllBookbyIssueDate(m_App);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else{
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToAllBookbyPending(m_App);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                
                
                }
                DataSourceProvider data1 = new DataSourceProvider(issuebook_info_List_all);
                DataSourceForIssueReturnReport dsfc = new DataSourceForIssueReturnReport(issuebook_info_List_all);
                data1.setDataSource(dsfc);
                Map reportparams = new HashMap();
                reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                String RPH = ReportHeader;
                reportparams.put("ReportHeader", RPH);
                reportparams.put("date", new Date());
                reportparams.put("TITLE", "Book Details");

                JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/IssueReturnBookReport.jrxml", reportparams, false, data1, true, null);

            } else if (singlebook_radio.isSelected()) {
                if (book.getSelectedIndex() != -1) {
                    String BookName = book.getSelectedItem().toString();
                    if(bookradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

              
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToOneBookByBook(m_App, BookName);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                
                else if(custradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToOneBookByCust(m_App, BookName);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(memid_radio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

             
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToOneBookByMemId(m_App, BookName);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(issuedateradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToOneBookByIsuueDate(m_App, BookName);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else{
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

              
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToOneBookByPending(m_App, BookName);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                
                
                }
                    DataSourceProvider data1 = new DataSourceProvider(issuebook_info_List_all);
                    DataSourceForIssueReturnReport dsfc = new DataSourceForIssueReturnReport(issuebook_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", new Date());
                    reportparams.put("TITLE", "Book Details");

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/IssueReturnBookReport.jrxml", reportparams, false, data1, true, null);

                } else {

                    JOptionPane.showMessageDialog(this, "Please select booktype ..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);

                }

            } else {

                JOptionPane.showMessageDialog(this, "Please select book ..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);

            }

        } else if (individual_radio.isSelected()) {

            if (customerInfo != null) {
                if (allbook_radio.isSelected()) {

                    CustomerID = customerInfo.getSearchkey();
                    if(bookradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByBook(m_App, CustomerID);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                
                else if(custradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

              
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByCust(m_App, CustomerID);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(memid_radio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByMemID(m_App, CustomerID);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(issuedateradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

                
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByIssueDate(m_App, CustomerID);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else{
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

                
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByPending(m_App, CustomerID);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                
                
                }
                    DataSourceProvider data1 = new DataSourceProvider(issuebook_info_List_all);
                    DataSourceForIssueReturnReport dsfc = new DataSourceForIssueReturnReport(issuebook_info_List_all);
                    data1.setDataSource(dsfc);
                    Map reportparams = new HashMap();
                    reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                    reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                    String RPH = ReportHeader;
                    reportparams.put("ReportHeader", RPH);
                    reportparams.put("date", new Date());
                    reportparams.put("TITLE", "Book Details");

                    JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/IssueReturnBookReport.jrxml", reportparams, false, data1, true, null);

                } else if (singlebook_radio.isSelected()) {
                    if (book.getSelectedIndex() != -1) {
                        CustomerID = customerInfo.getSearchkey();
                        String BookName = book.getSelectedItem().toString();
                       if(bookradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToOneBookByBook(m_App, CustomerID, BookName);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                
                else if(custradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToOneBookByCust(m_App, CustomerID, BookName);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(memid_radio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToOneBookByMemId(m_App, CustomerID, BookName);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(issuedateradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

              
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToOneBookByIssueDate(m_App, CustomerID, BookName);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else{
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

              
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToOneBookByPending(m_App, CustomerID, BookName);
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                
                
                }
                        DataSourceProvider data1 = new DataSourceProvider(issuebook_info_List_all);
                        DataSourceForIssueReturnReport dsfc = new DataSourceForIssueReturnReport(issuebook_info_List_all);
                        data1.setDataSource(dsfc);
                        Map reportparams = new HashMap();
                        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
                        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
                        String RPH = ReportHeader;
                        reportparams.put("ReportHeader", RPH);
                        reportparams.put("date", new Date());
                        reportparams.put("TITLE", "Book Details");

                        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/IssueReturnBookReport.jrxml", reportparams, false, data1, true, null);

                    } else {

                        JOptionPane.showMessageDialog(this, "Please select booktype ..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);

                    }

                }
            } else {

                JOptionPane.showMessageDialog(this, "Please select Member ..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);

            }

        } else {

            JOptionPane.showMessageDialog(this, "Please select member type ..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);

        }

        

    }//GEN-LAST:event_reportActionPerformed

    private void viewlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewlistActionPerformed
         String CustomerID = null;
        if (ForAll_Radio.isSelected()) {
            if (allbook_radio.isSelected()) {
                
                
               
                if(bookradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToAllBookbyBook(m_App);
                     jTable1.setModel(issuebook_Table_Model.getTableModel());
                    
                         
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                
                else if(custradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToAllBookbyCustomer(m_App);
                     jTable1.setModel(issuebook_Table_Model.getTableModel());
                     
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(memid_radio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

              
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToAllBookbyMemId(m_App);
                     jTable1.setModel(issuebook_Table_Model.getTableModel());
                    
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(issuedateradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

                
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToAllBookbyIssueDate(m_App);
                     jTable1.setModel(issuebook_Table_Model.getTableModel());
                     
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else{
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

                
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToAllBookbyPending(m_App);
                     jTable1.setModel(issuebook_Table_Model.getTableModel());
                   
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                
                
                }
                
                
               
                
            } else if (singlebook_radio.isSelected()) {
                if (book.getSelectedIndex() != -1) {
                    String BookName = book.getSelectedItem().toString();
                    if(bookradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

             
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToOneBookByBook(m_App, BookName);
                    jTable1.setModel(issuebook_Table_Model.getTableModel());
                    
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                
                else if(custradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

              
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToOneBookByCust(m_App, BookName);
                    jTable1.setModel(issuebook_Table_Model.getTableModel());
                    
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(memid_radio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

              
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToOneBookByMemId(m_App, BookName);
                    jTable1.setModel(issuebook_Table_Model.getTableModel());
                     
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(issuedateradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToOneBookByIsuueDate(m_App, BookName);
                    jTable1.setModel(issuebook_Table_Model.getTableModel());
                     
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else{
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

             
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_AllToOneBookByPending(m_App, BookName);
                    jTable1.setModel(issuebook_Table_Model.getTableModel());
                    
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                
                
                } 
                } else {

                    JOptionPane.showMessageDialog(this, "Please select booktype ..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);

                }

            } else {

                JOptionPane.showMessageDialog(this, "Please select book ..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);

            }

        } else if (individual_radio.isSelected()) {

            if (customerInfo != null) {
                if (allbook_radio.isSelected()) {

                    CustomerID = customerInfo.getSearchkey();
                     if(bookradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByBook(m_App, CustomerID);
                    jTable1.setModel(issuebook_Table_Model.getTableModel());
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                
                else if(custradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByCust(m_App, CustomerID);
                    jTable1.setModel(issuebook_Table_Model.getTableModel());
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(memid_radio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByMemID(m_App, CustomerID);
                    jTable1.setModel(issuebook_Table_Model.getTableModel());
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(issuedateradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

              
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByIssueDate(m_App, CustomerID);
                    jTable1.setModel(issuebook_Table_Model.getTableModel());
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else{
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

              
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByPending(m_App, CustomerID);
                    jTable1.setModel(issuebook_Table_Model.getTableModel());
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                
                
                }
                } else if (singlebook_radio.isSelected()) {
                    if (book.getSelectedIndex() != -1) {
                        CustomerID = customerInfo.getSearchkey();
                        String BookName = book.getSelectedItem().toString();
                        if(bookradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByBook(m_App, CustomerID);
                    
                      jTable1.setModel(issuebook_Table_Model.getTableModel());
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                
                else if(custradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

                
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByCust(m_App, CustomerID);
                      jTable1.setModel(issuebook_Table_Model.getTableModel());
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(memid_radio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByMemID(m_App, CustomerID);
                      jTable1.setModel(issuebook_Table_Model.getTableModel());
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else if(issuedateradio.isSelected()){
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

                
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByIssueDate(m_App, CustomerID);
                      jTable1.setModel(issuebook_Table_Model.getTableModel());
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                }
                else{
                
                 issuebook_info_List_all = new ArrayList<IssueReturnReportTableModel.IssueReturnBook>();

               
                try {
                    issuebook_Table_Model = IssueReturnReportTableModel.LoadIssueBookReport_OneToAllBookByPending(m_App, CustomerID);
                      jTable1.setModel(issuebook_Table_Model.getTableModel());
                } catch (BasicException ex) {
                    Logger.getLogger(IssueReturn_Report.class.getName()).log(Level.SEVERE, null, ex);
                }
                issuebook_info_List_all = (List<IssueReturnReportTableModel.IssueReturnBook>) issuebook_Table_Model.getBookIssueList();

                
                
                
                }}
                         else {

                        JOptionPane.showMessageDialog(this, "Please select booktype ..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);

                    }

               
            } else {

                JOptionPane.showMessageDialog(this, "Please select Member ..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);

            }

        } else {

            JOptionPane.showMessageDialog(this, "Please select member type ..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);

        }
        }
    }//GEN-LAST:event_viewlistActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ForAll_Radio;
    private javax.swing.JRadioButton allbook_radio;
    private javax.swing.JComboBox book;
    private javax.swing.JPanel bookpanel;
    private javax.swing.JRadioButton bookradio;
    private javax.swing.JRadioButton custradio;
    private javax.swing.JRadioButton individual_radio;
    private javax.swing.JRadioButton issuedateradio;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel memberpanel;
    private javax.swing.JTextField memid;
    private javax.swing.JRadioButton memid_radio;
    private javax.swing.JTextField memname;
    private javax.swing.JPanel originalbookpanel;
    private javax.swing.JRadioButton pending;
    private javax.swing.JButton report;
    private javax.swing.JButton reset;
    private javax.swing.JRadioButton singlebook_radio;
    private javax.swing.JButton viewlist;
    // End of variables declaration//GEN-END:variables

    public String getTitle() {
        return "Library Book Issue and Return ";
    }

    public void activate() throws BasicException {
        ButtonGrp();

        loaddata();
    }

    public boolean deactivate() {
        return true;
    }

    public JComponent getComponent() {
        return this;
    }

    public void init(AppView app) throws BeanFactoryException {
        m_App = app;
        dmang = (DataLogicFacilities) app.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");
        dlCustomers = (DataLogicCustomers) app.getBean("com.openbravo.pos.customers.DataLogicCustomersCreate");

    }

    public Object getBean() {
        return this;
    }

    public void loaddata() throws BasicException {
        reset();

        bookList = getIssueBookList(m_App);
        bookListModel = new ComboBoxValModel(bookList);
        book.setModel(bookListModel);
        custradio.setSelected(true);

    }

    public void ButtonGrp() {

        ButtonGroup bg1 = new ButtonGroup();
        bg1.add(ForAll_Radio);
        bg1.add(individual_radio);

        ButtonGroup bg2 = new ButtonGroup();
        bg2.add(allbook_radio);
        bg2.add(singlebook_radio);
        
        ButtonGroup bg3=new ButtonGroup();
        bg3.add(custradio);
        bg3.add(bookradio);
        bg3.add(memid_radio);
        bg3.add(issuedateradio);
        bg3.add(pending);
    }

    public void reset() {
        memberpanel.setVisible(false);
        // month_radio.setSelected(true);
        ForAll_Radio.setSelected(true);
        memid.setText(null);
        memname.setText(null);

        book.setSelectedIndex(-1);
        allbook_radio.setSelected(true);
        bookpanel.setVisible(false);
        custradio.setSelected(true);
    }

    public List getIssueBookList(AppView app) throws BasicException {
        List<Object> booklist = new ArrayList<Object>();
        booklist = (List<Object>) new StaticSentence(app.getSession(), "SELECT Name FROM lib_bookmaster  ORDER BY Name ", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).list();

        return booklist;
    }

    public String getBookListIdByName(AppView app, String ID) throws BasicException {
        Object o = null;
        o = new StaticSentence(app.getSession(), "SELECT ID FROM lib_bookmaster WHERE Name =?   ", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find(ID);

        if (o != null) {
            return o.toString();
        } else {
            return null;
        }

    }

    private class ItemsListModel extends AbstractListModel {

        private java.util.List items;

        public ItemsListModel(java.util.List items) {
            this.items = items;
        }

        public int getSize() {
            return items.size();
        }

        public Object getElementAt(int i) {
            return items.get(i);
        }
    }

}
