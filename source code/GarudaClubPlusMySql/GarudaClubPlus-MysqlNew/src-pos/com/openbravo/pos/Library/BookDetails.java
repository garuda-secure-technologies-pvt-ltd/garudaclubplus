/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.Library;

import com.openbravo.pos.Library.BookListDetails;
import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.pos.clubmang.DataSourceProvider;
import com.openbravo.pos.clubmang.JasperReportNew;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Window;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JasperPrint;
import javax.swing.table.TableCellRenderer;
/**
 *
 * @author vinuta
 */
public class BookDetails extends javax.swing.JPanel implements JPanelView, BeanFactoryApp {

    private AppView m_App;
    List<Object> SelectedMemTypeList = new ArrayList<Object>();
    private LibDataLogicFacilitiesCreate dlfac;

    private List<Book> details;
    
    
    private List<String> categoryList = new ArrayList<String>();
    private ComboBoxValModel categoryListmodel ; 
    
   private List<String> authorList = new ArrayList<String>();
    private ComboBoxValModel authorListModel ; 
    
    private List<String> mediaList = new ArrayList<String>();
    private ComboBoxValModel mediaListModel ; 
    
    private List<String> publisherList = new ArrayList<String>();
    private ComboBoxValModel PublisherListModel ; 
    
    private List<String> vendorList = new ArrayList<String>();
    private ComboBoxValModel vendorListModel ; 
    
    private String ReportHeader;
    
    private List<BookListDetails.BookListInfo> Book_info_List_all;
    private BookListDetails BookReport_Table_Model;

    private String name;
    private String author;
    private String publisher;
    private String language;
    private String category;
    private String edition;
    private String media;
    private String copies;
    private String available_flag;
    private String refno;
    private String vendor;

    /**
     * Creates new form BookDetails
     */
    public BookDetails() {
        initComponents();
       viewpanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     *
     * @param app
     */
    public BookDetails(AppView app, String refno, String name, String author, String publisher, String language, String category, String edition, String media, String copies, String available_flag, String vendor) {
        this.refno = refno;
        this.name = name;
        this.author = author;
        this.publisher = publisher;
        this.language = language;
        this.category = category;
        this.edition = edition;
        this.media = media;
        this.copies = copies;
        this.available_flag = available_flag;
        this.vendor = vendor;
    }

    protected static Window getWindow(Component parent) {
        if (parent == null) {
            return new JFrame();
        } else if (parent instanceof Frame || parent instanceof Dialog) {
            return (Window) parent;
        } else {
            return getWindow(parent.getParent());
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityManager1 = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory(null).createEntityManager();
        viewpanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        cancel = new javax.swing.JButton();
        msglabel = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        Authorcom = new javax.swing.JComboBox();
        publishercombo = new javax.swing.JComboBox();
        categorycombo = new javax.swing.JComboBox();
        vendorcombo = new javax.swing.JComboBox();
        mediacombo = new javax.swing.JComboBox();
        Author = new javax.swing.JLabel();
        Publisher = new javax.swing.JLabel();
        Category = new javax.swing.JLabel();
        Vendor = new javax.swing.JLabel();
        Media = new javax.swing.JLabel();
        Report = new javax.swing.JButton();
        View = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        cancel.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        cancel.setForeground(java.awt.Color.red);
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        msglabel.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        msglabel.setForeground(java.awt.Color.blue);
        msglabel.setText("                                                                 LIST OF BOOKS");

        javax.swing.GroupLayout viewpanelLayout = new javax.swing.GroupLayout(viewpanel);
        viewpanel.setLayout(viewpanelLayout);
        viewpanelLayout.setHorizontalGroup(
            viewpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewpanelLayout.createSequentialGroup()
                .addGroup(viewpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(msglabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(viewpanelLayout.createSequentialGroup()
                        .addGroup(viewpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(viewpanelLayout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(viewpanelLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 849, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 27, Short.MAX_VALUE)))
                .addContainerGap())
        );
        viewpanelLayout.setVerticalGroup(
            viewpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(msglabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        Authorcom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthorcomActionPerformed(evt);
            }
        });

        publishercombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publishercomboActionPerformed(evt);
            }
        });

        Author.setText("Author");

        Publisher.setText("Publisher");

        Category.setText("Category");

        Vendor.setText("Vendor");

        Media.setText("Media");

        Report.setText("Report");
        Report.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReportActionPerformed(evt);
            }
        });

        View.setText("View List");
        View.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Publisher, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(Media, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Vendor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Category, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addComponent(Author, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(publishercombo, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Authorcom, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(categorycombo, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(vendorcombo, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(mediacombo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(360, 360, 360)
                        .addComponent(Report, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(View, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(191, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Authorcom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Author, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Publisher, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(publishercombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Category, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categorycombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Vendor, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vendorcombo))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Media, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mediacombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Report, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(View, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(176, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("BookReport", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 891, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(viewpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewActionPerformed

        BookListDetails.BookListInfo b = new BookListDetails.BookListInfo();
        Book_info_List_all = new ArrayList<BookListDetails.BookListInfo>();

        if (Authorcom.getSelectedItem() != null && categorycombo.getSelectedItem() != null && publishercombo.getSelectedItem() != null && mediacombo.getSelectedItem() != null && vendorcombo.getSelectedItem() != null) {
            String ctype = categorycombo.getSelectedItem().toString();
            String atype = Authorcom.getSelectedItem().toString();
            String ptype = publishercombo.getSelectedItem().toString();
            String mtype = mediacombo.getSelectedItem().toString();
            String vtype = vendorcombo.getSelectedItem().toString();
            if ((Authorcom.getSelectedItem().toString().equals("ALL")) && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

              
                try {

                    BookReport_Table_Model = BookListDetails.LoadBookReport_ALL(m_App);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                    viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                        

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_CategAuthorType(m_App, ctype, atype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    
                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {

                    BookReport_Table_Model = BookListDetails.LoadBookReport_AuthorType(m_App, atype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    
                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((categorycombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {

                    BookReport_Table_Model = BookListDetails.LoadBookReport_CategType(m_App, ctype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    
                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((publishercombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (categorycombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {

                    BookReport_Table_Model = BookListDetails.LoadBookReport_PublishType(m_App, ptype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    
                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {

                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediaType(m_App, mtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    
                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if (publishercombo.getSelectedItem().toString() != "ALL" && Authorcom.getSelectedItem().toString() != "ALL" && categorycombo.getSelectedItem().toString().equals("ALL") && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {

                    BookReport_Table_Model = BookListDetails.LoadBookReport_PublishAuthType(m_App, ptype, atype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    
                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if (publishercombo.getSelectedItem().toString() != "ALL" && categorycombo.getSelectedItem().toString() != "ALL" && Authorcom.getSelectedItem().toString().equals("ALL") && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_PublishCategType(m_App, ptype, ctype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((publishercombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_PublishCategType(m_App, ptype, ctype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((publishercombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_AuthPublishCategmedType(m_App, ptype, ctype, atype, mtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((Authorcom.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediaAuthtype(m_App, atype, mtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((categorycombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediaCattype(m_App, ctype, mtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (categorycombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediaPubtype(m_App, ptype, mtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediaAuthCattype(m_App, atype, ctype, mtype);

                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((Authorcom.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediaAuthPubtype(m_App, atype, ptype, mtype);

                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((mediacombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediacatPubtype(m_App, mtype, ctype, ptype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    
                    
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (Authorcom.getSelectedItem().toString().equals("ALL")) && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL"))) {

                try {

                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendorType(m_App, vtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    
                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendAuthtype(m_App, vtype, atype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendCattype(m_App, vtype, ctype);

                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (Authorcom.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendPubtype(m_App, vtype, ptype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (Authorcom.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendMedtype(m_App, vtype, mtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_Vendauthcattype(m_App, vtype, ctype, atype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendAutPubtype(m_App, vtype, atype, ptype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendAuthMedtype(m_App, vtype, atype, mtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_vendcatPubtype(m_App, vtype, ctype, ptype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendCatMEdtype(m_App, vtype, ctype, mtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (categorycombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendPubMedtype(m_App, vtype, ptype, mtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_AuthPublishCategVendType(m_App, atype, ptype, ctype, vtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendAuthCatMedType(m_App, vtype, atype, ctype, mtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendAuthPubMed(m_App, vtype, atype, ptype, mtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendCatPubMed(m_App, vtype, ctype, ptype, mtype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL")) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendCatPubMedAuth(m_App, vtype, ctype, ptype, mtype, atype);
                    jTable1.setModel(BookReport_Table_Model.getTableModel());
                     viewpanel.setVisible(true);
                         jTabbedPane2.setVisible(false);
                    

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {

                JOptionPane.showMessageDialog(this, "Select all Type First..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);

            }

        } else {
            JOptionPane.showMessageDialog(this, "Select Book Type First..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);
        }
        Book_info_List_all = (List<BookListDetails.BookListInfo>) BookReport_Table_Model.getBookList();

       
       
    }//GEN-LAST:event_ViewActionPerformed

    private void ReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReportActionPerformed
        BookListDetails.BookListInfo b = new BookListDetails.BookListInfo();
        Book_info_List_all = new ArrayList<BookListDetails.BookListInfo>();
        if (Authorcom.getSelectedItem() != null && categorycombo.getSelectedItem() != null && publishercombo.getSelectedItem() != null && mediacombo.getSelectedItem() != null && vendorcombo.getSelectedItem() != null) {
            String ctype = categorycombo.getSelectedItem().toString();
            String atype = Authorcom.getSelectedItem().toString();
            String ptype = publishercombo.getSelectedItem().toString();
            String mtype = mediacombo.getSelectedItem().toString();
            String vtype = vendorcombo.getSelectedItem().toString();
            if ((Authorcom.getSelectedItem().toString().equals("ALL")) && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

               
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_ALL(m_App);
                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_CategAuthorType(m_App, ctype, atype);
                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {

                    BookReport_Table_Model = BookListDetails.LoadBookReport_AuthorType(m_App, atype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((categorycombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {

                    BookReport_Table_Model = BookListDetails.LoadBookReport_CategType(m_App, ctype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((publishercombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (categorycombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {

                    BookReport_Table_Model = BookListDetails.LoadBookReport_PublishType(m_App, ptype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {

                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediaType(m_App, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if (publishercombo.getSelectedItem().toString() != "ALL" && Authorcom.getSelectedItem().toString() != "ALL" && categorycombo.getSelectedItem().toString().equals("ALL") && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {

                    BookReport_Table_Model = BookListDetails.LoadBookReport_PublishAuthType(m_App, ptype, atype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if (publishercombo.getSelectedItem().toString() != "ALL" && categorycombo.getSelectedItem().toString() != "ALL" && Authorcom.getSelectedItem().toString().equals("ALL") && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_PublishCategType(m_App, ptype, ctype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((publishercombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_PublishCategType(m_App, ptype, ctype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((publishercombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_AuthPublishCategmedType(m_App, ptype, ctype, atype, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((Authorcom.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediaAuthtype(m_App, atype, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((categorycombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediaCattype(m_App, ctype, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (categorycombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediaPubtype(m_App, ptype, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediaAuthCattype(m_App, atype, ctype, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((Authorcom.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediaAuthPubtype(m_App, atype, ptype, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((mediacombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (vendorcombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_MediacatPubtype(m_App, mtype, ctype, ptype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (Authorcom.getSelectedItem().toString().equals("ALL")) && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL"))) {

                try {

                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendorType(m_App, vtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendAuthtype(m_App, vtype, atype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendCattype(m_App, vtype, ctype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (Authorcom.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendPubtype(m_App, vtype, ptype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL")) && (Authorcom.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendMedtype(m_App, vtype, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_Vendauthcattype(m_App, vtype, ctype, atype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendAutPubtype(m_App, vtype, atype, ptype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendAuthMedtype(m_App, vtype, atype, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (mediacombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_vendcatPubtype(m_App, vtype, ctype, ptype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (publishercombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendCatMEdtype(m_App, vtype, ctype, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL")) && (categorycombo.getSelectedItem().toString().equals("ALL"))) {
                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendPubMedtype(m_App, vtype, ptype, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_AuthPublishCategVendType(m_App, atype, ptype, ctype, vtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendAuthCatMedType(m_App, vtype, atype, ctype, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendAuthPubMed(m_App, vtype, atype, ptype, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString().equals("ALL"))) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendCatPubMed(m_App, vtype, ctype, ptype, mtype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if ((vendorcombo.getSelectedItem().toString() != "ALL") && (categorycombo.getSelectedItem().toString() != "ALL") && (publishercombo.getSelectedItem().toString() != "ALL") && (mediacombo.getSelectedItem().toString() != "ALL") && (Authorcom.getSelectedItem().toString() != "ALL")) {

                try {
                    BookReport_Table_Model = BookListDetails.LoadBookReport_VendCatPubMedAuth(m_App, vtype, ctype, ptype, mtype, atype);

                } catch (BasicException ex) {
                    Logger.getLogger(BookDetails.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {

                JOptionPane.showMessageDialog(this, "Select all Type First..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);

            }

        } else {
            JOptionPane.showMessageDialog(this, "Select Book Type First..!!", "incomplete Form", JOptionPane.WARNING_MESSAGE);
        }
        Book_info_List_all = (List<BookListDetails.BookListInfo>) BookReport_Table_Model.getBookList();

        DataSourceProvider data1 = new DataSourceProvider(Book_info_List_all);
        DataSourceForBookDetail dsfc = new DataSourceForBookDetail(Book_info_List_all);
        data1.setDataSource(dsfc);
        Map reportparams = new HashMap();
        reportparams.put("CLUBNAME", m_App.getSession().getCompanyName());
        reportparams.put("ADDR", m_App.getSession().getCompanyAddress());
        String RPH = ReportHeader;
        reportparams.put("ReportHeader", RPH);
        reportparams.put("date", new Date());
        reportparams.put("TITLE", "Book Details");

        JasperPrint jp = JasperReportNew.runReport(m_App, "./reports/com/openbravo/reports/BookDetails.jrxml", reportparams, false, data1, true, null);
    }//GEN-LAST:event_ReportActionPerformed

    private void publishercomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publishercomboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_publishercomboActionPerformed

    private void AuthorcomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorcomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AuthorcomActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        viewpanel.setVisible(false);
        jTabbedPane2.setVisible(true);
    }//GEN-LAST:event_cancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Author;
    private javax.swing.JComboBox Authorcom;
    private javax.swing.JLabel Category;
    private javax.swing.JLabel Media;
    private javax.swing.JLabel Publisher;
    private javax.swing.JButton Report;
    private javax.swing.JLabel Vendor;
    private javax.swing.JButton View;
    private javax.swing.JButton cancel;
    private javax.swing.JComboBox categorycombo;
    private javax.persistence.EntityManager entityManager1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox mediacombo;
    private javax.swing.JLabel msglabel;
    private javax.swing.JComboBox publishercombo;
    private javax.swing.JComboBox vendorcombo;
    private javax.swing.JPanel viewpanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return AppLocal.getIntString("Label.Books Detail");
    }

    @Override
    public void activate() throws BasicException{
        loaddata();
    
    }
   public void loaddata() throws BasicException{
       
       
        categoryList =  getcategoryList(m_App);
        categoryListmodel =new ComboBoxValModel(categoryList);
          categoryList.add(0,"ALL");
        categorycombo.setModel(categoryListmodel);
        
         authorList =  getAuthorList(m_App);
        authorListModel =new ComboBoxValModel(authorList);
          authorList.add(0,"ALL");
        Authorcom.setModel(authorListModel);
        
        mediaList =  getMediaList(m_App);
        mediaListModel =new ComboBoxValModel(mediaList);
          mediaList.add(0,"ALL");
        mediacombo.setModel(mediaListModel);
        
         publisherList =  getPublisherList(m_App);
        PublisherListModel =new ComboBoxValModel(publisherList);
          publisherList.add(0,"ALL");
        publishercombo.setModel(PublisherListModel);
        
         vendorList =  getVendorList(m_App);
        vendorListModel =new ComboBoxValModel(vendorList);
          vendorList.add(0,"ALL");
        vendorcombo.setModel(vendorListModel);
       
       
       
       
 }
    public List getcategoryList(AppView app ) throws BasicException{
          List<Object> categoryList = new ArrayList<Object>();
           categoryList  = (List<Object>) new StaticSentence(app.getSession(), "SELECT NAME FROM lib_categories  ORDER BY NAME ",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list();
          
          return categoryList;
      }
    public List getAuthorList(AppView app ) throws BasicException{
          List<Object> authorList = new ArrayList<Object>();
           authorList  = (List<Object>) new StaticSentence(app.getSession(), "SELECT NAME FROM lib_author  ORDER BY NAME ",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list();
          
          return authorList;
      }
    public List getMediaList(AppView app ) throws BasicException{
          List<Object> mediaList = new ArrayList<Object>();
           mediaList  = (List<Object>) new StaticSentence(app.getSession(), "SELECT Name FROM lib_media  ORDER BY NAME ",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list();
          
          return mediaList;
      }
    public List getPublisherList(AppView app ) throws BasicException{
          List<Object> publisherList = new ArrayList<Object>();
           publisherList  = (List<Object>) new StaticSentence(app.getSession(), "SELECT NAME FROM lib_publisher  ORDER BY NAME ",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list();
          
          return publisherList;
      }
    public List getVendorList(AppView app ) throws BasicException{
          List<Object> vendorList = new ArrayList<Object>();
           vendorList  = (List<Object>) new StaticSentence(app.getSession(), "SELECT NAME FROM lib_vendor  ORDER BY NAME ",  SerializerWriteString.INSTANCE , SerializerReadString.INSTANCE).list();
          
          return vendorList;
      }


    @Override
    public boolean deactivate() {
        return true;
    }

    @Override
    public JComponent getComponent() {
        return this;
    }

    @Override
    public void init(AppView app) throws BeanFactoryException {
        m_App = app;
       
    }

    @Override
    public Object getBean() {
        return this;
    }

    private class ItemsListModel extends AbstractListModel {

        private java.util.List items;

        public ItemsListModel(java.util.List items) {
            this.items = items;
        }

        public int getSize() {
            return items.size();
        }

        public Object getElementAt(int i) {
            return items.get(i);
        }
    }

}
