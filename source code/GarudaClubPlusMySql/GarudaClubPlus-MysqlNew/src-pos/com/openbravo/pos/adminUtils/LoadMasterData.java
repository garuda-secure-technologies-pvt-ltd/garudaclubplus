/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LoadMasterData.java
 *
 * Created on 07-Sep-2011, 13:09:38
 */

package com.openbravo.pos.adminUtils;

import com.openbravo.basic.BasicException;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.PreparedSentence;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.format.Formats;
import com.openbravo.pos.Accounts.AccountMasterExt;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.io.FileInputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import org.apache.poi.hssf.usermodel.HSSFCell;
//import org.apache.poi.hssf.usermodel.Cell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;

/**
 *
 * @author user
 */
public class LoadMasterData extends javax.swing.JPanel implements JPanelView, BeanFactoryApp {


    private AppView m_app;
    private FileInputStream f;
    private DataLogicFacilities dlfac;
    Date joindate;
    Date dob;

    /** Creates new form LoadMasterData */
    public LoadMasterData() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fpath = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jBrowse = new javax.swing.JButton();
        jLoad = new javax.swing.JButton();

        fpath.setText("File Path:");
        fpath.setName("fpath"); // NOI18N

        jTextField1.setName("jTextField1"); // NOI18N

        jBrowse.setText("Browse");
        jBrowse.setName("jBrowse"); // NOI18N
        jBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBrowseActionPerformed(evt);
            }
        });

        jLoad.setText("Load");
        jLoad.setName("jLoad"); // NOI18N
        jLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(fpath, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBrowse))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jLoad)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fpath, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBrowse))
                .addGap(18, 18, 18)
                .addComponent(jLoad)
                .addContainerGap(205, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrowseActionPerformed
        // TODO add your handling code here:
     JFileChooser fChooser = new JFileChooser();
        fChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fChooser.setCurrentDirectory(null);
        fChooser.showOpenDialog(null);
        jTextField1.setText(fChooser.getSelectedFile().getAbsolutePath());
    }//GEN-LAST:event_jBrowseActionPerformed

    private void jLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLoadActionPerformed
        // TODO add your handling code here:
        try{
        f=new FileInputStream(jTextField1.getText());
        POIFSFileSystem fs=new POIFSFileSystem(f);
         HSSFWorkbook wb = new HSSFWorkbook(fs);
            int count = wb.getNumberOfSheets();
            
            for (int j = 0; j < count; j++) {
                HSSFSheet sheet = wb.getSheetAt(j);
                HSSFRow row;

                HSSFCell cell;


                int rows; // No of rows
                rows = sheet.getPhysicalNumberOfRows();
                   System.out.println(rows);
                int cols = 0; // No of columns
                int tmp = 0;

                // This trick ensures that we get the data properly even if it doesn't start from first few rows
                for (int i = 0; i < 10 || i < rows; i++) {
                    row = sheet.getRow(i);
                    if (row != null) {
                        tmp = sheet.getRow(i).getPhysicalNumberOfCells();
                        if (tmp > cols) {
                            cols = tmp;
                        }
                        
                    }
                }
                
                for (int r = 1; r < rows; r++) {
              
                    row = sheet.getRow(r);
               

                    String memCode = null;
                    String memName=null;
                    String memDOB=null;
                    String memTYPE=null;
                    String memEMAIL=null;
                    String memPHONER=null;
                    String memPHONEO=null;
                    String memFAX=null;
                    String memMOBILE=null;
                    String memADDRS1=null;
                    String memADDRS2=null;
                    String memADDRS3=null;
                    String memPIN=null;
                    String memCITY=null;
                    String memDOJ=null;
                    String memberType=null;
                    String memAccountID=null;

                    if (row != null) {
                        try{

                      
                        cell = row.getCell((short)0);
                        if (cell != null) {
                            memCode=cell.getRichStringCellValue().getString();
                        }
                        cell = row.getCell((short)1);
                        if (cell != null) {
                            memName=cell.getRichStringCellValue().getString();
                        }
                        cell = row.getCell((short)2);
                        if (cell != null) {
                            memDOB=cell.getRichStringCellValue().getString();
                          String[] str=memDOB.split("-");
                           String sb=null;
                           int len=str.length;
                           if(len>2){
                           String month=str[1];
                           String year="19"+str[2];
                           
                          
                           if(str[0]!=null && str[1]!=null && str[2]!=null){
                               sb=str[0];
                               if(month.equals("Jan")){
                                   memDOB=null;
                                   memDOB=sb+"-January-"+year;
                                  
                               }
                               if(month.equals("Feb")){
                                   memDOB=null;
                                   memDOB=sb+"-February-"+year;
                                  
                               }
                               if(month.equals("Mar")){
                                   memDOB=null;
                                   memDOB=sb+"-March-"+year;
                                  
                               }
                               if(month.equals("Apr")){
                                   memDOB=null;
                                   memDOB=sb+"-April-"+year;
                                   
                               }
                               if(month.equals("May")){
                                   memDOB=null;
                                   memDOB=sb+"-May-"+year;
                                  
                               }
                               if(month.equals("Jun")){
                                   memDOB=null;
                                   memDOB=sb+"-June-"+year;
                                  
                               }
                               if(month.equals("Jul")){
                                   memDOB=null;
                                   memDOB=sb+"-July-"+year;
                                   
                               }
                               if(month.equals("Aug")){
                                   memDOB=null;
                                   memDOB=sb+"-August-"+year;
                                   
                               }
                               if(month.equals("Sep")){
                                   memDOB=null;
                                   memDOB=sb+"-September-"+year;
                                  
                               }
                               if(month.equals("Oct")){
                                   memDOB=null;
                                   memDOB=sb+"-October-"+year;
                                   
                               }
                               if(month.equals("Nov")){
                                   memDOB=null;
                                   memDOB=sb+"-November-"+year;
                                   
                               }
                               if(month.equals("Dec")){
                                   memDOB=null;
                                   memDOB=sb+"-December-"+year;
                                   
                               }
                           
                         
                        
                        }
                           }
                           else{
                               memDOB=null;
                               memDOB="";
                               
                           }
                           dob = (Date) Formats.TIMESTAMP.parseValue(memDOB);
                        }
                        cell = row.getCell((short)3);
                        if (cell != null) {
                            memTYPE=cell.getRichStringCellValue().getString();
                            Object obj = new PreparedSentence(m_app.getSession(), "select id from memtype where shortform=?",SerializerWriteString.INSTANCE,SerializerReadString.INSTANCE).exec(memTYPE);
                            if(obj!=null){
                                memberType=obj.toString();
                            }

                        }
                        cell = row.getCell((short)4);
                        if (cell != null) {
                            int c=cell.getCellType();
                            memEMAIL=cell.getRichStringCellValue().getString();
                        }
                        cell = row.getCell((short)5);
                        if (cell != null) {
                            int c=cell.getCellType();
                            memPHONER=cell.getRichStringCellValue().getString();
                        }
                        cell = row.getCell((short)6);
                        if (cell != null) {
                           memPHONEO=cell.getRichStringCellValue().getString();
                          // System.out.println(memPHONEO);
                        }
                        cell = row.getCell((short)7);
                        if (cell != null) {
                            memFAX=cell.getRichStringCellValue().getString();
                        }
                        cell = row.getCell((short)8);
                        if (cell != null) {
                            memMOBILE=cell.getRichStringCellValue().getString();
                        }
                        cell = row.getCell((short)9);
                        if (cell != null) {
                          memADDRS1=cell.getRichStringCellValue().getString();
                        }
                        cell = row.getCell((short)10);
                        if (cell != null) {
                            memADDRS2=cell.getRichStringCellValue().getString();
                        }
                        cell = row.getCell((short)11);
                        if (cell != null) {
                         memADDRS3=cell.getRichStringCellValue().getString();
                        }
                        cell = row.getCell((short)12);
                        if (cell != null) {
                            memPIN=cell.getRichStringCellValue().getString();
                        }
                        cell = row.getCell((short)13);
                        if (cell != null) {
                            memCITY=cell.getRichStringCellValue().getString();
                        }
                         cell = row.getCell((short)14);
                        if (cell != null) {
                            memDOJ=cell.getRichStringCellValue().getString();
                          String[] str=memDOJ.split("-");
                           String sb=null;
                          
                           int len=str.length;
                           if(len>2){
                           String month=str[1];
                           String year=null;
                           int i=Integer.parseInt(str[2]);
                           if(i>=0 && i<=12){
                                year="20"+str[2];
                           }
                           else{
                               year="19"+str[2];
                           }
                           System.out.println(len);
                           if(str[0]!=null && str[1]!=null && str[2]!=null){
                               sb=str[0];
                               if(month.equals("Jan")){
                                   memDOJ=null;
                                   memDOJ=sb+"-January-"+year;
                                  
                               }
                               if(month.equals("Feb")){
                                   memDOJ=null;
                                   memDOJ=sb+"-February-"+year;
                                 
                               }
                               if(month.equals("Mar")){
                                   memDOJ=null;
                                   memDOJ=sb+"-March-"+year;
                                  
                               }
                               if(month.equals("Apr")){
                                   memDOJ=null;
                                   memDOJ=sb+"-April-"+year;
                                  
                               }
                               if(month.equals("May")){
                                   memDOJ=null;
                                   memDOJ=sb+"-May-"+year;
                                   
                               }
                               if(month.equals("Jun")){
                                   memDOJ=null;
                                   memDOJ=sb+"-June-"+year;
                                  
                               }
                               if(month.equals("Jul")){
                                   memDOJ=null;
                                   memDOJ=sb+"-July-"+year;
                                   
                               }
                               if(month.equals("Aug")){
                                   memDOJ=null;
                                   memDOJ=sb+"-August-"+year;
                                   
                               }
                               if(month.equals("Sep")){
                                   memDOJ=null;
                                   memDOJ=sb+"-September-"+year;
                                   
                               }
                               if(month.equals("Oct")){
                                   memDOJ=null;
                                   memDOJ=sb+"-October-"+year;
                                  
                               }
                               if(month.equals("Nov")){
                                   memDOJ=null;
                                   memDOJ=sb+"-November-"+year;
                                  
                               }
                               if(month.equals("Dec")){
                                   memDOJ=null;
                                   memDOJ=sb+"-December-"+year;
                                   
                               }

                            
                        }
                           }
                           else{
                            memDOJ=null;
                            memDOJ="";
                           
                        }
                           joindate = (Date) Formats.TIMESTAMP.parseValue(memDOJ);
                        }
                        AccountMasterExt acc = dlfac.getMemberReceivableAccount1();
                        memAccountID = UUID.randomUUID().toString();
                        String accparent = acc.getSerachkey();
                        String searchkey;
                        Object obj[] = (Object[]) new StaticSentence(m_app.getSession(), "SELECT MAXIMUM FROM ACCOUNTMASTER WHERE SEARCHKEY=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.INT})).find(accparent);
                        if (obj == null && obj[0] == null) {
                            searchkey = accparent + ".1";
                            updateParent(1, accparent);
                        } else {
                            int temp = (Integer.parseInt(obj[0].toString()) + 1);
                            searchkey = accparent + "." + temp;
                            updateParent(temp, accparent);
                        }
                        Date dnow = new Date();
                        Double obal = 0.0;                        
                        Object[] value = new Object[]{memAccountID, searchkey,memCode + " - " + memName, memCode, acc.gettype(), acc.getsign(), false, false, acc.getSerachkey(), "S", dnow, obal, true};
                        new PreparedSentence(m_app.getSession(), "INSERT INTO ACCOUNTMASTER(ID,SEARCHKEY,NAME,DESCRIPTION,TYPE_,SIGN,DOCUMENT,SUMMARY,PARENT,LEVEL_,STARTDATE,OPENINGBALANCE,ACTIVE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING, Datas.STRING, Datas.STRING, Datas.STRING, Datas.BOOLEAN, Datas.BOOLEAN, Datas.STRING, Datas.STRING, Datas.TIMESTAMP, Datas.DOUBLE, Datas.BOOLEAN})).exec(value);
                   
                    


                         Object[] obj1=new Object[]{UUID.randomUUID().toString(),memCode,memName,dob,memberType,memEMAIL,memPHONER,memPHONEO,memFAX,memMOBILE,memADDRS1,memADDRS2+memADDRS3,memPIN,memCITY,joindate};
                         new PreparedSentence(m_app.getSession(),"INSERT INTO CUSTOMERS(ID,SEARCHKEY,NAME,DOB,TYPE_,EMAIL,PHONE,PHONE2,FAX,MOBILE,ADDRESS,ADDRESS2,PIN,CITY,JOINDATE) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,)",new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.TIMESTAMP,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.STRING,Datas.TIMESTAMP})).exec(obj1);
                       
                  
                        
                        }catch(Exception ex){
                        ex.printStackTrace();
                  }
                    }

            
                }
            }
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jLoadActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fpath;
    private javax.swing.JButton jBrowse;
    private javax.swing.JButton jLoad;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    public String getTitle() {
        return "true";
    }

    public void activate() throws BasicException {

    }

    public boolean deactivate() {
       return true;
    }

    public JComponent getComponent() {
        return this;
    }

    public void init(AppView app) throws BeanFactoryException {
        this.m_app=app;
        dlfac = (DataLogicFacilities) app.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");

    }

    public Object getBean() {
      return this;
    }

 private void updateParent(int max, String parent) throws BasicException {
        new PreparedSentence(m_app.getSession(), "UPDATE ACCOUNTMASTER SET MAXIMUM=? WHERE SEARCHKEY=?",
                new SerializerWriteBasic(new Datas[]{Datas.INT, Datas.STRING})).exec(new Object[]{max, parent});
    }

}
