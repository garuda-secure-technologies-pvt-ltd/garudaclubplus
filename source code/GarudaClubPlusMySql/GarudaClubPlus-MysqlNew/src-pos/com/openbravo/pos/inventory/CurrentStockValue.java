/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CurrentStockValue.java
 *
 * Created on 5 Feb, 2012, 12:57:23 PM
 */
package com.openbravo.pos.inventory;

import ar.com.fdvs.dj.core.DynamicJasperHelper;
import ar.com.fdvs.dj.core.layout.ClassicLayoutManager;
import ar.com.fdvs.dj.domain.DynamicReport;
import ar.com.fdvs.dj.domain.builders.ColumnBuilderException;
import ar.com.fdvs.dj.domain.builders.FastReportBuilder;
import com.openbravo.basic.BasicException;
import com.openbravo.data.loader.DataRead;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.PreparedSentence;
import com.openbravo.data.loader.SerializableRead;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerReadClass;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.pos.Accounts.Account;
import com.openbravo.pos.Accounts.ProductStock;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.JPanelView;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

public class CurrentStockValue extends javax.swing.JPanel implements JPanelView, BeanFactoryApp {
    
    private AppView m_App;
       /** Creates new form CurrentStockValue */
    public CurrentStockValue() {
        initComponents();
    }
    public String getTitle() {
        return "Current Stock Value";
    }
    public void activate() throws BasicException {
    }

    public boolean deactivate() {
        return true;
    }
    public JComponent getComponent() {
        return this;
    }
    public void init(AppView app) throws BeanFactoryException {
        m_App = app;
    }
    public Object getBean() {
        return this;
    }
    private void createStockReportObj(CurrentStockDetails csDetail, Set<String> locations, Map<String, StockReport> map) {
        StockReport stockReport;
        stockReport = new StockReport();
        stockReport.setPid(csDetail.getPid());
        stockReport.setpName(csDetail.getpName());
        stockReport.setQty(csDetail.getQty());
        String location = csDetail.getLocation();
        if(location == null)
            location="UNKNOWN";
        stockReport.getDependentCat().put(location, csDetail.getQty());
        locations.add(location);
        map.put(csDetail.getPid(), stockReport);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currStockValReport = new javax.swing.JButton();

        currStockValReport.setText("Current Stock Value Report");
        currStockValReport.setName("currStockValReport"); // NOI18N
        currStockValReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currStockValReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addComponent(currStockValReport, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(363, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(currStockValReport)
                .addContainerGap(414, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void currStockValReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currStockValReportActionPerformed
       calculate(null);
    }//GEN-LAST:event_currStockValReportActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton currStockValReport;
    // End of variables declaration//GEN-END:variables

    private void calculate(java.util.Date date){
         try {
            List<CurrentStockDetails> list=new PreparedSentence(m_App.getSession()
                                      , "SELECT P.ID,P.NAME,L.NAME,S.UNITS,C.PRODUCTFST,C.NOFST,C.NOSEC FROM PRODUCTS P LEFT OUTER JOIN STOCKCURRENT S ON S.PRODUCT = P.ID LEFT OUTER JOIN CONVERTER C ON C.PRODUCTSCN = P.ID LEFT OUTER JOIN LOCATIONS L ON L.ID=P.LOCATION ORDER BY C.PRODUCTFST "
                                      , null
                                      , new SerializerReadClass(CurrentStockValue.CurrentStockDetails.class)).list();
            Map<String,StockReport> map = new HashMap<String, StockReport>();
            Set<String> locations = new HashSet<String>();
            StockReport stockReport =null;
            String location=null;
            Map<String,Double> pdtStkFromStrkDiary = new HashMap<String, Double>();
            if(date != null){
                     List<Object[]> stkDiaryList=new PreparedSentence(m_App.getSession(), "select pid,pdtname,cat,sum(ob) as ob,sum(pur) as pur,sum(res_) as rec_,sum(sales) as sales,sum(out_) as out_,sum(break) as break,sum(insp) as insp,lparent,pcat from ( "+
                                                 " select p.id as pid,p.name as pdtname,p.location as cat,sum(s.units1) as ob,0.0 as pur,0.0 as res_,0.0  as sales,0.0 as out_,0.0 as break,0.0 as insp,l.parent as lparent,p.location  as pcat from products p join stockdiary s on p.id=s.product1 and s.reason1=1 and rno='Opening Balance'  join locations l on p.location=l.id   where datenew < ? group by p.name,pid,cat,lparent,pcat "+
                                                 " union all select p.id as pid,p.name as pdtname,p.location as cat,0.0 as ob,sum(s1.units1) as pur ,0.0 as res_,0.0 as sales,0.0 as out_,0.0 as break,0.0 as insp,l.parent as lparent,p.location as pcat from products p join stockdiary s1 on p.id=s1.product1 and s1.reason1=1 and rno!='Opening Balance' join locations l on p.location=l.id    where datenew < ?  group by p.name,pid,cat,lparent,pcat "+
                                                 " union all select p.id as pid,p.name as pdtname,p.location as cat,0.0 as ob,0.0 as pur,sum(s1.units1) as res_,0.0 as sales,0.0 as out_,0.0 as break,0.0 as insp,l.parent as lparent,p.location  as pcat from products p join stockdiary s1 on p.id=s1.product1 and s1.reason1=4 join locations l on p.location=l.id  where datenew < ?  group by p.name,pid,cat,lparent,pcat "+
                                                 " union all select p.id as pid,p.name as pdtname,p.location as cat,0.0 as ob,0.0 as pur,0.0 as res_,sum(s2.units1) as sales,0.0 as out_,0.0 as break,0.0 as insp,l.parent as lparent,p.location  as pcat from products p join stockdiary  s2 on p.id=s2.product1 and s2.reason1=-1 join locations l on p.location=l.id  where datenew < ?  group by p.name,pid,cat,lparent,pcat "+
                                                 " union all select p.id as pid,p.name as pdtname,p.location as cat,0.0 as ob,0.0 as pur,0.0 as res_,0.0 as sales,sum(s2.units ) as out_,0.0 as break,0.0 as insp,l.parent as lparent,p.location  as pcat from products p join stockdiary  s2 on p.id=s2.product and s2.reason=-4 join locations l on p.location=l.id  where datenew < ?  group by p.name,pid,cat,lparent,pcat "+
                                                 " union all select p.id as pid,p.name as pdtname,p.location as cat,0.0 as ob,0.0 as pur,0.0 as res_,0.0 as sales,0.0 as out_,sum((s2.units1 * -1)) as break,0.0 as insp,l.parent as lparent,p.location  as pcat from products p join stockdiary  s2 on p.id=s2.product1 and s2.reason1=-3 join locations l on p.location=l.id  where datenew < ?  group by p.name,pid,cat,lparent,pcat "+
                                                 " union all select p.id as pid,p.name as pdtname,p.location as cat,0.0 as ob,0.0 as pur,0.0 as res_,0.0 as sales,0.0 as out_,0.0 as break,sum(s2.units1 ) as insp,l.parent as lparent,p.location  as pcat from products p join stockdiary  s2 on p.id=s2.product1 and s2.reason1=5 join locations l on p.location=l.id  where datenew < ? group by p.name,p.id,cat,lparent,pcat ) as stk  group by pdtname,pid,cat,lparent,pcat order by lparent "
                                                 , new SerializerWriteBasic(new Datas[]{Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP,Datas.TIMESTAMP})
                                                 , new SerializerReadBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING,Datas.DOUBLE,Datas.DOUBLE,Datas.DOUBLE,Datas.DOUBLE,Datas.DOUBLE,Datas.DOUBLE,Datas.DOUBLE,Datas.STRING,Datas.STRING})
                                                 ).list(new Object[]{date,date,date,date,date,date,date});


                     //for(Object[] obj : stkDiaryList)
                     //loop throgh the stkDiaryList calculate the stockqty for each product and add it to a map(pdtStkFromStrkDiary)(key-productid , value-stkqty)
                                  //   String product= String.valueOf(objtemp[0]);
                     //stock value
	//double value=Double.parseDouble(objtemp[3].toString())+Double.parseDouble(objtemp[4].toString())+Double.parseDouble(objtemp[5].toString())+Double.parseDouble(objtemp[6].toString())+Double.parseDouble(objtemp[7].toString())-Double.parseDouble(objtemp[8].toString())+Double.parseDouble(objtemp[9].toString());

            }
            Double stDiaryqty = null;
            for(CurrentStockDetails csDetail : list){
                if(pdtStkFromStrkDiary.size()>0){
                    stDiaryqty = pdtStkFromStrkDiary.get(csDetail.getPid());
                    csDetail.setQty(stDiaryqty);
                }else{
                    csDetail.setQty(0.0);
                }
                if(csDetail.getParentPdt()==null){
                     createStockReportObj( csDetail, locations, map);
                }else{
                    stockReport = map.get(csDetail.getParentPdt());
                    if(stockReport != null){
                        stockReport.setQty(stockReport.getQty() + ((csDetail.getQty() * csDetail.getDestQty())/csDetail.getSrcQty()));
                        location = csDetail.getLocation();
                        if(location == null)
                            location = "UNKNOWN";
                        Double existingqty = stockReport.getDependentCat().get(location);
                        if(existingqty == null)
                            existingqty=0.0;
                        stockReport.getDependentCat().put(location, ((csDetail.getQty() * csDetail.getDestQty())/csDetail.getSrcQty())+existingqty);
                       locations.add(location);
                    }else{
                        createStockReportObj( csDetail, locations, map);
                    }
                }
            }
            List<ProductStock> pdtStock= null;
            if(date==null){
               pdtStock=new PreparedSentence(m_App.getSession(), "SELECT PDT.ID,PDT.NAME,PDT.LOCATION,COALESCE(Pj.RATE,0.0),COALESCE(Pj.QTY,0.0) FROM  PURCHASEJOURNALMAIN P join purchasejournal pj on p.id=pj.parent  RIGHT OUTER JOIN PRODUCTS PDT ON Pj.ITEM=PDT.ID  JOIN LOCATIONS L ON PDT.LOCATION=L.ID AND L.PARENT IS NULL AND L.STOCK=TRUE  ORDER BY PDT.NAME,P.CRDATE DESC "
                           , null
                           , new SerializerReadClass(ProductStock.class)).list();
            }else{
                 pdtStock=new PreparedSentence(m_App.getSession(), "SELECT PDT.ID,PDT.NAME,PDT.LOCATION,COALESCE(Pj.RATE,0.0),COALESCE(Pj.QTY,0.0) FROM  PURCHASEJOURNALMAIN P join purchasejournal pj on p.id=pj.parent  RIGHT OUTER JOIN PRODUCTS PDT ON Pj.ITEM=PDT.ID  JOIN LOCATIONS L ON PDT.LOCATION=L.ID AND L.PARENT IS NULL AND L.STOCK=TRUE AND P.DATE < ?  ORDER BY PDT.NAME,P.CRDATE DESC "
                           , new SerializerWriteBasic(new Datas[]{Datas.TIMESTAMP})
                           , new SerializerReadClass(ProductStock.class)).list(new Object[]{date});
           }

        // contains products inpurchases
        Map<String,List<ProductStock>> pdtMap=new HashMap<String, List<ProductStock>>();
        //group inpurchases by product
        List<ProductStock> pjlist= null;
        for(ProductStock p:pdtStock){
            pjlist=pdtMap.get(p.getProductID());
            if(pjlist==null){
               pjlist=new ArrayList<ProductStock>();
            }
            pjlist.add(p);
            pdtMap.put(p.getProductID(), pjlist);
        }
         Collection<StockReport> srList =  map.values();
         List<StockReport> finalList = new ArrayList<StockReport>();
        double qty=0.0;
        double value=0.0;
        for(StockReport element: srList){
             if(element.getQty()>0){
                 qty = element.getQty();
                 value=0.0;
                 pjlist = pdtMap.get(element.getPid());
                 if(pjlist != null){
                 for(ProductStock ps : pjlist){
                    if(qty > 0){
                         if(qty >= ps.getProductQty()){
                             value = value + (ps.getProductQty() * ps.getProductRate() );
                             qty = qty - ps.getProductQty();
                         }else{
                             value = value + (qty * ps.getProductRate() );
                             break;
                         }
                     }else{
                       break;
                     }
                 }
                 }
                element.setValue(value);
                finalList.add(element);
             }
         }
                 generateReport( locations ,finalList);
        } catch (BasicException ex) {
         ex.printStackTrace();
              }
    }

    private void generateReport(Set<String> locations ,List<StockReport> stockReport){
        try {
            FastReportBuilder drb = new FastReportBuilder();
            drb = drb.addColumn("ProductName", "name", String.class.getName(),30);
            for(String loc :locations){
                drb = drb.addColumn(loc, loc, String.class.getName(),10);
            }
            drb = drb.addColumn("Total Qty", "total", String.class.getName(),10);
            drb = drb.addColumn("Total Value", "value", Double.class.getName(),20);
            drb.setTitle("Current Stock value");
            drb.setUseFullPageWidth(true);
            DynamicReport dr = drb.build();
            JRDataSource ds = new DataSourceForCurrentStockReport(stockReport); 
            JasperPrint jp = DynamicJasperHelper.generateJasperPrint(dr, new ClassicLayoutManager(), ds);
            JasperViewer.viewReport(jp,false);    //finally display the report report
        } catch (JRException ex) {
            Logger.getLogger(CurrentStockValue.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ColumnBuilderException ex) {
            Logger.getLogger(CurrentStockValue.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
           Logger.getLogger(CurrentStockValue.class.getName()).log(Level.SEVERE, null, ex);
        }
  }
   public class StockReport implements Comparable{
      private String pid;
      private String pName;
      private Double qty;
      private Double value;
        Map<String,Double>dependentCat;
        
        public StockReport(){
          dependentCat = new HashMap<String, Double>();
          qty=0.0;
          value=0.0;
        }

        public double getValue() {
            return value;
        }

        public void setValue(double value) {
            this.value = value;
        }

        public Map<String, Double> getDependentCat() {
            return dependentCat;
        }

        public void setDependentCat(Map<String, Double> dependentCat) {
            this.dependentCat = dependentCat;
        }

        public String getpName() {
            return pName;
        }

        public void setpName(String pName) {
            this.pName = pName;
        }

        public String getPid() {
            return pid;
        }

        public void setPid(String pid) {
            this.pid = pid;
        }

        public Double getQty() {
            return qty;
        }

        public void setQty(Double qty) {
            this.qty=qty;
        }

        public int compareTo(Object o) {
             StockReport detail = (StockReport) o;
            return detail.getpName().compareTo(pName);
        }
 }
    public static class CurrentStockDetails implements SerializableRead{
        //P.ID,P.NAME,P.LOCATION,S.UNITS,C.PRODUCTFST,C.NOFST,C.NOSEC
        private String pid;
        private String pName;
        private String location;
        private Double qty;
        private String parentPdt;
        private Double destQty;
        private Double srcQty;

        public Double getDestQty() {
            return destQty;
        }

        public void setDestQty(Double destQty) {
            this.destQty = destQty;
        }

       public String getLocation()
       {
           return location;
       }

        public void setLocation(String location) {
            this.location = location;
        }

        public String getpName() {
            return pName;
        }

        public void setpName(String pName) {
            this.pName = pName;
        }

        public String getParentPdt() {
            return parentPdt;
        }

        public void setParentPdt(String parentPdt) {
            this.parentPdt = parentPdt;
        }

        public String getPid() {
            return pid;
        }

        public void setPid(String pid) {
            this.pid=pid;
        }

        public double getQty() {
            return qty;
        }

        public void setQty(Double qty) {
           this.qty=qty;
        }

        public Double getSrcQty() {
           return srcQty;
        }

        public void setSrcQty(double srcQty) {
           this.srcQty=srcQty;
        }

        public void readValues(DataRead dr) throws BasicException {
            pid = dr.getString(1);
            pName = dr.getString(2);
            location = dr.getString(3);
            if(dr.getDouble(4) != null)
                qty = dr.getDouble(4);
            else
                qty = 0.0;
            parentPdt = dr.getString(5);
            if(dr.getDouble(6) != null)
                destQty = dr.getDouble(6);
            else
                destQty = 0.0;
            if(dr.getDouble(7) != null)
                srcQty = dr.getDouble(7);
            else
                srcQty=0.0;
        }
    }
 }
