
package com.openbravo.pos.inventory;

import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryException;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

import com.openbravo.format.Formats;
import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.user.EditorRecord;
import com.openbravo.data.user.DirtyManager;
import com.openbravo.pos.Accounts.AccountMasterExt;
import com.openbravo.pos.Accounts.AccountReports.Comboboxlistenner;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.JPanelView;
import com.openbravo.pos.forms.LookupUtilityImpl;
import java.awt.event.KeyAdapter;
import javax.swing.text.JTextComponent;

public class TaxCustCategoriesEditor extends JPanel implements EditorRecord,JPanelView, BeanFactoryApp {
    
    private Object m_oId;
    private ComboBoxValModel accmodel;
     private DataLogicFacilities dlfac;
     private AppView app;
     private JTextComponent editor;
    
    /** Creates new form taxEditor */
    public TaxCustCategoriesEditor(DirtyManager dirty) {
        initComponents();
         dlfac = (DataLogicFacilities) LookupUtilityImpl.getInstance(null).getAppView().getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");


        m_jName.getDocument().addDocumentListener(dirty);
        account.addActionListener(dirty);
        activate();
        
        writeValueEOF();
    }
    public void writeValueEOF() {
        activate();
        m_oId = null;
        m_jName.setText(null);
        m_jName.setEnabled(false);
        //jTextField1.setText(null);
        //jTextField1.setEnabled(false);
        //sameer:added account combo box
        accmodel.setSelectedKey(null);
        account.setEnabled(true);
    }
    public void writeValueInsert() {
        m_oId = null;
        m_jName.setText(null);
        m_jName.setEnabled(true);
        //jTextField1.setText(null);
        //jTextField1.setEnabled(true);
         accmodel.setSelectedKey(null);
        account.setEnabled(true);

    }
    public void writeValueDelete(Object value) {

        Object[] taxcustcat = (Object[]) value;
        m_oId = taxcustcat[0];
        m_jName.setText(Formats.STRING.formatValue(taxcustcat[1]));
        m_jName.setEnabled(false);
        accmodel.setSelectedKey(taxcustcat[2]);
        account.setEnabled(false);
        //jTextField1.setEnabled(false);
        account.setEnabled(false);

    }    
    public void writeValueEdit(Object value) {

        Object[] taxcustcat = (Object[]) value;
        activate();
        m_oId = taxcustcat[0];
        m_jName.setText(Formats.STRING.formatValue(taxcustcat[1]));
        m_jName.setEnabled(true);
        accmodel.setSelectedKey(taxcustcat[2]);
        account.setEnabled(true);
        

    }

    public Object createValue() throws BasicException {
        
        Object[] taxcustcat = new Object[3];

        taxcustcat[0] = m_oId == null ? UUID.randomUUID().toString() : m_oId;
        taxcustcat[1] = m_jName.getText();
        if(account.getSelectedItem()!=null){
            taxcustcat[2] = ((AccountMasterExt)accmodel.getSelectedItem()).getid().toString();
        }
        System.out.println(account.getSelectedItem() + "----selec");
        

        return taxcustcat;
    }    
     
    public JComponent getComponent() {
        return this;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        m_jName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        account = new javax.swing.JComboBox();

        setLayout(null);

        jLabel2.setText(AppLocal.getIntString("Label.Name")); // NOI18N
        add(jLabel2);
        jLabel2.setBounds(20, 20, 80, 14);
        add(m_jName);
        m_jName.setBounds(100, 20, 200, 20);

        jLabel1.setText("Account");
        add(jLabel1);
        jLabel1.setBounds(20, 50, 70, 20);

        add(account);
        account.setBounds(100, 50, 200, 20);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox account;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField m_jName;
    // End of variables declaration//GEN-END:variables

    public String getTitle() {
        return null;
    }
    public void activate()  {
        try {
            accmodel = new ComboBoxValModel(dlfac.getaccounts());
            account.setModel(accmodel);
//        editor = (JTextComponent) account.getEditor().getEditorComponent();
//        editor.setText(null);
//        editor.addKeyListener(new Comboboxlistenner());
            account.setEditable(true);
            account.setEnabled(true);
        } catch (BasicException ex) {
            ex.printStackTrace();
        }
        
    }

    public boolean deactivate() {
        return true;
    }



    public void init(AppView app) throws BeanFactoryException {
        this.app = app;
         accmodel = new ComboBoxValModel();

    }

    public Object getBean() {
        return this;
    }
//    public class Comboboxlistenner extends KeyAdapter {
//
//        @Override
//        public void keyReleased(KeyEvent e) {
//             try {
//                //!e.getKeyText(e.getKeyCode()).equals("Enter")
//                String text = editor.getText();
//                if (isAlpha(String.valueOf(e.getKeyChar())) || e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {//|| !e.getKeyText(e.getKeyCode()).equals("Backspace")){
//                    accmodel = new ComboBoxValModel(dlfac.getsubAccounts1(text.toUpperCase()));
//                    account.setModel(accmodel);
//                    editor.setText(text);
//                    account.showPopup();
//                } else if (e.getKeyCode() == KeyEvent.VK_ENTER) {
//                    if (accmodel.getSize() <= 0) {
//                        editor.setText(null);
//                    }
//                }
//            } catch (Exception e1) {
//                e1.printStackTrace();
//            }
//        }
//
//
//    }
    private boolean isAlpha(String s) {
        s = s.toUpperCase();
        for (int i = 0; i < s.length(); i++) {
            int c = (int) s.charAt(i);
            if ((c < 65 || c > 90) && (c < 47 || c > 58)) {
                return false;
            }
        }
        return true;
    }

}
