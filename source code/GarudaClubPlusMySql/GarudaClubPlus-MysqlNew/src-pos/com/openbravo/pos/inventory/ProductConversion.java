/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.inventory;

import com.openbravo.basic.BasicException;
import com.openbravo.data.gui.ComboBoxValModel;
import com.openbravo.data.gui.MessageInf;
import com.openbravo.data.gui.TableRendererBasic;
import com.openbravo.data.loader.DataParams;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.LocalRes;
import com.openbravo.data.loader.PreparedSentence;
import com.openbravo.data.loader.SentenceExec;
import com.openbravo.data.loader.SentenceList;
import com.openbravo.data.loader.SerializerRead;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerReadClass;
import com.openbravo.data.loader.SerializerReadInteger;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerWriteParams;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.Session;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.format.Formats;
import com.openbravo.pos.Accounts.waitDialog;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.DataLogicSales;
import com.openbravo.pos.forms.DataLogicSystem;
import com.openbravo.pos.forms.JPanelView;
import com.openbravo.pos.forms.LookupUtilityImpl;
import com.openbravo.pos.ticket.ProductInfoExt;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author user
 */
public class ProductConversion extends javax.swing.JPanel implements JPanelView,BeanFactoryApp {

    /**
     * Creates new form ProductConversion
     */
     private AppView m_App;
   
    
    private DataLogicSystem m_dlSystem;
    //private SentenceList m_sentpdt1;
    //private SentenceList m_sentpdt2;
    private List<ProductInfoExt> m_sentpdt1;
    private List<ProductInfoExt> m_sentpdt2;
    
    private List<ProductInfoExt> m_sentpdt4;
    private ComboBoxValModel m_ProductModel1;
    private ComboBoxValModel m_ProductModel2;
    private DataLogicSales dlSales = null;
    private PdtConversionTable pdtconverion;
    private ComboBoxValModel m_LocationModel1;
    private ComboBoxValModel m_LocationModelW2;
    private ComboBoxValModel m_LocationModel2;
    private ComboBoxValModel m_LocationModelW22;
    private SentenceList m_selLoc;
    private String loc1;
    private String loc2;
     private String loc3;
    private String loc4;
    private Session s;
     private waitDialog w;
    private PdtConversionTable pdtconverion1;
    
    public ProductConversion() {
        initComponents();
    }
     public void init(AppView app) throws BeanFactoryException {
       m_App = app;
       s = app.getSession();
       m_dlSystem = (DataLogicSystem) m_App.getBean("com.openbravo.pos.forms.DataLogicSystemCreate");
        dlSales = (DataLogicSales) m_App.getBean("com.openbravo.pos.forms.DataLogicSalesCreate");
        //m_sentpdt = dlSales.getProductList();
       m_selLoc = dlSales.getLocationsList();
       
        try {
            //m_ProductModel1 = new ComboBoxValModel(m_sentpdt.list());
            //m_ProductModel2 = new ComboBoxValModel(m_sentpdt.list());
            m_LocationModel1 = new ComboBoxValModel(m_selLoc.list());
            m_LocationModelW2 = new ComboBoxValModel(m_selLoc.list());
            //m_LocationModel2 = new ComboBoxValModel(m_selLoc.list());
            
        } catch (Exception e) {
            e.printStackTrace();
        }

      
        //productlist1.setModel(m_ProductModel1);
        //productlist2.setModel(m_ProductModel2);
        location1.setModel(m_LocationModel1);
        location3.setModel(m_LocationModelW2);
        //location2.setModel(m_LocationModel2);
      
        location1.setEnabled(true);
        location3.setEnabled(true);
        //location2.setEnabled(true);
    }
    public void activate() throws BasicException {
      reset();
      reset1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel16 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        location1 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        location2 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        location3 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        location4 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        locationOneProductsList = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        pConverted = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        pNeedToConvert = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        totalProductsinW2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pdtcontable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        productlist1 = new javax.swing.JComboBox();
        productlist2 = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        pdtunittype1 = new javax.swing.JTextField();
        pdtunittype2 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        pdtqty1 = new javax.swing.JTextField();
        pdtqty2 = new javax.swing.JTextField();
        add = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pdtcontable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        jLabel16.setText("jLabel16");

        jLabel1.setText("Warehouse One");

        jLabel6.setText("Location 1:");

        location1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                location1ItemStateChanged(evt);
            }
        });
        location1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                location1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Location 2:");

        location2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                location2ItemStateChanged(evt);
            }
        });

        jLabel2.setText("Warehouse Two");

        jLabel8.setText("Location 1:");

        location3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                location3ItemStateChanged(evt);
            }
        });
        location3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                location3ActionPerformed(evt);
            }
        });

        jLabel9.setText("Location 2:");

        location4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                location4ItemStateChanged(evt);
            }
        });

        jButton1.setText("Convert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Total Products in Coversion List");

        jLabel4.setText("Products Already Converted");

        jLabel5.setText("Remaining Products ");

        jLabel10.setText("Total Products In Warehouse");

        jButton2.setText("Click Here to See Already Converted Products");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Convert remaining");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(location1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(location2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(location3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(location4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabel10))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(pConverted)
                                .addComponent(pNeedToConvert)
                                .addComponent(totalProductsinW2, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)))))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(locationOneProductsList, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(447, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(location1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(location2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(locationOneProductsList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(location3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(location4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(pConverted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(pNeedToConvert, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(totalProductsinW2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(269, Short.MAX_VALUE))
        );

        jButton1.setVisible(false);
        jLabel3.setVisible(false);
        locationOneProductsList.setEditable(false);
        locationOneProductsList.setVisible(false);
        locationOneProductsList.setText(null);
        jLabel4.setVisible(false);
        pConverted.setEditable(false);
        pConverted.setVisible(false);
        pConverted.setText(null);
        jLabel5.setVisible(false);
        pNeedToConvert.setVisible(false);
        pNeedToConvert.setEditable(false);
        pNeedToConvert.setText(null);
        jLabel10.setVisible(false);
        totalProductsinW2.setEditable(false);
        totalProductsinW2.setVisible(false);
        totalProductsinW2.setText(null);
        jButton2.setVisible(false);
        jButton3.setVisible(false);

        jTabbedPane1.addTab("Convert", jPanel1);

        pdtcontable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(pdtcontable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 882, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("List", jPanel2);

        jPanel3.setLayout(null);

        productlist1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                productlist1ItemStateChanged(evt);
            }
        });
        jPanel3.add(productlist1);
        productlist1.setBounds(120, 60, 210, 20);

        productlist2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                productlist2ItemStateChanged(evt);
            }
        });
        jPanel3.add(productlist2);
        productlist2.setBounds(120, 100, 210, 20);

        jLabel11.setText("From Warehouse");
        jPanel3.add(jLabel11);
        jLabel11.setBounds(10, 60, 90, 20);

        jLabel12.setText("To Warehouse");
        jPanel3.add(jLabel12);
        jLabel12.setBounds(10, 100, 90, 20);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Prd.Name");
        jPanel3.add(jLabel13);
        jLabel13.setBounds(110, 30, 80, 14);

        pdtunittype1.setEditable(false);
        jPanel3.add(pdtunittype1);
        pdtunittype1.setBounds(380, 60, 50, 20);

        pdtunittype2.setEditable(false);
        jPanel3.add(pdtunittype2);
        pdtunittype2.setBounds(380, 100, 50, 20);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Unit Type");
        jPanel3.add(jLabel14);
        jLabel14.setBounds(370, 30, 60, 14);
        jPanel3.add(pdtqty1);
        pdtqty1.setBounds(450, 60, 50, 20);
        jPanel3.add(pdtqty2);
        pdtqty2.setBounds(450, 100, 50, 20);

        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        jPanel3.add(add);
        add.setBounds(430, 140, 70, 23);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Ratio");
        jPanel3.add(jLabel15);
        jLabel15.setBounds(450, 30, 40, 14);

        pdtcontable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(pdtcontable1);

        jPanel3.add(jScrollPane1);
        jScrollPane1.setBounds(10, 190, 750, 340);

        jButton4.setText("Deactivate");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4);
        jButton4.setBounds(610, 550, 150, 23);

        jButton5.setText("Load");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton5);
        jButton5.setBounds(220, 140, 70, 23);

        jButton6.setText("Cancel");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton6);
        jButton6.setBounds(453, 550, 150, 23);

        jTabbedPane1.addTab("tab3", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 907, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 39, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void location1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_location1ItemStateChanged
        // TODO add your handling code here:
reset1();
        Object loct1 = location1.getSelectedItem();
        if (loct1 != null) {
            String selectedItem = loct1.toString();
            //String[] temparr = selectedItem.split(" - ");
            try {
                Object[] obj1 = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM LOCATIONS WHERE NAME = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(selectedItem);
                if (obj1 != null) {
                    if (obj1[0] != null) {
                        loc1 = obj1[0].toString();
                        List<LocationInfo> list = (List<LocationInfo>) dlSales.getLocationsInfoByParent(loc1);
                        m_LocationModel2 = new ComboBoxValModel(list);
                        location2.setModel(m_LocationModel2);
                        location2.setEnabled(true);
                        System.out.println(loc1);
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_location1ItemStateChanged

    private void location1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_location1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_location1ActionPerformed

    private void location2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_location2ItemStateChanged
       reset1();
        Object loct2 = location2.getSelectedItem();
        Object loct1 = location1.getSelectedItem();
        if (loct2 != null && loct1!=null) {
            String selectedItem = loct2.toString();
            String selectedItem0 = loct1.toString();
            //String[] temparr = selectedItem.split(" - ");
            try {
                Object[] obj1 = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM LOCATIONS WHERE NAME = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(selectedItem);
                Object[] obj2 = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM LOCATIONS WHERE NAME = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(selectedItem0);
                if (obj1 != null && obj2!=null) {
                    if (obj1[0] != null &&obj2[0] != null ) {
                        
                        String l1 = obj2[0].toString();
                          String l2 = obj1[0].toString(); 
                          loc2 = l2;
                          
                         // SELECT COUNT(ID) FROM CONVERTER WHERE LOCATIONFST = ? AND LOCATIONSCN = ?
                        int x = (Integer) new StaticSentence(m_App.getSession(), "SELECT COUNT(ID) FROM CONVERTER WHERE LOCATIONFST = ? AND LOCATIONSCN = ? AND ACTIVE IS TRUE", new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING}), SerializerReadInteger.INSTANCE).find(new Object[]{l1,l2});
                        
                       
                               locationOneProductsList.setText(x+"");
                               locationOneProductsList.setVisible(true);
                               jLabel3.setVisible(true);
                         
                       System.out.println("Location One  = " +l1 + " Location Two = " + l2 );
                    }
                }
               

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_location2ItemStateChanged

    private void location3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_location3ItemStateChanged
Object loct1 = location3.getSelectedItem();
        if (loct1 != null) {
            String selectedItem = loct1.toString();
            //String[] temparr = selectedItem.split(" - ");
            try {
                Object[] obj1 = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM LOCATIONS WHERE NAME = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(selectedItem);
                if (obj1 != null) {
                    if (obj1[0] != null) {
                        loc3 = obj1[0].toString();
                        List<LocationInfo> list = (List<LocationInfo>) dlSales.getLocationsInfoByParent(loc3);
                        m_LocationModelW22 = new ComboBoxValModel(list);
                        location4.setModel(m_LocationModelW22);
                        location4.setEnabled(true);
                        System.out.println(loc3);
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }       
    }//GEN-LAST:event_location3ItemStateChanged

    private void location3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_location3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_location3ActionPerformed

    private void location4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_location4ItemStateChanged
        propertyChange();
        
    }//GEN-LAST:event_location4ItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        pdtcontable.setModel(pdtconverion.getPdtConversionModel());

        TableColumnModel jColumns = pdtcontable.getColumnModel();
        jColumns.getColumn(0).setPreferredWidth(200);
        jColumns.getColumn(0).setResizable(false);
        jColumns.getColumn(1).setPreferredWidth(50);
        jColumns.getColumn(1).setResizable(false);
        jColumns.getColumn(2).setPreferredWidth(200);
        jColumns.getColumn(2).setResizable(false);
        jColumns.getColumn(3).setPreferredWidth(50);
        jColumns.getColumn(3).setResizable(false);
        jColumns.getColumn(4).setPreferredWidth(80);
        jColumns.getColumn(4).setResizable(false);
        jColumns.getColumn(5).setPreferredWidth(80);
        jColumns.getColumn(5).setResizable(false);
        jColumns.getColumn(6).setPreferredWidth(80);
        jColumns.getColumn(6).setResizable(false);  
        jColumns.getColumn(7).setPreferredWidth(00);
        jColumns.getColumn(7).setResizable(false);
        jTabbedPane1.setEnabledAt(1, true);
        jTabbedPane1.setSelectedIndex(1);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        w = new waitDialog(new JFrame(), true);    
        int h = w.getSize().height;
            int w1 = w.getSize().width;
            Toolkit toolkit = Toolkit.getDefaultToolkit();
            Dimension scrnsize = toolkit.getScreenSize();
            w.setLocation(scrnsize.width / 2 - w1, scrnsize.height / 2 - h);        
        
        Thread t = new Thread(new Runnable() {

                public void run() {
                    try {
             m_sentpdt4 =   dlSales.getProductList(loc4);
            String ref1=null,ref2=null, ref3=null, ref4 = null;
             Object[] a = (Object[]) new StaticSentence(m_App.getSession(), "SELECT PREFIX FROM LOCATIONS WHERE ID = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(loc1);
             Object[] b = (Object[]) new StaticSentence(m_App.getSession(), "SELECT PREFIX FROM LOCATIONS WHERE ID = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(loc2);
             Object[] c = (Object[]) new StaticSentence(m_App.getSession(), "SELECT PREFIX FROM LOCATIONS WHERE ID = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(loc3);
            Object[] d = (Object[]) new StaticSentence(m_App.getSession(), "SELECT PREFIX FROM LOCATIONS WHERE ID = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(loc4);
             if(a!=null && a[0]!=null)
             {
                 ref1 = a[0].toString();
             }
             if(b!=null && b[0]!=null)
             {
                 ref2 = b[0].toString();
             }
             if(c!=null && c[0]!=null)
             {
                 ref3 =c[0].toString();
             }
             if(d!=null && d[0]!=null)
             {
                 ref4 = d[0].toString();
             }
            
             
             for (Iterator<ProductInfoExt> it = m_sentpdt4.iterator(); it.hasNext();) {
                 ProductInfoExt productInfoExt = it.next();
                 
                 if((Integer) new StaticSentence(m_App.getSession(), "SELECT COUNT(ID) FROM CONVERTER WHERE LOCATIONFST = ? AND LOCATIONSCN = ? AND PRODUCTSCN =? AND ACTIVE IS TRUE", new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING}), SerializerReadInteger.INSTANCE).find(new Object[]{loc3,loc4, productInfoExt.getID()})<=0 && ref4!=null)
                 {
                 
                 String r4 = productInfoExt.getReference();
                 r4 = r4.replaceAll(ref4, "");
                 r4 = "%"+r4;
                // Object[] fp = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM PRODUCTS WHERE REFERENCE LIKE ? AND LOCATION = ?", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING})).find(new Object[]{r4, loc1});
                 Object[] sp = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM PRODUCTS WHERE REFERENCE LIKE ? AND LOCATION = ?", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING})).find(new Object[]{r4, loc2});
                 
                 
                 
                 if(/*fp!=null && fp[0]!=null &&*/sp!=null && sp[0]!=null )
                 {
                   //  final String pid = fp[0].toString();
                     final String spid = sp[0].toString();
                     final String nPid = productInfoExt.getID();
                     Object[] z = (Object[]) new StaticSentence(m_App.getSession(), "SELECT NOFST, NOSEC,PRODUCTFST FROM CONVERTER WHERE locationfst =? AND locationscn = ? AND PRODUCTSCN =? AND ACTIVE = TRUE", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING,Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.DOUBLE,Datas.DOUBLE,Datas.STRING})).find(new Object[]{loc1,  loc2, sp[0].toString()});
                     if(z!=null)
                     {
                         
                         final double NOFST = (Double) z[0];
                         final double NOSEC =(Double) z[1];
                         final String pid = z[2].toString();
                         SentenceExec unitInsert = new PreparedSentence(LookupUtilityImpl.getInstance(null).getAppView().getSession(), "INSERT INTO CONVERTER(ID,LOCATIONFST,PRODUCTFST,NOFST,LOCATIONSCN,PRODUCTSCN,NOSEC,CREATEDDATE,USER_,ACTIVE) VALUES(?,?,?,?,?,?,?,?,?,?)", SerializerWriteParams.INSTANCE);
                                unitInsert.exec(new DataParams() {

                                    public void writeValues() throws BasicException {
                                        setString(1, UUID.randomUUID().toString());
                                        setString(2, loc3);
                                        setString(3, pid);
                                        setDouble(4, NOFST);
                                        setString(5, loc4);
                                        setString(6, nPid);
                                        setDouble(7, NOSEC );
                                        setTimestamp(8, new Date());
                                        setString(9, m_App.getAppUserView().getUser().getName().toString());
                                        setBoolean(10, true);
                                    }
                                });

                     }
                     
                     
                 }
                 
                

             }}
             
         w.hideDialog();
         
         
             
         } catch (BasicException ex) {
             w.hideDialog();
             Logger.getLogger(ProductConversion.class.getName()).log(Level.SEVERE, null, ex);
             MessageInf msg = new MessageInf(MessageInf.SGN_NOTICE, LocalRes.getIntString("message.nosave"), ex);
                 msg.show(null);
         }
                }
            });
        try{
        t.start();
        w.showDialog("Please wait. Inserting in to DataBase...");
        }
        catch(Exception ex)
        {
             w.hideDialog();
             Logger.getLogger(ProductConversion.class.getName()).log(Level.SEVERE, null, ex);
             MessageInf msg = new MessageInf(MessageInf.SGN_NOTICE, LocalRes.getIntString("message.nosave"), ex);
                 msg.show(null);
        }
    
        
        propertyChange();
       JOptionPane.showMessageDialog(this, "Conversion Completed", "Completed", JOptionPane.INFORMATION_MESSAGE);
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         try {
             
            
             refresh();
             
             jTabbedPane1.setEnabledAt(2, true);
             jTabbedPane1.setSelectedIndex(2);
             
             
             /* int h = w.getSize().height;
                 int w1 = w.getSize().width;
                 Toolkit toolkit = Toolkit.getDefaultToolkit();
                 Dimension scrnsize = toolkit.getScreenSize();
                 w.setLocation(scrnsize.width / 2 - w1, scrnsize.height / 2 - h);        
             
             Thread t = new Thread(new Runnable() {

          public void run() {
              try
              {
                  String ref1=null,ref2=null, ref3=null, ref4 = null;
                  Object[] a = (Object[]) new StaticSentence(m_App.getSession(), "SELECT PREFIX FROM LOCATIONS WHERE ID = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(loc1);
                  Object[] b = (Object[]) new StaticSentence(m_App.getSession(), "SELECT PREFIX FROM LOCATIONS WHERE ID = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(loc2);
                  Object[] c = (Object[]) new StaticSentence(m_App.getSession(), "SELECT PREFIX FROM LOCATIONS WHERE ID = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(loc3);
                 Object[] d = (Object[]) new StaticSentence(m_App.getSession(), "SELECT PREFIX FROM LOCATIONS WHERE ID = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(loc4);
                  if(a!=null && a[0]!=null)
                  {
                      ref1 = a[0].toString();
                  }
                  if(b!=null && b[0]!=null)
                  {
                      ref2 = b[0].toString();
                  }
                  if(c!=null && c[0]!=null)
                  {
                      ref3 =c[0].toString();
                  }
                  if(d!=null && d[0]!=null)
                  {
                      ref4 = d[0].toString();
                  }
                 
                   m_sentpdt4 = dlSales.getProductList(loc4);
                   for (Iterator<ProductInfoExt> it = m_sentpdt4.iterator(); it.hasNext();) {
                      ProductInfoExt pie = it.next();
                      if((Integer) new StaticSentence(m_App.getSession(), "SELECT COUNT(ID) FROM CONVERTER WHERE LOCATIONFST = ? AND LOCATIONSCN = ? AND PRODUCTSCN =? AND ACTIVE IS TRUE", new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING}), SerializerReadInteger.INSTANCE).find(new Object[]{loc3,loc4, pie.getID()})<=0)
                      {
                          
                      String r4 = pie.getReference();
                      r4 = r4.replaceAll(ref4, "");
                      r4 = "%"+r4;
                      Object[] fp = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM PRODUCTS WHERE REFERENCE LIKE ? AND LOCATION = ?", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING})).find(new Object[]{r4, loc1});
                      Object[] sp = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM PRODUCTS WHERE REFERENCE LIKE ? AND LOCATION = ?", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING})).find(new Object[]{r4, loc2});
                      if(fp!=null && fp[0]!=null &&sp!=null && sp[0]!=null )
                      {
                          final String pid = fp[0].toString();
                          final String spid = sp[0].toString();
                          final String nPid = pie.getID();
                          Object[] z = (Object[]) new StaticSentence(m_App.getSession(), "SELECT NOFST, NOSEC FROM CONVERTER WHERE locationfst =? AND PRODUCTFST =? AND locationscn = ? AND PRODUCTSCN =? AND ACTIVE = TRUE", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING,Datas.STRING, Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.DOUBLE,Datas.DOUBLE})).find(new Object[]{loc1, fp[0].toString(), loc2, sp[0].toString()});
                          if(z!=null)
                          {
                              final double NOFST = (Double) z[0];
                              final double NOSEC =(Double) z[1];
                              SentenceExec unitInsert = new PreparedSentence(LookupUtilityImpl.getInstance(null).getAppView().getSession(), "INSERT INTO CONVERTER(ID,LOCATIONFST,PRODUCTFST,NOFST,LOCATIONSCN,PRODUCTSCN,NOSEC,CREATEDDATE,USER_,ACTIVE) VALUES(?,?,?,?,?,?,?,?,?,?)", SerializerWriteParams.INSTANCE);
                                     unitInsert.exec(new DataParams() {

                                         public void writeValues() throws BasicException {
                                             setString(1, UUID.randomUUID().toString());
                                             setString(2, loc3);
                                             setString(3, pid);
                                             setDouble(4, NOFST);
                                             setString(5, loc4);
                                             setString(6, nPid);
                                             setDouble(7, NOSEC );
                                             setTimestamp(8, new Date());
                                             setString(9, m_App.getAppUserView().getUser().getName().toString());
                                             setBoolean(10, true);
                                         }
                                     });

                          }
                          else
                          {
                              
                              
                              
                          }
                          
                          
                      }
                      
                          
                          
                          
                      }
                      
                      
                  }
                  
                  
                  w.hideDialog();
              }
              catch(Exception ex)
              {
                w.hideDialog();  
                 Logger.getLogger(ProductConversion.class.getName()).log(Level.SEVERE, null, ex);
                  MessageInf msg = new MessageInf(MessageInf.SGN_NOTICE, LocalRes.getIntString("message.nosave"), ex);
                      msg.show(null);
              }
              
              
          }
      });
              t.start();
             w.showDialog("Please wait. Inserting in to DataBase...");*/
         } catch (BasicException ex) {
            
             Logger.getLogger(ProductConversion.class.getName()).log(Level.SEVERE, null, ex);
                  MessageInf msg = new MessageInf(MessageInf.SGN_NOTICE, LocalRes.getIntString("message.nosave"), ex);
                      msg.show(null);
         }
    }//GEN-LAST:event_jButton3ActionPerformed
 private String pdtid1;
    private String pdtid2;
    private void productlist1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_productlist1ItemStateChanged
        // TODO add your handling code here:
        Object pdt1 = productlist1.getSelectedItem();
        if (pdt1 != null) {
            String selectedItem = pdt1.toString();
            String[] temparr = selectedItem.split(" - ");
            try {
                Object[] obj1 = (Object[]) new StaticSentence(m_App.getSession(), "SELECT UNITTYPE,ID FROM PRODUCTS WHERE REFERENCE = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING, Datas.STRING})).find(temparr[0]);
                if (obj1 != null) {
                    if (obj1[0] != null) {
                        Object[] obj = (Object[]) new StaticSentence(m_App.getSession(), "SELECT NAME FROM UNIT WHERE ID = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(obj1[0].toString());

                        pdtunittype1.setEnabled(true);
                        pdtunittype1.setText(obj[0].toString());
                    }
                    pdtid1 = obj1[1].toString();
                }

            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_productlist1ItemStateChanged

    private void productlist2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_productlist2ItemStateChanged
        // TODO add your handling code here:
        Object pdt2 = productlist2.getSelectedItem();
        if (pdt2 != null) {
            String selectedItem = pdt2.toString();
            String[] temparr = selectedItem.split(" - ");
            try {
                Object[] obj1 = (Object[]) new StaticSentence(m_App.getSession(), "SELECT UNITTYPE,ID FROM PRODUCTS WHERE REFERENCE = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING, Datas.STRING})).find(temparr[0]);
                if (obj1 != null) {
                    if (obj1[0] != null) {
                        Object[] obj = (Object[]) new StaticSentence(m_App.getSession(), "SELECT NAME FROM UNIT WHERE ID = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(obj1[0].toString());
                        pdtunittype2.setEnabled(true);
                        pdtunittype2.setText(obj[0].toString());
                    }
                    pdtid2 = obj1[1].toString();
                }

            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_productlist2ItemStateChanged

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        if (!pdtqty1.getText().equals(" ") && !pdtqty2.getText().equals(" ") && productlist1.getSelectedItem() != null && productlist2.getSelectedItem() != null && location3.getSelectedItem() != null && location4.getSelectedItem() != null) {
            int count1 = checkForProduct(pdtid1, loc3);
            int count2 = checkForProduct(pdtid2, loc4);
            if (count1==0 || count2==0) {
                String selecteditem1 = productlist1.getSelectedItem().toString();
                String selecteditem2 = productlist2.getSelectedItem().toString();
                final Date dnow;
                int flag = 0;
                if (selecteditem1.equals(selecteditem2)) {
                    //warning message
                    JOptionPane.showMessageDialog(this, "Both the selected item is same", "Error", JOptionPane.WARNING_MESSAGE);
                } else {
                    //   int del=pdtqty1.getText().length();
                    //   String del1=pdtqty2.getText();
                    if (!pdtqty1.getText().equals(" ") && !pdtqty2.getText().equals(" ")) {
                        try {
                            Object[] o = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM CONVERTER WHERE PRODUCTFST = ?  AND  PRODUCTSCN = ? AND LOCATIONFST=? AND ACTIVE = TRUE", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING})).find(new Object[]{pdtid1, pdtid2});

                            Object[] o1 = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM CONVERTER WHERE PRODUCTFST = ?  AND  PRODUCTSCN = ? AND LOCATIONSCN=? AND ACTIVE = TRUE", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING})).find(new Object[]{pdtid2, pdtid1});
                            dnow = new Date();

                            if (o == null && o1 == null) {

                                SentenceExec unitInsert = new PreparedSentence(LookupUtilityImpl.getInstance(null).getAppView().getSession(), "INSERT INTO CONVERTER(ID,LOCATIONFST,PRODUCTFST,NOFST,LOCATIONSCN,PRODUCTSCN,NOSEC,CREATEDDATE,USER_,ACTIVE) VALUES(?,?,?,?,?,?,?,?,?,?)", SerializerWriteParams.INSTANCE);
                                unitInsert.exec(new DataParams() {

                                    public void writeValues() throws BasicException {
                                        setString(1, UUID.randomUUID().toString());
                                        setString(2, loc1);
                                        setString(3, pdtid1);
                                        setDouble(4, Double.parseDouble(pdtqty1.getText()));
                                        setString(5, loc2);
                                        setString(6, pdtid2);
                                        setDouble(7, Double.parseDouble(pdtqty2.getText()));
                                        setTimestamp(8, dnow);
                                        setString(9, m_App.getAppUserView().getUser().getName().toString());
                                        setBoolean(10, true);
                                    }
                                });

                                pdtqty1.setText(" ");
                                pdtqty2.setText(" ");
                                pdtunittype1.setText(" ");
                                pdtunittype1.setText(" ");
                                //  productlist2.setSelectedItem("");
                                // productlist1.setSelectedItem("");
                                flag = 1;
                                productlist2.setSelectedIndex(-1);
                                productlist1.setSelectedIndex(-1);
                                location1.setSelectedIndex(-1);
                                location2.setSelectedIndex(-1);
                               refresh();
                            } else {
                                JOptionPane.showMessageDialog(this, "Products Already exist", "Cannot Insert", JOptionPane.OK_OPTION);
                                pdtqty1.setText(" ");
                                pdtqty2.setText(" ");
                                pdtunittype1.setText(" ");
                                pdtunittype1.setText(" ");
                                //  productlist2.setSelectedItem("");
                                // productlist1.setSelectedItem("");
                                flag = 1;
                                productlist2.setSelectedIndex(-1);
                                productlist1.setSelectedIndex(-1);
                                location1.setSelectedIndex(-1);
                                location2.setSelectedIndex(-1);
                            }

                        } catch (Exception e) {
                            // e.printStackTrace();
                            if (flag == 1) {
                                productlist1.setSelectedIndex(-1);
                            }
                            try {
                                refresh();
                            } catch (Exception e1) {
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Please specify the quantities", "Cannot Insert", JOptionPane.OK_OPTION);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Product already exist", "Cannot Insert", JOptionPane.OK_OPTION);

            }
        } else {
            JOptionPane.showMessageDialog(this, "Please fill the form compeletely", "Cannot Insert", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_addActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int row = pdtcontable.getSelectedRow();
        if(row!=-1){
            Boolean status = (Boolean) pdtcontable.getValueAt(row, 6);
            String pdtfst = pdtcontable.getValueAt(row, 0).toString();
            String pdtsec = pdtcontable.getValueAt(row, 2).toString();
            //String locationfst = pdtcontable.getValueAt(row, 7).toString();
            //String locationscn = pdtcontable.getValueAt(row, 8).toString();
            String cid = pdtcontable.getValueAt(row, 7).toString();//praveen;added to get id of the selected row

            if (status == true) {
                status = false;

                Datas[] datas = new Datas[]{Datas.BOOLEAN, Datas.STRING, Datas.STRING,Datas.STRING,Datas.STRING};
                try {
                    //Object[] obj1 = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM PRODUCTS WHERE NAME = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(pdtfst);
                    //Object[] obj2 = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM PRODUCTS WHERE NAME = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(pdtsec);
                    //if (obj1 != null && obj2 != null) {
                        // Object[] values = new Object[]{status, obj1[0].toString(), obj2[0].toString(),locationfst,locationscn};
                        // new PreparedSentence(m_App.getSession(), "UPDATE CONVERTER SET ACTIVE = ? WHERE PRODUCTFST = ? AND PRODUCTSCN=? AND LOCATIONFST=? AND LOCATIONSCN=?", new SerializerWriteBasicExt(datas, new int[]{0, 1, 2,3,4})).exec(values);
                        //praveen:changed above query
                        Object[] val=new Object[]{status,cid};
                        new PreparedSentence(m_App.getSession(), "UPDATE CONVERTER SET ACTIVE = ? WHERE ID=?", new SerializerWriteBasic(new Datas[]{Datas.BOOLEAN,Datas.STRING}),null).exec(val);

                        //}
                    String temp = "";
                    refresh();
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        }else{
            JOptionPane.showMessageDialog(this, "select any row","invalid action",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
 try {
             
            
             refresh();
             reloadTable();
             jTabbedPane1.setEnabledAt(2, true);
             jTabbedPane1.setSelectedIndex(2);  
              } catch (BasicException ex) {
            
             Logger.getLogger(ProductConversion.class.getName()).log(Level.SEVERE, null, ex);
                  MessageInf msg = new MessageInf(MessageInf.SGN_NOTICE, LocalRes.getIntString("message.nosave"), ex);
                      msg.show(null);
         }
       
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        reset();
    }//GEN-LAST:event_jButton6ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox location1;
    private javax.swing.JComboBox location2;
    private javax.swing.JComboBox location3;
    private javax.swing.JComboBox location4;
    private javax.swing.JTextField locationOneProductsList;
    private javax.swing.JTextField pConverted;
    private javax.swing.JTextField pNeedToConvert;
    private javax.swing.JTable pdtcontable;
    private javax.swing.JTable pdtcontable1;
    private javax.swing.JTextField pdtqty1;
    private javax.swing.JTextField pdtqty2;
    private javax.swing.JTextField pdtunittype1;
    private javax.swing.JTextField pdtunittype2;
    private javax.swing.JComboBox productlist1;
    private javax.swing.JComboBox productlist2;
    private javax.swing.JTextField totalProductsinW2;
    // End of variables declaration//GEN-END:variables

    public String getTitle() {
        return "";
    }

    

    public boolean deactivate() {
        return true;
    }

    public JComponent getComponent() {
        return this;//throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

   

    public Object getBean() {
        return this;//throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void reset1() {
        jButton3.setVisible(false);
        jButton2.setVisible(false);
        location3.setSelectedIndex(-1);
       jLabel3.setVisible(false);
       locationOneProductsList.setText(null);
       locationOneProductsList.setVisible(false);
       jButton1.setVisible(false);
       pConverted.setEditable(false);
pConverted.setVisible(false);
pConverted.setText(null);
pNeedToConvert.setVisible(false);
pNeedToConvert.setEditable(false);
pNeedToConvert.setText(null);
totalProductsinW2.setEditable(false);
totalProductsinW2.setVisible(false);
totalProductsinW2.setText(null);
locationOneProductsList.setEditable(false);
locationOneProductsList.setVisible(false);
locationOneProductsList.setText(null);
jLabel4.setVisible(false);
jLabel5.setVisible(false);
jLabel10.setVisible(false);
    }
    
    public void reset()
    {
        jTabbedPane1.setSelectedIndex(0);
        jTabbedPane1.setEnabledAt(1, false);
        jTabbedPane1.setEnabledAt(2, false);
        jButton1.setVisible(false);
        ComboBoxValModel cbv = new ComboBoxValModel(new ArrayList());
        location2.setModel(cbv);
        location4.setModel(cbv);
        location1.setSelectedIndex(-1);
        location3.setSelectedIndex(-1);
    }

    

    private void reloadTable() throws BasicException {
        
             pdtconverion1 = PdtConversionTable.loadInstance(m_App, loc3, loc4);
                  pdtcontable1.setModel(pdtconverion1.getPdtConversionModel());

                  TableColumnModel jColumns = pdtcontable1.getColumnModel();
                  jColumns.getColumn(0).setPreferredWidth(200);
                  jColumns.getColumn(0).setResizable(false);
                  jColumns.getColumn(1).setPreferredWidth(50);
                  jColumns.getColumn(1).setResizable(false);
                  jColumns.getColumn(2).setPreferredWidth(200);
                  jColumns.getColumn(2).setResizable(false);
                  jColumns.getColumn(3).setPreferredWidth(50);
                  jColumns.getColumn(3).setResizable(false);
                  jColumns.getColumn(4).setPreferredWidth(80);
                  jColumns.getColumn(4).setResizable(false);
                  jColumns.getColumn(5).setPreferredWidth(80);
                  jColumns.getColumn(5).setResizable(false);
                  jColumns.getColumn(6).setPreferredWidth(80);
                  jColumns.getColumn(6).setResizable(false);  
                  jColumns.getColumn(7).setPreferredWidth(00);
                  jColumns.getColumn(7).setResizable(false);
         
    }

    private void refresh() throws BasicException {
        
             List<ProductInfoExt> wh1 = new ArrayList<ProductInfoExt>();
                  List<ProductInfoExt> wh2 = new ArrayList<ProductInfoExt>();
                  
                  m_sentpdt1 = new StaticSentence(s,
                     "SELECT P.ID, P.REFERENCE, P.CODE, P.NAME, P.ISCOM, P.ISSCALE, P.PRICEBUY, P.PRICESELL, TC.ID, TC.NAME, P.CATEGORY, P.IMAGE, P.ATTRIBUTES, P.PRCATEGORY,P.UNITTYPE ,P.STOCKVOLUME,P.PACCOUNT,P.SACCOUNT,P.INVENTRYMAINTAIN,P.LOCATION " +
                     "FROM CATEGORIES C,PRODUCTS P LEFT OUTER JOIN TAXCATEGORIES TC ON P.TAXCAT = TC.ID WHERE P.CATEGORY  IN (SELECT ID FROM CATEGORIES WHERE PARENTID=?) GROUP BY P.ID ORDER BY P.REFERENCE", SerializerWriteString.INSTANCE, new SerializerReadClass(ProductInfoExt.class)).list(loc3);
                 m_sentpdt2 = new StaticSentence(s,
                     "SELECT P.ID, P.REFERENCE, P.CODE, P.NAME, P.ISCOM, P.ISSCALE, P.PRICEBUY, P.PRICESELL, TC.ID, TC.NAME, P.CATEGORY, P.IMAGE, P.ATTRIBUTES, P.PRCATEGORY,P.UNITTYPE ,P.STOCKVOLUME,P.PACCOUNT,P.SACCOUNT,P.INVENTRYMAINTAIN,P.LOCATION " +
                     "FROM CATEGORIES C,PRODUCTS P LEFT OUTER JOIN TAXCATEGORIES TC ON P.TAXCAT = TC.ID WHERE P.CATEGORY  IN (SELECT ID FROM CATEGORIES WHERE PARENTID=?) GROUP BY P.ID ORDER BY P.REFERENCE", SerializerWriteString.INSTANCE, new SerializerReadClass(ProductInfoExt.class)).list(loc4);
                 String ref4 = null;
                  Object[] d = (Object[]) new StaticSentence(m_App.getSession(), "SELECT PREFIX FROM LOCATIONS WHERE ID = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(loc4);
                  if(d!=null && d[0]!=null)
                       {
                           ref4 = d[0].toString();
                       }
                  
                  for (int i = 0; i < m_sentpdt2.size(); i++) {
                      ProductInfoExt pi = m_sentpdt2.get(i);
                      
                      if((Integer) new StaticSentence(m_App.getSession(), "SELECT COUNT(ID) FROM CONVERTER WHERE LOCATIONFST = ? AND LOCATIONSCN = ? AND PRODUCTSCN =? AND ACTIVE IS TRUE", new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING,Datas.STRING}), SerializerReadInteger.INSTANCE).find(new Object[]{loc3,loc4, pi.getID()})<=0)
                      {
                          wh2.add(pi);
                          String r4 = pi.getReference();
                           r4 = r4.replaceAll(ref4, "");
                           r4 = "%"+r4;
                           Object[] fp = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM PRODUCTS WHERE REFERENCE LIKE ? AND LOCATION = ?", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING})).find(new Object[]{r4, loc3});
                           if(fp!=null && fp[0]!=null)
                           {
                               String pid =  fp[0].toString().trim();
                           for (Iterator<ProductInfoExt> it = m_sentpdt1.iterator(); it.hasNext();) {
                              ProductInfoExt w1pi = it.next();
                              if(w1pi.getID().trim().equals(pid))
                              {
                                  wh1.add(w1pi);
                                  break;
                              }
                              
                          }
                      
                         }
                      }
                      
                  }
                  
                 m_ProductModel1 = new ComboBoxValModel(wh1);
                 m_ProductModel2 = new ComboBoxValModel(wh2);
                 productlist1.setModel(m_ProductModel1);
                 productlist2.setModel(m_ProductModel2);
                 reloadTable();
        
    }
    private int checkForProduct(String pdt, String location) {
        //   Object[] obj;
        try {
            Object[] obj = (Object[]) new StaticSentence(m_App.getSession(), "SELECT COUNT(*) FROM CONVERTER WHERE ACTIVE = TRUE AND (PRODUCTFST = ?  OR  PRODUCTSCN = ?) AND (LOCATIONFST=? OR LOCATIONSCN=?) ", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING, Datas.STRING}), new SerializerReadBasic(new Datas[]{Datas.STRING})).find(new Object[]{pdt, pdt, location, location});


            if (obj != null) {
                return Integer.parseInt(obj[0].toString());
            }//else

        } catch (Exception e) {
        }
        return 0;
    }

    private void propertyChange() {
         Object loct4 = location4.getSelectedItem();
        if (loct4 != null) {
            String selectedItem = loct4.toString();
            //String[] temparr = selectedItem.split(" - ");
            try {
                Object[] obj1 = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM LOCATIONS WHERE NAME = ?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(selectedItem);
                if (obj1 != null) {
                    if (obj1[0] != null) {
                        loc4 = obj1[0].toString();
                        System.out.println(loc4);
                       // int x = (Integer) new StaticSentence(m_App.getSession(), "SELECT COUNT(ID) FROM CONVERTER WHERE LOCATIONFST = ? AND LOCATIONSCN = ?", new SerializerWriteBasic(new Datas[]{Datas.STRING,Datas.STRING}), SerializerReadInteger.INSTANCE).find(new Object[]{loc3,loc4});
                        m_sentpdt4 = dlSales.getProductList(loc4);
                        
                       
                              
                               totalProductsinW2.setText(m_sentpdt4.size()+"");
                               totalProductsinW2.setVisible(true);
                               jLabel10.setVisible(true);
                               
                                        pdtconverion = PdtConversionTable.loadInstance(m_App, loc3, loc4);
                                        int alreadyConverted = pdtconverion.getProdList().size();
             
                                        pConverted.setText(alreadyConverted+"");
                                        pConverted.setVisible(true);
                                        jLabel4.setVisible(true);
                                        
                                        pNeedToConvert.setText((m_sentpdt4.size()-alreadyConverted)+"");
                                        pNeedToConvert.setVisible(true);
                                        jLabel5.setVisible(true);
                                        jButton2.setVisible(true);
                                        jButton3.setVisible(true);
                                        jButton1.setVisible(true);
                             
                    }           
                        
                }
                

            } catch (Exception e) {
                e.printStackTrace();
                MessageInf msg = new MessageInf(MessageInf.SGN_NOTICE, "Error", e);
                 msg.show(this);
            }
        }       
        
    }
}
