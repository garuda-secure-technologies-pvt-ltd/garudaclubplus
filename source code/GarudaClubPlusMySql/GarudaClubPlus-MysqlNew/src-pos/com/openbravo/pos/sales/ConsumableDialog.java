/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConsumableDialog.java
 *
 * Created on 23-Jan-2012, 13:57:31
 */
package com.openbravo.pos.sales;

import com.openbravo.basic.BasicException;
import com.openbravo.pos.forms.AppView;
import com.openbravo.data.gui.MessageInf;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerReadClass;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.pos.customers.CustomerInfo;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.DataLogicSales;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Window;
import javax.swing.JFrame;
import com.openbravo.pos.inventory.JInventoryLines;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumnModel;
import org.omg.CORBA.DATA_CONVERSION;

/**
 *
 * @author user
 */
public class ConsumableDialog extends javax.swing.JDialog {

    private JInventoryLines m_invlines;
    private AppView app;
    private Consumable consumable;
    private List<Consumable> consu;
    private ConsumableTableModel ctmodel;
    private Boolean loaded = false;
    private DataLogicReceipts dlrec;
    private int typeofBiling;

    public Boolean getLoaded() {
        return loaded;
    }

    public void setLoaded(Boolean loaded) {
        this.loaded = loaded;
    }

    public Consumable getConsumable() {
        return consumable;
    }

    public void setConsumable(Consumable consumable) {
        this.consumable = consumable;
    }

    /** Creates new form ConsumableDialog */
    public ConsumableDialog(Frame parent, AppView app) {
        super(parent, true);
        this.app = app;
        initComponents();
    }

    public ConsumableDialog(Dialog parent, AppView app) {
        super(parent, true);
        this.app = app;
        initComponents();
    }

    protected ConsumableDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    protected ConsumableDialog(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    protected static Window getWindow(Component parent) {
        if (parent == null) {
            return new JFrame();
        } else if (parent instanceof Frame || parent instanceof Dialog) {
            return (Window) parent;
        } else {
            return getWindow(parent.getParent());
        }
    }

    public static ConsumableDialog getDialog(Component parent, AppView app) {

        Window window = getWindow(parent);

        ConsumableDialog dP;

        if (window instanceof Frame) {
            dP = new ConsumableDialog((Frame) window, app);
        } else {
            dP = new ConsumableDialog((Dialog) window, app);
        }

        return dP;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Saved List");
        jLabel1.setName("jLabel1"); // NOI18N

        jButton1.setText("Load");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Remove");
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addComponent(jLabel1)
                .addContainerGap(185, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(125, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            if (jTable1.getSelectedRow() != -1) {
                int row = jTable1.getSelectedRow();
                Consumable c = consu.get(row);
                deleteLine(c.getSharedTicketId().toString());
                load(typeofBiling, dlrec);
            } else {
                JOptionPane.showMessageDialog(this, "select any row");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            int i = jTable1.getSelectedRow();
            consumable = new Consumable();
            if (i >= 0 && i < consu.size()) {
                Consumable c = consu.get(i);
                setConsumable(c);
                setLoaded(true);
                setVisible(false);
            } else {
                MessageInf msg = new MessageInf(MessageInf.SGN_NOTICE, AppLocal.getIntString("message.ticketnotselected"));
                msg.show(this);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void deleteLine(String sharedTicetId) throws BasicException {
        new StaticSentence(app.getSession(), "DELETE FROM SHAREDTICKETS WHERE ID=?", SerializerWriteString.INSTANCE).exec(sharedTicetId);
    }

    /**
     * @param args the command line arguments
     */
    public void showDialog(DataLogicSales dlsales, DataLogicReceipts dlreceipts, int typeOfBilling) {
        this.dlrec = dlreceipts;
        this.typeofBiling = typeOfBilling;
        load(typeOfBilling, dlreceipts);
        setVisible(true);
    }

    private void load(int typeOfBilling, DataLogicReceipts dlreceipts) {
        if (typeOfBilling == 0) {
            loadCurrentSharedTickets(app, dlreceipts);
        } else if (typeOfBilling == 1) {
            loadCurrentSharedTickets1(app, dlreceipts);
        }
        ctmodel = new ConsumableTableModel(consu, typeOfBilling);
        jTable1.setModel(ctmodel);
        TableColumnModel columnModel = jTable1.getColumnModel();
        columnModel.getColumn(1).setPreferredWidth(100);
        columnModel.getColumn(2).setWidth(120);
        columnModel.getColumn(2).setPreferredWidth(100);
        columnModel.getColumn(2).setMaxWidth(120);
        columnModel.getColumn(3).setPreferredWidth(100);
        columnModel.getColumn(3).setMaxWidth(120);
    }

    private void loadCurrentSharedTickets(AppView m_App, DataLogicReceipts dlReceipts) {
        try {
            List<SharedTicketInfo> sti = dlReceipts.getConsumableSharedTicketList(m_App.getAppUserView().getUser().getRole(), 1);
            consu = new ArrayList<Consumable>(sti.size());
            for (Iterator<SharedTicketInfo> it = sti.iterator(); it.hasNext();) {
                SharedTicketInfo sharedTicketInfo = it.next();
                Consumable t = getSharedTicket1(sharedTicketInfo.getId(), m_App.getAppUserView().getUser().getRole());
                if (t != null) {
                    consu.add(t);
                }
            }

        } catch (BasicException e) {
            new MessageInf(e).show(this);
        }
    }

    private void loadCurrentSharedTickets1(AppView m_App, DataLogicReceipts dlReceipts) {
        try {
            List<SharedTicketInfo> sti = dlReceipts.getConsumableSharedTicketList1(m_App.getAppUserView().getUser().getRole(), 1);
            consu = new ArrayList<Consumable>(sti.size());
            for (Iterator<SharedTicketInfo> it = sti.iterator(); it.hasNext();) {
                SharedTicketInfo sharedTicketInfo = it.next();
                Consumable t = getSharedTicket1(sharedTicketInfo.getId(), m_App.getAppUserView().getUser().getRole());
                if (t != null) {
                    consu.add(t);
                }
            }

        } catch (BasicException e) {
            new MessageInf(e).show(this);
        }
    }

    public final List<Consumable> getSharedTicketList(String counter, int type) throws BasicException {

        return (List<Consumable>) new StaticSentence(app.getSession(), "SELECT CID, NAME FROM SHAREDTICKETS WHERE COUNTER=? AND TYPE=? ORDER BY NAME", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.INT}), new SerializerReadClass(Consumable.class)).list(new Object[]{counter, type});
    }

    public final Consumable getSharedTicket1(String Id, String counter) throws BasicException {

        if (Id == null) {
            return null;
        } else {
            Object[] record = (Object[]) new StaticSentence(app.getSession(), "SELECT CONTENT FROM SHAREDTICKETS WHERE ID = ? AND COUNTER=?", new SerializerWriteBasic(new Datas[]{
                        Datas.STRING, Datas.STRING
                    }), new SerializerReadBasic(new Datas[]{
                        Datas.SERIALIZABLE
                    })).find(new Object[]{
                        Id, counter
                    });
            return record == null ? null : (Consumable) record[0];

        }
    }

    public final Consumable getSharedTicket2(String DeptId, String counter) throws BasicException {

        if (DeptId == null) {
            return null;
        } else {
            Object[] record = (Object[]) new StaticSentence(app.getSession(), "SELECT CONTENT FROM SHAREDTICKETS WHERE ID = ? AND COUNTER=?", new SerializerWriteBasic(new Datas[]{
                        Datas.STRING, Datas.STRING
                    }), new SerializerReadBasic(new Datas[]{
                        Datas.SERIALIZABLE
                    })).find(new Object[]{
                        DeptId, counter
                    });
            return record == null ? null : (Consumable) record[0];
            // return (TicketInfo) record[0];

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
