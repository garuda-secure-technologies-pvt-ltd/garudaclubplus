/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BillReversal.java
 *
 * Created on Mar 10, 2009, 10:31:29 AM
 */
package com.openbravo.pos.sales;

import com.openbravo.basic.BasicException;
import com.openbravo.data.loader.DataParams;
import com.openbravo.data.loader.DataWrite;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.loader.PreparedSentence;
import com.openbravo.data.loader.SentenceExec;
import com.openbravo.data.loader.SerializerReadBasic;
import com.openbravo.data.loader.SerializerReadString;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.data.loader.SerializerWriteBasicExt;
import com.openbravo.data.loader.SerializerWriteParams;
import com.openbravo.data.loader.SerializerWriteString;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.data.loader.Transaction;
import com.openbravo.pos.clubmang.DataLogicFacilities;
import com.openbravo.pos.forms.AppLocal;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.forms.DataLogicSales;
import com.openbravo.pos.forms.JPanelView;
import com.openbravo.pos.forms.LookupUtilityImpl;
import com.openbravo.pos.ticket.ProductInfoExt;
import com.openbravo.pos.ticket.TaxInfo;
import com.openbravo.pos.ticket.TicketLineInfo;
import com.openbravo.pos.ticket.TicketTaxInfo;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.UUID;
import javax.swing.JComponent;
import javax.swing.JOptionPane;

/**
 *
 * @author swathi
 */
public class BillReversal extends javax.swing.JPanel implements JPanelView, BeanFactoryApp {

    /** Creates new form BillReversal */
    private AppView m_App;
    private String user;
    private BillReversalTableModel rbillmodel;
    private DataLogicSales dlsales;
    private BillLogic blogic;
    private DataLogicFacilities dlfac;

    public BillReversal() {
        initComponents();
    }

    public void init(AppView app) throws BeanFactoryException {
        // List rbillList
        m_App = app;
        dlsales = (DataLogicSales) m_App.getBean("com.openbravo.pos.forms.DataLogicSalesCreate");
        dlfac = (DataLogicFacilities) app.getBean("com.openbravo.pos.clubmang.DataLogicFacilitiesCreate");
        setbuttons();
    }

    public Object getBean() {
        return this;
    }

    public JComponent getComponent() {
        return this;
    }

    public String getTitle() {
        return "Discount";
    }

    public void activate() throws BasicException {
        loadData();
    }

    public boolean deactivate() {
        // se me debe permitir cancelar el deactivate
        return true;
    }

    private void loadData() throws BasicException {
        setbuttons();
        rbillmodel = BillReversalTableModel.loadInstance(m_App);
        jTable1.setModel(rbillmodel.getdiscountTableModel());

    }

    private void setbuttons() {
        blogic = LookupUtilityImpl.getInstance(null).getDataLogicBill();
        user = m_App.getAppUserView().getUser().getName();
        boolean permtemp = (m_App.getAppUserView().getUser().hasPermission("discount.request"));
        if (user.equals("Administrator") || permtemp) {
            jButton1.setVisible(true);
            jButton2.setVisible(true);
            jButton1.setEnabled(true);
            jButton2.setEnabled(true);
            jButton3.setEnabled(false);
            jButton3.setVisible(false);

        } else {
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jButton1.setVisible(false);
            jButton2.setVisible(false);
            jButton3.setVisible(true);
            jButton3.setEnabled(true);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Bill Id", "Customer", "user", "Product", "Qty", "Rate", "Amount", "Authorised", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Allow");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Reject");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(175, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (jTable1.getSelectedRowCount() == 1) {
            int r = jTable1.getSelectedRow();
            String id = (String) rbillmodel.getdiscountTableModel().getValueAt(r, 0);
            String product = (String) rbillmodel.getdiscountTableModel().getValueAt(r, 10);
            String rid = (String) rbillmodel.getdiscountTableModel().getValueAt(r, 11);
            try {
                new StaticSentence(m_App.getSession(), "UPDATE REVERSEDBILL SET AUTHORISED = FALSE WHERE ID=? AND AUTHORISED IS NULL ", new SerializerWriteBasic(new Datas[]{Datas.STRING})).exec(new Object[]{rid});
                loadData();
            } catch (Exception e) {
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select one product at a time", "Error", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int del = jTable1.getSelectedRowCount();
        if (jTable1.getSelectedRowCount() == 1) {
            int r = jTable1.getSelectedRow();
            String id = (String) rbillmodel.getdiscountTableModel().getValueAt(r, 0);
            String product = (String) rbillmodel.getdiscountTableModel().getValueAt(r, 10);

            try {
                new StaticSentence(m_App.getSession(), "DELETE FROM REVERSEDBILL WHERE BILLID = ? AND PRODUCT =? AND CREATEDBY=? AND AUTHORISED IS NULL ", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING})).exec(new Object[]{id, product, m_App.getAppUserView().getUser().getName()});
                loadData();
            } catch (Exception e) {
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select one product at a time", "Error", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            if (jTable1.getSelectedRowCount() == 1) {
                
                int rz = jTable1.getSelectedRow();
                String ratez = rbillmodel.getdiscountTableModel().getValueAt(rz, 5).toString();
                Double rate1z = Double.parseDouble(ratez);
               
                if(rate1z!=0.00){
                
                Transaction t = new Transaction(m_App.getSession()) {

                    @Override
                    protected Object transact() throws BasicException {
                        Date dnow = new Date();
                        int r = jTable1.getSelectedRow();
                        String id = (String) rbillmodel.getdiscountTableModel().getValueAt(r, 0);
                        String product = (String) rbillmodel.getdiscountTableModel().getValueAt(r, 10);
                        String qty = rbillmodel.getdiscountTableModel().getValueAt(r, 4).toString();
                        String rate = rbillmodel.getdiscountTableModel().getValueAt(r, 5).toString();
                        String user = rbillmodel.getdiscountTableModel().getValueAt(r, 2).toString();
                        Double qty1 = Double.parseDouble(qty);
                        Double rate1 = Double.parseDouble(rate);
                        Double Taxtotal = (Double) rbillmodel.getdiscountTableModel().getValueAt(r, 12);
                        
              
 ///aaa
        // code edited for offer values....... 
                        
                Object[] AccQty = (Object[]) new StaticSentence(m_App.getSession(), "SELECT QTY FROM reversedbill WHERE BILLID = ? AND PRODUCT = ? AND RATE=0.00 ",  new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING}) , new SerializerReadBasic(new Datas[]{Datas.DOUBLE})).find(new Object[]{ id, product});  
                Double FinalQty =0.00;
                if(AccQty!=null){
                     FinalQty =  Double.parseDouble(AccQty[0].toString());
                     if(FinalQty<0){
                         FinalQty = FinalQty*(-1);
                     }
                    System.out.println("total qty including ");
                }
                
/////////////////////////////////////         ////////////////////////////////////////////////////////        ///////////////////////////////////////// 
                
            String BMName="Credit Check for billing member";
            String BName2 = "Facility for billing member"; 
         
             Object[] FacObj = (Object[]) new StaticSentence(m_App.getSession(), "SELECT VALUE FROM GENERALTABLE where NAME=?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.BOOLEAN})).find(BMName);
            if(FacObj!=null){  
                Boolean v5 = (Boolean)FacObj[0];
                if(v5){
                
                
                       /////////////////////////////////////         ////////////////////////////////////////////////////////        /////////////////////////////////////////////               
                
                                String cname=(String)rbillmodel.getdiscountTableModel().getValueAt(r, 1);
                                Object[] obg = (Object[]) new StaticSentence(m_App.getSession(), "SELECT CUSTOMER FROM BILL WHERE ID=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(id);
                                String idg=obg[0].toString();
                                Double damt = (Double)rbillmodel.getdiscountTableModel().getValueAt(r, 6);
                                damt = damt*(-1);
                                Object[] objid = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM customers where NAME=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(cname);
                                String idt=objid[0].toString();
                                if(idg.equals(idt)){
                                        Object[] objopb = (Object[]) new StaticSentence(m_App.getSession(), "SELECT CAST((CURROPB)AS DECIMAL(10,2)) FROM billingmember where ID=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(idt);
                                        if(objopb!=null){
                                            String popb=objopb[0].toString();
                                            Double POPB = new Double(popb);
                                            dlfac.roundTwoDecimals(POPB);
                                            Double COPB = POPB-(damt+Taxtotal);
                                            COPB = dlfac.roundTwoDecimals(COPB);
                                            new PreparedSentence(m_App.getSession(), "UPDATE billingmember SET CURROPB=? WHERE ID=?", new SerializerWriteBasic(new Datas[]{Datas.DOUBLE, Datas.STRING})).exec(new Object[]{COPB,idt});
                                        }
                                 }else{
                                         Object[] objopb = (Object[]) new StaticSentence(m_App.getSession(), "SELECT CAST((CURROPB)AS DECIMAL(10,2)) FROM billingmember where ID=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(idg);
                                         if(objopb!=null){
                                             String popb=objopb[0].toString();
                                             Double POPB = new Double(popb);
                                             dlfac.roundTwoDecimals(POPB);
                                             Double COPB = POPB-(damt+Taxtotal);
                                             COPB = dlfac.roundTwoDecimals(COPB);
                                             new PreparedSentence(m_App.getSession(), "UPDATE billingmember SET CURROPB=? WHERE ID=?", new SerializerWriteBasic(new Datas[]{Datas.DOUBLE, Datas.STRING})).exec(new Object[]{COPB,idg});
                                         }
                                 }
                            /////////////////////////////////////         ////////////////////////////////////////////////////////        /////////////////////////////////////////////
                
                    
                    
                    
                
                
                
                }
                else{
                
                
                        /////////////////////////////////////         ////////////////////////////////////////////////////////        /////////////////////////////////////////////
                        // Code added if other facility is selected.........
                        /////////////////////////////////////         ////////////////////////////////////////////////////////        /////////////////////////////////////////////
                    
                        Object[] Fac2Obj = (Object[]) new StaticSentence(m_App.getSession(), "SELECT VALUE FROM GENERALTABLE where NAME=?", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(BName2);
                        String FacStrFull  = Fac2Obj[0].toString();
                        String []strarr = FacStrFull.split("#");
                        String FinFacId = strarr[0];
                        
                        Object[] QtFacIdObj = (Object[]) new StaticSentence(m_App.getSession(), "select f.id  from facility f , locations l , bill b  where l.facility=f.id and b.warehouse=l.id and b.id= ?  ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(id);
                        String QtFacID  = QtFacIdObj[0].toString();
                        
                         if(FinFacId.equals(QtFacID)){
                        
                        
                            /////////////////////////////////////         ////////////////////////////////////////////////////////        /////////////////////////////////////////////               
                
                                String cname=(String)rbillmodel.getdiscountTableModel().getValueAt(r, 1);
                                Object[] obg = (Object[]) new StaticSentence(m_App.getSession(), "SELECT CUSTOMER FROM BILL WHERE ID=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(id);
                                String idg=obg[0].toString();
                                Double damt = (Double)rbillmodel.getdiscountTableModel().getValueAt(r, 6);
                                damt = damt*(-1);
                                Object[] objid = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM customers where NAME=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(cname);
                                String idt=objid[0].toString();
                                if(idg.equals(idt)){
                                        Object[] objopb = (Object[]) new StaticSentence(m_App.getSession(), "SELECT CAST((CURROPB)AS DECIMAL(10,2)) FROM billingmember where ID=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(idt);
                                        if(objopb!=null){
                                            String popb=objopb[0].toString();
                                            Double POPB = new Double(popb);
                                            dlfac.roundTwoDecimals(POPB);
                                            Double COPB = POPB-(damt+Taxtotal);
                                            COPB = dlfac.roundTwoDecimals(COPB);
                                            new PreparedSentence(m_App.getSession(), "UPDATE billingmember SET CURROPB=? WHERE ID=?", new SerializerWriteBasic(new Datas[]{Datas.DOUBLE, Datas.STRING})).exec(new Object[]{COPB,idt});
                                        }
                                 }else{
                                         Object[] objopb = (Object[]) new StaticSentence(m_App.getSession(), "SELECT CAST((CURROPB)AS DECIMAL(10,2)) FROM billingmember where ID=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(idg);
                                         if(objopb!=null){
                                             String popb=objopb[0].toString();
                                             Double POPB = new Double(popb);
                                             dlfac.roundTwoDecimals(POPB);
                                             Double COPB = POPB-(damt+Taxtotal);
                                             COPB = dlfac.roundTwoDecimals(COPB);
                                             new PreparedSentence(m_App.getSession(), "UPDATE billingmember SET CURROPB=? WHERE ID=?", new SerializerWriteBasic(new Datas[]{Datas.DOUBLE, Datas.STRING})).exec(new Object[]{COPB,idg});
                                         }
                                 }
                            /////////////////////////////////////         ////////////////////////////////////////////////////////        /////////////////////////////////////////////
                                
                
                             
                             
                             
                             
                         }
                }
            }   
            else{
                
                
                       /////////////////////////////////////         ////////////////////////////////////////////////////////        /////////////////////////////////////////////               
                
                                String cname=(String)rbillmodel.getdiscountTableModel().getValueAt(r, 1);
                                Object[] obg = (Object[]) new StaticSentence(m_App.getSession(), "SELECT CUSTOMER FROM BILL WHERE ID=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(id);
                                String idg=obg[0].toString();
                                Double damt = (Double)rbillmodel.getdiscountTableModel().getValueAt(r, 6);
                                damt = damt*(-1);
                                Object[] objid = (Object[]) new StaticSentence(m_App.getSession(), "SELECT ID FROM customers where NAME=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(cname);
                                String idt=objid[0].toString();
                                if(idg.equals(idt)){
                                        Object[] objopb = (Object[]) new StaticSentence(m_App.getSession(), "SELECT CAST((CURROPB)AS DECIMAL(10,2)) FROM billingmember where ID=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(idt);
                                        if(objopb!=null){
                                            String popb=objopb[0].toString();
                                            Double POPB = new Double(popb);
                                            dlfac.roundTwoDecimals(POPB);
                                            Double COPB = POPB-(damt+Taxtotal);
                                            COPB = dlfac.roundTwoDecimals(COPB);
                                            new PreparedSentence(m_App.getSession(), "UPDATE billingmember SET CURROPB=? WHERE ID=?", new SerializerWriteBasic(new Datas[]{Datas.DOUBLE, Datas.STRING})).exec(new Object[]{COPB,idt});
                                        }
                                 }else{
                                         Object[] objopb = (Object[]) new StaticSentence(m_App.getSession(), "SELECT CAST((CURROPB)AS DECIMAL(10,2)) FROM billingmember where ID=? ", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING})).find(idg);
                                         if(objopb!=null){
                                             String popb=objopb[0].toString();
                                             Double POPB = new Double(popb);
                                             dlfac.roundTwoDecimals(POPB);
                                             Double COPB = POPB-(damt+Taxtotal);
                                             COPB = dlfac.roundTwoDecimals(COPB);
                                             new PreparedSentence(m_App.getSession(), "UPDATE billingmember SET CURROPB=? WHERE ID=?", new SerializerWriteBasic(new Datas[]{Datas.DOUBLE, Datas.STRING})).exec(new Object[]{COPB,idg});
                                         }
                                 }
                            /////////////////////////////////////         ////////////////////////////////////////////////////////        /////////////////////////////////////////////
                
                
                
                
            }
                
                
                
                
                
                
                
 
///aaa           
                
                        
                        int count = new StaticSentence(m_App.getSession(), "UPDATE REVERSEDBILL SET AUTHORISED = TRUE,CRDATE=? WHERE BILLID = ? AND PRODUCT =? AND AUTHORISED IS NULL ", new SerializerWriteBasic(new Datas[]{Datas.TIMESTAMP, Datas.STRING, Datas.STRING})).exec(new Object[]{dnow, id, product});
                        if (count > 0) {
                            //praveen:changes start--bill reversal
                        ProductInfoExt prd = dlsales.getProductInfo(product);
                        TaxInfo tax = dlsales.getTaxListById(prd.getTaxCategoryID());
                        
                        TaxInfo tax2 = null;
                        TaxInfo tax3 = null;
                        if(prd.getTaxCategoryID2()!=null && prd.getTaxCategoryID2().trim().length()>0){
                            
                          tax2 = dlsales.getTaxListById(prd.getTaxCategoryID2());  
                            
                        }
                        if(prd.getTaxCategoryID3()!=null && prd.getTaxCategoryID3().trim().length()>0){
                            
                          tax3 = dlsales.getTaxListById(prd.getTaxCategoryID3());
                            
                        }
                        
//                        TicketLineInfo t = new TicketLineInfo(prd, qty1, rate1, tax, (java.util.Properties) (prd.getProperties().clone()));
//                        TaxesLogic tlogic = new TaxesLogic(dlsales.getTaxList().list());
//                        List<TicketTaxInfo> tline = tlogic.calculateTaxes(t);
                        String custCurrentAccount = null;
                        Object objware = new StaticSentence(m_App.getSession(), "select l.customercurrentaccount from locations l,bill b where b.warehouse=l.id and b.id=?", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find(id);
                        if (objware != null) {
                            custCurrentAccount = objware.toString();
                        }
                         //praveen:changes end--bill reversal
                            List<BillLineInfo> binfo = blogic.getBillLineList(id);
                            
                            Object obj1 = new PreparedSentence(m_App.getSession(), "SELECT CLOSESALESEQ FROM BILL WHERE ID=?", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find(id);
                            int  line = binfo.size();
                            line++;
                            final Properties p = (Properties) binfo.get(0).getProperties().clone();
                            Double total = rate1 * qty1;
                            
                            ByteArrayOutputStream o  = new ByteArrayOutputStream();
                            try {
                                    o = new ByteArrayOutputStream();
                                   p.storeToXML(o, AppLocal.APP_NAME, "UTF-8");
                                   
                                } catch (IOException e) {
                                              
                                }
                           
                            Double taxrate = 0.0;
                            Double Taxrate2 =0.00;
                            Double Taxrate3=0.00;
                            String gtax1id=null;
                            double gtax1=0.00;
                            String gtax2id=null;
                            int gtax2cas=1;
                            double gtax2=0.00;
                            String gtax3id=null;
                            int gtax3cas=1;
                            double gtax3=0.00;
                            
                            
                            for (BillLineInfo bltemp : binfo) {
                                if (bltemp.getProduct().getID().equals(product)) {
                                    bltemp.setTaxInfo(tax);
                                    taxrate =  (total*tax.getRate());      // esited        taxrate =  taxrate + (total*tax.getRate());  
                                    gtax1id=tax.getId();
                                    gtax1=taxrate;
                                    if(tax2!=null){
                                        bltemp.setTaxInfo2(tax2); 
                                         Taxrate2 = (total*tax2.getRate());
                                         gtax2id=tax2.getId();
                                         if(tax2.isCascade())
                                            gtax2cas=0;
                                         else
                                             gtax2cas=1;
                                         gtax2=Taxrate2;
                                    }
                                    if(tax3!=null){
                                        bltemp.setTaxInfo3(tax3);  
                                         Taxrate3 =  (total*tax3.getRate());
                                         gtax3id=tax3.getId();
                                         if(tax3.isCascade())
                                            gtax3cas=0;
                                         else
                                             gtax3cas=1;
                                         gtax3=Taxrate3;
                                    }
                                   
                                    
                                   // taxrate = bltemp.getTaxRate();
                                    //tax=bltemp.getTaxInfo();
                                }
                            }
                          //  taxrate = (rate1) * taxrate *(qty1 * -1);
                            Double amt = rate1 * (qty1 * -1);
                            taxrate = dlfac.roundTwoDecimals(taxrate);
                            Taxrate2 = dlfac.roundTwoDecimals(Taxrate2);
                            Taxrate3 = dlfac.roundTwoDecimals(Taxrate3);
                             
                            amt = dlfac.roundTwoDecimals(amt);
                            String taxAccount = tax.getTaxCustCategoryID();
                            String taxAccount2 = null;
                            String taxAccount3 = null;
                                    
                            if(tax2!=null){
                                       taxAccount2 = tax2.getTaxCustCategoryID();
                             }
                             if(tax3!=null){
                                        taxAccount3 = tax3.getTaxCustCategoryID();
                              }
                            
                             //praveen:changes start--bill reversal
                            String tid = UUID.randomUUID().toString();
                            String narration = "Tax amount for the reversed bill :" + id;
                           // for (TicketTaxInfo tl : tline) {
                            
                            Object[] value = new Object[]{UUID.randomUUID().toString(), line, id, product, qty1, rate1, total , o.toByteArray(), gtax1id,gtax1, gtax2id, gtax2cas,gtax2, gtax3id, gtax3cas, gtax3};
                          
                           

                            
                            
                            
                           
                            // Datas type[]=new Datas{Datas.STRING,};
                           
                            new PreparedSentence(m_App.getSession(), "INSERT INTO BILLITEM (ID, LINE ,PARENTID, PRODUCT, DMULTIPLY, RATE,TOTAL , ATTRIBUTES,Tax1ID,Tax1,Tax2ID,T2_Cas,Tax2,Tax3ID,T3_Cas,Tax3 ) VALUES (?, ?, ?, ?, ?, ?,? , ?, ?, ?, ?, ?, ?, ?, ?, ?)", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.INT, Datas.STRING, Datas.STRING, Datas.DOUBLE, Datas.DOUBLE, Datas.DOUBLE , Datas.BYTES,Datas.STRING, Datas.DOUBLE,Datas.STRING,Datas.INT,Datas.DOUBLE,Datas.STRING,Datas.INT,Datas.DOUBLE })).exec(value);
                           
                            if(FinalQty>0){
                                  line++;
                                  Double OfferQty = FinalQty * (-1);
                                  Double OfferRate = (0) * rate1;
                                  Double OfferTotal = (0) * rate1;
                                  Object[] OfferValue = new Object[]{UUID.randomUUID().toString(), line, id, product, OfferQty, OfferRate, OfferTotal, o.toByteArray(), gtax1id,gtax1, gtax2id, gtax2cas,gtax2, gtax3id, gtax3cas, gtax3};
                                  new PreparedSentence(m_App.getSession(), "INSERT INTO BILLITEM (ID, LINE ,PARENTID, PRODUCT, DMULTIPLY, RATE,TOTAL , ATTRIBUTES,Tax1ID,Tax1,Tax2ID,T2_Cas,Tax2,Tax3ID,T3_Cas,Tax3  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.INT, Datas.STRING, Datas.STRING, Datas.DOUBLE, Datas.DOUBLE, Datas.DOUBLE , Datas.BYTES,Datas.STRING, Datas.DOUBLE,Datas.STRING,Datas.INT,Datas.DOUBLE,Datas.STRING,Datas.INT,Datas.DOUBLE })).exec(OfferValue);
                            }
                            
                            
                        /*    
                            PreparedSentence l = new PreparedSentence(m_App.getSession(), "UPDATE BILLITEM SET ATTRIBUTES = ? WHERE PARENTID = ? AND LINE=0", SerializerWriteParams.INSTANCE);
                               
                             l.exec(new DataParams() {

                                        @Override
                                        public void writeValues() throws BasicException {
                                            try {
                                                ByteArrayOutputStream o = new ByteArrayOutputStream();
                                                p.storeToXML(o, AppLocal.APP_NAME, "UTF-8");
                                                setBytes(1, o.toByteArray());
                                            } catch (IOException e) {
                                                setBytes(1, null);
                                            }
                                            setString(2, Fid);
                                        }
                                    });
                          
                          */  
                            
                            
                            
                            
                            
                            

                              // dlsales.updateStockVolume1(-qty1, product);
//                            Double taxrate = 0.0;
//                            Double Taxrate2 =0.00;
//                            Double Taxrate3=0.00;
//                            
//                            
//                            for (BillLineInfo bltemp : binfo) {
//                                if (bltemp.getProduct().getID().equals(product)) {
//                                    bltemp.setTaxInfo(tax);
//                                    taxrate =  (total*tax.getRate());      // esited        taxrate =  taxrate + (total*tax.getRate());  
//                                    if(tax2!=null){
//                                        bltemp.setTaxInfo2(tax2); 
//                                         Taxrate2 = (total*tax2.getRate());
//                                    }
//                                    if(tax3!=null){
//                                        bltemp.setTaxInfo3(tax3);  
//                                         Taxrate3 =  (total*tax3.getRate());
//                                    }
//                                   
//                                    
//                                   // taxrate = bltemp.getTaxRate();
//                                    //tax=bltemp.getTaxInfo();
//                                }
//                            }
//                          //  taxrate = (rate1) * taxrate *(qty1 * -1);
//                            Double amt = rate1 * (qty1 * -1);
//                            taxrate = dlfac.roundTwoDecimals(taxrate);
//                            Taxrate2 = dlfac.roundTwoDecimals(Taxrate2);
//                            Taxrate3 = dlfac.roundTwoDecimals(Taxrate3);
//                             
//                            amt = dlfac.roundTwoDecimals(amt);
//                            String taxAccount = tax.getTaxCustCategoryID();
//                            String taxAccount2 = null;
//                            String taxAccount3 = null;
//                                    
//                            if(tax2!=null){
//                                       taxAccount2 = tax2.getTaxCustCategoryID();
//                             }
//                             if(tax3!=null){
//                                        taxAccount3 = tax3.getTaxCustCategoryID();
//                              }
//                            
//                             //praveen:changes start--bill reversal
//                            String tid = UUID.randomUUID().toString();
//                            String narration = "Tax amount for the reversed bill :" + id;
//                           // for (TicketTaxInfo tl : tline) {
//                               
                            
 // edited by aakash                           
                            
                            if (obj1!=null) {
                                   new PreparedSentence(m_App.getSession(), "INSERT INTO TAXLINES (ID, RECEIPT, TAXID, BASE, AMOUNT)  VALUES (?, ?, ?, ?, ?)", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING, Datas.DOUBLE, Datas.DOUBLE}), null).exec(new Object[]{UUID.randomUUID().toString(), id, tax.getId(), amt, (taxrate )});
                                  
                                    Object[] cvalue = new Object[]{UUID.randomUUID().toString(), tid, null, dnow, "D", "Bill reverse", id, (taxrate*-1), dnow, true, m_App.getAppUserView().getUser().getName(), m_App.getProperties().getHost(), narration, taxAccount, 0.0, dnow, null, true};
                                    dlfac.insertintoaccjoutnal2(cvalue);
                                    Object[] dvalue = new Object[]{UUID.randomUUID().toString(), tid, null, dnow, "C", "Bill reverse", id, (taxrate*-1), dnow, true, m_App.getAppUserView().getUser().getName(), m_App.getProperties().getHost(), narration, custCurrentAccount, 0.0, dnow, null, true};
                                    dlfac.insertintoaccjoutnal2(dvalue);
                                   
                                   
                                    if(tax2!=null){
                                        new PreparedSentence(m_App.getSession(), "INSERT INTO TAXLINES (ID, RECEIPT, TAXID, BASE, AMOUNT)  VALUES (?, ?, ?, ?, ?)", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING, Datas.DOUBLE, Datas.DOUBLE}), null).exec(new Object[]{UUID.randomUUID().toString(), id, tax2.getId(), amt, (Taxrate2 )});
                                         Object[] cvalue2 = new Object[]{UUID.randomUUID().toString(), tid, null, dnow, "D", "Bill reverse", id, (Taxrate2*-1), dnow, true, m_App.getAppUserView().getUser().getName(), m_App.getProperties().getHost(), narration, taxAccount2, 0.0, dnow, null, true};
                                          dlfac.insertintoaccjoutnal2(cvalue2);
                                          Object[] dvalue2 = new Object[]{UUID.randomUUID().toString(), tid, null, dnow, "C", "Bill reverse", id, (Taxrate2*-1), dnow, true, m_App.getAppUserView().getUser().getName(), m_App.getProperties().getHost(), narration, custCurrentAccount, 0.0, dnow, null, true};
                                          dlfac.insertintoaccjoutnal2(dvalue2);
                                        
                                    }
                                    if(tax3!=null){
                                       new PreparedSentence(m_App.getSession(), "INSERT INTO TAXLINES (ID, RECEIPT, TAXID, BASE, AMOUNT)  VALUES (?, ?, ?, ?, ?)", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING, Datas.DOUBLE, Datas.DOUBLE}), null).exec(new Object[]{UUID.randomUUID().toString(), id, tax3.getId(), amt, (Taxrate3 )}); 
                                   
                                          Object[] cvalue3 = new Object[]{UUID.randomUUID().toString(), tid, null, dnow, "D", "Bill reverse", id, (Taxrate3*-1), dnow, true, m_App.getAppUserView().getUser().getName(), m_App.getProperties().getHost(), narration, taxAccount3, 0.0, dnow, null, true};
                                          dlfac.insertintoaccjoutnal2(cvalue3);
                                          Object[] dvalue3 = new Object[]{UUID.randomUUID().toString(), tid, null, dnow, "C", "Bill reverse", id, (Taxrate3*-1), dnow, true, m_App.getAppUserView().getUser().getName(), m_App.getProperties().getHost(), narration, custCurrentAccount, 0.0, dnow, null, true};
                                          dlfac.insertintoaccjoutnal2(dvalue3);
                                    
                                    
                                    
                                    }
                                    
                                    
                                    
                                    
                                    
                                  
                                   
                                    
                                    
                                    


                                     // for CLOSEDSALE UPDATION 
                                    String ObjStr = obj1.toString();
                                    String []Seq  =  ObjStr.split(": ");
                                    String x = Seq[1];
                                    System.out.println(x);
                                    int CloseSeq = Integer.parseInt(x);
                                    
                                    
                                    System.out.println("length : "+x.length());
                                    new PreparedSentence(m_App.getSession(), "UPDATE  closedsale SET AMOUNT= (AMOUNT-?) where  sequence =? ", new SerializerWriteBasic(new Datas[]{Datas.DOUBLE, Datas.INT})).exec(new Object[]{(amt+taxrate) , CloseSeq});
                                    
                                    
                                   String SalesAccount = null;  
                                    
                                    Object objware2 = new StaticSentence(m_App.getSession(), "select l.salesaccount from locations l,bill b where b.warehouse=l.id and b.id= ? ", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find(id);
                                        if (objware2 != null) {
                                            SalesAccount = objware2.toString();
                                        }
                                    narration = "Product amount for the reversed bill :" + id;
                                    
                                    Object[] cvalue2 = new Object[]{UUID.randomUUID().toString(), tid, null, dnow, "D", "Bill reverse", id, amt, dnow, true, m_App.getAppUserView().getUser().getName(), m_App.getProperties().getHost(), narration, prd.getsAccount() , 0.0, dnow, null, true};
                                    dlfac.insertintoaccjoutnal2(cvalue2);
                                    Object[] dvalue2 = new Object[]{UUID.randomUUID().toString(), tid, null, dnow, "C", "Bill reverse", id, amt, dnow, true, m_App.getAppUserView().getUser().getName(), m_App.getProperties().getHost(), narration, custCurrentAccount, 0.0, dnow, null, true};
                                    dlfac.insertintoaccjoutnal2(dvalue2);
                                    
                                    
                                    
                                }else{
                                   
                                
                                // changes as amount was not getting minus
                                if(taxrate!=0){
                                    new PreparedSentence(m_App.getSession(), "INSERT INTO TAXLINES (ID, RECEIPT, TAXID, BASE, AMOUNT)  VALUES (?, ?, ?, ?, ?)", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING, Datas.DOUBLE, Datas.DOUBLE}), null).exec(new Object[]{UUID.randomUUID().toString(), id, tax.getId(),(-1)* amt, (taxrate )});
                                }
                                
                                  
                               if(tax2!=null){
                                   if(Taxrate2!=0){
                                        new PreparedSentence(m_App.getSession(), "INSERT INTO TAXLINES (ID, RECEIPT, TAXID, BASE, AMOUNT)  VALUES (?, ?, ?, ?, ?)", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING, Datas.DOUBLE, Datas.DOUBLE}), null).exec(new Object[]{UUID.randomUUID().toString(), id, tax2.getId(),(-1)* amt, (Taxrate2 )});
                                   }
                                   
                               }
                               if(tax3!=null){
                                   if(Taxrate3!=0){
                                        new PreparedSentence(m_App.getSession(), "INSERT INTO TAXLINES (ID, RECEIPT, TAXID, BASE, AMOUNT)  VALUES (?, ?, ?, ?, ?)", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.STRING, Datas.STRING, Datas.DOUBLE, Datas.DOUBLE}), null).exec(new Object[]{UUID.randomUUID().toString(), id, tax3.getId(),(-1)* amt, (Taxrate3 )}); 
                                   }
                               }
                            
                            
                            }
                            
                            
                            
                            
                            
                            
                            
                          //  }
                             //praveen:changes end--bill reversal
                            
                            new StaticSentence(m_App.getSession(), "UPDATE BILL SET AMOUNT = (AMOUNT - ?),TAXTOTAL=(TAXTOTAL-?) WHERE ID = ? ", new SerializerWriteBasic(new Datas[]{Datas.DOUBLE, Datas.DOUBLE, Datas.STRING})).exec(new Object[]{amt, ((taxrate+Taxrate2+Taxrate3)*(-1)), id});
                            int qline = 0;
                            String qt = "";
                            Object[] obj = (Object[]) new StaticSentence(m_App.getSession(), "SELECT QT.ID,MAX(Q.LINE) FROM QTICKET QT,QTITEMS Q WHERE Q.PARENTID = QT.ID AND QT.BILLREF = ? GROUP BY Q.PARENTID,QT.ID", SerializerWriteString.INSTANCE, new SerializerReadBasic(new Datas[]{Datas.STRING, Datas.INT})).find(id);
                            if (obj != null) {
                                qt = obj[0].toString();
                                qline = Integer.parseInt(obj[1].toString());
                                qline++;
                            }

                            Object value1 = new Object[]{UUID.randomUUID().toString(), qline, qt, product, qty1, rate1};
                            new PreparedSentence(m_App.getSession(), "INSERT INTO QTITEMS (ID, LINE ,PARENTID, PRODUCT, DMULTIPLY, RATE) VALUES (?, ?, ?, ?, ?, ?)", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.INT, Datas.STRING, Datas.STRING, Datas.DOUBLE, Datas.DOUBLE})).exec(value1);
                            dlsales.updateStockVolume1((qty1 * -1), product);
                           
                            if(obj1!=null && obj1.toString().length()>0){
                                Object objloc = new StaticSentence(m_App.getSession(), "select warehouse from bill b where id=? ", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find(id);
                                if(objloc!=null){
                                    String Loc = objloc.toString();
                                    return new PreparedSentence(m_App.getSession(), "INSERT INTO STOCKDIARY (ID, DATENEW, REASON1, LOCATION1, PRODUCT1, UNITS1, PRICE1,RNO,CREATEDBY) VALUES (?, ?, ?, ?, ?, ?, ?,?,?)", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.TIMESTAMP, Datas.STRING, Datas.STRING,Datas.STRING, Datas.DOUBLE, Datas.DOUBLE ,  Datas.STRING,Datas.STRING  })).exec(new Object[]{UUID.randomUUID().toString(), new Date(),"1",Loc,product,qty1*(-1),rate1,"QT", m_App.getAppUserView().getUser().getName() });
                                }
                                
                            }
                  // edited if product is having offer .....          
                            if(FinalQty>0){
                                 dlsales.updateStockVolume1(FinalQty, product);
                                 Object objloc = new StaticSentence(m_App.getSession(), "select warehouse from bill b where id=? ", SerializerWriteString.INSTANCE, SerializerReadString.INSTANCE).find(id);
                                    if(objloc!=null){
                                        String Loc = objloc.toString();
                                        return new PreparedSentence(m_App.getSession(), "INSERT INTO STOCKDIARY (ID, DATENEW, REASON1, LOCATION1, PRODUCT1, UNITS1, PRICE1,RNO,CREATEDBY) VALUES (?, ?, ?, ?, ?, ?, ?,?,?)", new SerializerWriteBasic(new Datas[]{Datas.STRING, Datas.TIMESTAMP, Datas.STRING, Datas.STRING,Datas.STRING, Datas.DOUBLE, Datas.DOUBLE ,  Datas.STRING,Datas.STRING  })).exec(new Object[]{UUID.randomUUID().toString(), new Date(),"1",Loc,product,FinalQty*(-1),rate1,"QT", m_App.getAppUserView().getUser().getName() });
                                    }
                                
                            }
                            
                            
                        /*        Object[] obj1=dlsales.getlocationFromStkCurrent(product);
                        if(obj1!=null){
                        dlsales.updateStockVolume1(qty1, product);

                        SentenceExec sent=  dlsales.getStockDiaryInsertinpdt();
                        Date d=new Date();
                        //-8 indicates discount accepted
                        Object[] values= new Object[]{UUID.randomUUID().toString(),d,-8,obj1[0].toString(),product,qty1,0.0,"Bill Discount",user};
                        sent.exec(values);
                        }*/
                        }
                       
                        
                        
                       
                        
                        
                      return null;
                        
                        
                    }
                };
                t.execute();
                loadData();
                
                   
                
                
                 }
                else{
                     JOptionPane.showMessageDialog(this, "Please select Item having rate greater than zero.", "Error", JOptionPane.OK_OPTION);
                }
                
              
            } 
           else {
                JOptionPane.showMessageDialog(this, "Please select one product at a time", "Error", JOptionPane.OK_OPTION);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
